{
    "title": "$:/plugins/ipfs",
    "description": "IPFS with TiddlyWiki",
    "author": "Xavier Maysonnave",
    "version": "v0.3.0-200509424",
    "license": "GPL-3.0-or-later",
    "core-version": ">=5.1.2",
    "source": "https://github.com/xmaysonnave/tiddlywiki-ipfs",
    "plugin-type": "plugin",
    "list": "readme changelog",
    "dependents": "",
    "type": "application/json",
    "text": "{\n    \"tiddlers\": {\n        \"$:/core/images/bluelight\": {\n            \"title\": \"$:/core/images/bluelight\",\n            \"created\": \"20200503045157536\",\n            \"modified\": \"20200503045157536\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment\",\n            \"type\": \"image/png\",\n            \"text\": \"\"\n        },\n        \"$:/core/images/ens\": {\n            \"title\": \"$:/core/images/ens\",\n            \"created\": \"20200120044634920\",\n            \"modified\": \"20200120044634920\",\n            \"source\": \"https://github.com/ensdomains/ens-app/blob/dev/public/safari-pinned-tab.svg\",\n            \"license\": \"https://github.com/ensdomains/ens-app/blob/dev/LICENSE\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment\",\n            \"type\": \"image/svg+xml\",\n            \"text\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n<svg\\n   xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n   xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n   xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n   xmlns:svg=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns:sodipodi=\\\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\\\"\\n   xmlns:inkscape=\\\"http://www.inkscape.org/namespaces/inkscape\\\"\\n   version=\\\"1.0\\\"\\n   width=\\\"18\\\"\\n   height=\\\"18\\\"\\n   viewBox=\\\"0 0 128 128\\\"\\n   class=\\\"tc-image-button\\\"\\n   preserveAspectRatio=\\\"xMidYMid meet\\\"\\n   id=\\\"svg14\\\"\\n   sodipodi:docname=\\\"ens-small.svg\\\"\\n   inkscape:version=\\\"0.92.4 (5da689c313, 2019-01-14)\\\"\\n>\\n  <defs\\n     id=\\\"defs18\\\" />\\n  <sodipodi:namedview\\n     pagecolor=\\\"#ffffff\\\"\\n     bordercolor=\\\"#666666\\\"\\n     borderopacity=\\\"1\\\"\\n     objecttolerance=\\\"10\\\"\\n     gridtolerance=\\\"10\\\"\\n     guidetolerance=\\\"10\\\"\\n     inkscape:pageopacity=\\\"0\\\"\\n     inkscape:pageshadow=\\\"2\\\"\\n     inkscape:window-width=\\\"1920\\\"\\n     inkscape:window-height=\\\"1020\\\"\\n     id=\\\"namedview16\\\"\\n     showgrid=\\\"false\\\"\\n     inkscape:zoom=\\\"12.361274\\\"\\n     inkscape:cx=\\\"41.295086\\\"\\n     inkscape:cy=\\\"21.734019\\\"\\n     inkscape:window-x=\\\"0\\\"\\n     inkscape:window-y=\\\"31\\\"\\n     inkscape:window-maximized=\\\"1\\\"\\n     inkscape:current-layer=\\\"svg14\\\" />\\n  <metadata\\n     id=\\\"metadata2\\\">\\nCreated by potrace 1.11, written by Peter Selinger 2001-2013\\n<rdf:RDF>\\n  <cc:Work\\n     rdf:about=\\\"\\\">\\n    <dc:format>image/svg+xml</dc:format>\\n    <dc:type\\n       rdf:resource=\\\"http://purl.org/dc/dcmitype/StillImage\\\" />\\n    <dc:title></dc:title>\\n  </cc:Work>\\n</rdf:RDF>\\n</metadata>\\n  <g\\n     transform=\\\"matrix(0.08837363,0,0,-0.07925696,-8.0787259,127.6037)\\\"\\n     id=\\\"g12\\\"\\n     style=\\\"fill:#000000;stroke:none\\\">\\n    <path\\n       d=\\\"m 640,1519 c -69,-48 -173,-122 -231,-163 -94,-65 -110,-82 -134,-129 -30,-63 -37,-155 -15,-222 15,-49 61,-135 71,-135 6,0 437,704 447,731 7,19 -17,4 -138,-82 z\\\"\\n       id=\\\"path4\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"m 856,1598 c 4,-7 44,-67 89,-133 118,-175 286,-437 393,-615 93,-154 122,-224 125,-300 2,-55 17,-35 52,75 26,80 28,92 22,217 -7,185 -45,284 -149,387 -35,36 -520,381 -534,381 -3,0 -2,-6 2,-12 z\\\"\\n       id=\\\"path6\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"M 141,1068 C 97,969 87,913 93,776 98,649 106,607 146,523 163,485 224,403 254,378 291,346 772,9 776,12 c 2,2 -57,95 -131,206 -132,199 -320,496 -404,639 -48,81 -70,145 -73,210 -1,23 -3,43 -4,43 -2,0 -12,-19 -23,-42 z\\\"\\n       id=\\\"path8\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"M 1079,398 C 962,204 859,34 851,20 l -16,-25 30,21 c 306,211 436,304 461,331 51,53 72,165 49,254 -14,51 -63,149 -76,149 -4,0 -103,-159 -220,-352 z\\\"\\n       id=\\\"path10\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n  </g>\\n</svg>\"\n        },\n        \"$:/ipfs/logo/vector/ice/text\": {\n            \"title\": \"$:/ipfs/logo/vector/ice/text\",\n            \"created\": \"20200205040051030\",\n            \"modified\": \"20200205040053586\",\n            \"source\": \"https://github.com/ipfs/logo/blob/master/vector/ipfs-logo-vector-ice-text.svg\",\n            \"license\": \"https://github.com/ipfs/logo/blob/master/LICENSE\",\n            \"tags\": \"$:/isAttachment $:/isEmbedded\",\n            \"type\": \"image/svg+xml\",\n            \"text\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n<svg\\n  xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n  style=\\\"enable-background:new\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n  height=\\\"512\\\"\\n  width=\\\"512\\\"\\n  version=\\\"1.1\\\"\\n  xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n  xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n  viewBox=\\\"0 0 512 512\\\"\\n>\\n  <defs>\\n    <linearGradient id=\\\"c\\\" y2=\\\"771.51\\\" gradientUnits=\\\"userSpaceOnUse\\\" y1=\\\"771.51\\\" x2=\\\"527.72\\\" x1=\\\"84.315\\\">\\n      <stop stop-color=\\\"#4a9ea1\\\" offset=\\\"0\\\"/>\\n    </linearGradient>\\n    <linearGradient id=\\\"d\\\" y2=\\\"771.48\\\" gradientUnits=\\\"userSpaceOnUse\\\" y1=\\\"771.48\\\" x2=\\\"512.36\\\" x1=\\\"99.675\\\">\\n      <stop stop-color=\\\"#63d3d7\\\" offset=\\\"0\\\"/>\\n    </linearGradient>\\n  </defs>\\n  <g>\\n    <g style=\\\"enable-background:new\\\" transform=\\\"translate(-50.017,-515.51)\\\">\\n      <path fill=\\\"url(#c)\\\" d=\\\"m84.315 899.51 221.7 128 221.7-128v-256l-221.7-127.99-221.7 128z\\\"/>\\n      <path fill=\\\"url(#d)\\\" d=\\\"m283.13 546.35-160.74 92.806c0.32126 2.8543 0.32125 5.7352 0 8.5894l160.75 92.806c13.554-10.001 32.043-10.001 45.597 0l160.75-92.807c-0.32126-2.8543-0.32293-5.7338-0.001-8.588l-160.74-92.806c-13.554 10.001-32.044 10.001-45.599 0zm221.79 127.03-160.92 93.84c1.884 16.739-7.3611 32.751-22.799 39.489l0.18062 184.58c2.6325 1.1489 5.1267 2.5886 7.438 4.294l160.75-92.805c-1.884-16.739 7.3611-32.752 22.799-39.49v-185.61c-2.6325-1.1489-5.1281-2.5886-7.4394-4.294zm-397.81 1.0315c-2.3112 1.7054-4.8054 3.1465-7.438 4.2954v185.61c15.438 6.7378 24.683 22.75 22.799 39.489l160.74 92.806c2.3112-1.7054 4.8069-3.1465 7.4394-4.2954v-185.61c-15.438-6.7378-24.683-22.75-22.799-39.489l-160.74-92.81z\\\"/>\\n    </g>\\n    <g style=\\\"enable-background:new\\\" transform=\\\"translate(0,-196.66)\\\">\\n      <path fill-opacity=\\\".25098\\\" d=\\\"m256 708.66 221.7-128v-256l-221.7 128v256z\\\"/>\\n      <path fill-opacity=\\\".039216\\\" d=\\\"m256 708.66v-256l-221.7-128v256l221.7 128z\\\"/>\\n      <path fill-opacity=\\\".13018\\\" d=\\\"m34.298 324.66 221.7 128 221.7-128-221.7-128-221.7 128z\\\"/>\\n    </g>\\n  </g>\\n  <g style=\\\"enable-background:new\\\" fill=\\\"#fff\\\">\\n    <path d=\\\"m103.09 186h-29.2v141.2h29.2v-141.2z\\\"/>\\n    <path d=\\\"m153.97 327.2v-51.8c7.2 0.6 14.4 0.6 20.4 0.6 41.6 0 53.6-20.6 53.6-46 0-30.8-22-44-56-44h-47.2v141.2h29.2zm15.8-71.8c-5.4 0-13.4 0-15.8-0.2v-48h18.2c17.6 0 27.6 8.4 27.6 23.8v0.4c0 12-4.4 24-30 24z\\\"/>\\n    <path d=\\\"m327.95 186h-88.6v141.2h29.2v-62.2h55.4v-21.2h-55.6v-36.4h57.6l2-21.4z\\\"/>\\n    <path d=\\\"m423.51 213.6 7.6-19.6c-11.4-8.2-26.8-11.2-46.2-11.2-28.2 0-51.4 13.2-51.4 40.2 0 24.2 17.8 33.8 35.6 39.6l17.8 6c12.2 4.2 22.2 8.2 22.2 21.4 0 12-10.4 16.8-26.2 16.8-16 0-33.2-4.8-43-11l-7.6 21.2c12.8 8.2 29 12.2 50.8 12.2 31 0 55-13.6 55-42.6 0-27-20.6-35.6-41.4-42.6l-19.4-6.4c-8.4-2.8-14.8-6.6-14.8-17.4 0-11 9-15.4 22.4-15.4 16.4 0 29.2 3 38.6 8.8z\\\"/>\\n  </g>\\n</svg>\"\n        },\n        \"$:/core/images/ipfs\": {\n            \"title\": \"$:/core/images/ipfs\",\n            \"created\": \"20200120044634920\",\n            \"modified\": \"20200120044634920\",\n            \"source\": \"https://github.com/ipfs/logo/blob/master/vector/ipfs-logo-vector-black.svg\",\n            \"license\": \"https://github.com/ipfs/logo/blob/master/LICENSE\",\n            \"tags\": \"$:/tags/Image $:/ipfs/core $:/isAttachment\",\n            \"type\": \"image/svg+xml\",\n            \"text\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n<svg\\n   xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n   xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n   xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n   xmlns:svg=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns:sodipodi=\\\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\\\"\\n   xmlns:inkscape=\\\"http://www.inkscape.org/namespaces/inkscape\\\"\\n   style=\\\"enable-background:new\\\"\\n   height=\\\"22\\\"\\n   width=\\\"22\\\"\\n   version=\\\"1.1\\\"\\n   viewBox=\\\"0 0 128 128\\\"\\n   class=\\\"tc-image-button\\\"\\n   id=\\\"svg24\\\"\\n   sodipodi:docname=\\\"ipfs-small.svg\\\"\\n   inkscape:version=\\\"0.92.4 (5da689c313, 2019-01-14)\\\"\\n>\\n  <metadata\\n     id=\\\"metadata28\\\">\\n    <rdf:RDF>\\n      <cc:Work\\n         rdf:about=\\\"\\\">\\n        <dc:format>image/svg+xml</dc:format>\\n        <dc:type\\n           rdf:resource=\\\"http://purl.org/dc/dcmitype/StillImage\\\" />\\n        <dc:title></dc:title>\\n      </cc:Work>\\n    </rdf:RDF>\\n  </metadata>\\n  <sodipodi:namedview\\n     pagecolor=\\\"#ffffff\\\"\\n     bordercolor=\\\"#666666\\\"\\n     borderopacity=\\\"1\\\"\\n     objecttolerance=\\\"10\\\"\\n     gridtolerance=\\\"10\\\"\\n     guidetolerance=\\\"10\\\"\\n     inkscape:pageopacity=\\\"0\\\"\\n     inkscape:pageshadow=\\\"2\\\"\\n     inkscape:window-width=\\\"1920\\\"\\n     inkscape:window-height=\\\"1020\\\"\\n     id=\\\"namedview26\\\"\\n     showgrid=\\\"false\\\"\\n     units=\\\"pt\\\"\\n     inkscape:zoom=\\\"5.2149125\\\"\\n     inkscape:cx=\\\"133.61143\\\"\\n     inkscape:cy=\\\"41.576599\\\"\\n     inkscape:window-x=\\\"0\\\"\\n     inkscape:window-y=\\\"31\\\"\\n     inkscape:window-maximized=\\\"1\\\"\\n     inkscape:current-layer=\\\"svg24\\\" />\\n  <defs\\n     id=\\\"defs8\\\">\\n    <linearGradient\\n       id=\\\"b\\\"\\n       y2=\\\"771.51001\\\"\\n       gradientUnits=\\\"userSpaceOnUse\\\"\\n       x2=\\\"527.71997\\\"\\n       y1=\\\"771.51001\\\"\\n       x1=\\\"84.315002\\\">\\n      <stop\\n         offset=\\\"0\\\"\\n         id=\\\"stop2\\\" />\\n    </linearGradient>\\n    <linearGradient\\n       id=\\\"a\\\"\\n       y2=\\\"771.47998\\\"\\n       gradientUnits=\\\"userSpaceOnUse\\\"\\n       x2=\\\"512.35999\\\"\\n       y1=\\\"771.47998\\\"\\n       x1=\\\"99.675003\\\">\\n      <stop\\n         stop-color=\\\"#d8d8d8\\\"\\n         offset=\\\"0\\\"\\n         id=\\\"stop5\\\" />\\n    </linearGradient>\\n  </defs>\\n  <g\\n     transform=\\\"matrix(0.28867709,0,0,0.24999998,-24.339808,-128.87748)\\\"\\n     id=\\\"g14\\\">\\n    <path\\n       d=\\\"m 84.315,899.51 221.7,128 221.7,-128 v -256 l -221.7,-127.99 -221.7,128 z\\\"\\n       id=\\\"path10\\\"\\n       style=\\\"fill:url(#b)\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n    <path\\n       d=\\\"m 283.13,546.35 -160.74,92.806 c 0.32126,2.8543 0.32125,5.7352 0,8.5894 l 160.75,92.806 c 13.554,-10.001 32.043,-10.001 45.597,0 l 160.75,-92.807 c -0.32126,-2.8543 -0.32293,-5.7338 -0.001,-8.588 l -160.74,-92.806 c -13.554,10.001 -32.044,10.001 -45.599,0 z M 504.92,673.38 344,767.22 c 1.884,16.739 -7.3611,32.751 -22.799,39.489 l 0.18062,184.58 c 2.6325,1.1489 5.1267,2.5886 7.438,4.294 l 160.75,-92.805 c -1.884,-16.739 7.3611,-32.752 22.799,-39.49 v -185.61 c -2.6325,-1.1489 -5.1281,-2.5886 -7.4394,-4.294 z m -397.81,1.0315 c -2.3112,1.7054 -4.8054,3.1465 -7.438,4.2954 v 185.61 c 15.438,6.7378 24.683,22.75 22.799,39.489 l 160.74,92.806 c 2.3112,-1.7054 4.8069,-3.1465 7.4394,-4.2954 v -185.61 c -15.438,-6.7378 -24.683,-22.75 -22.799,-39.489 l -160.74,-92.81 z\\\"\\n       id=\\\"path12\\\"\\n       style=\\\"fill:url(#a)\\\"\\n       inkscape:connector-curvature=\\\"0\\\" />\\n  </g>\\n  <g\\n     transform=\\\"matrix(0.28867709,0,0,0.24999998,-9.9010468,-49.164992)\\\"\\n     id=\\\"g22\\\">\\n    <path\\n       d=\\\"m 256,708.66 221.7,-128 v -256 l -221.7,128 z\\\"\\n       id=\\\"path16\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       style=\\\"fill-opacity:0.25097997\\\" />\\n    <path\\n       d=\\\"m 256,708.66 v -256 l -221.7,-128 v 256 z\\\"\\n       id=\\\"path18\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       style=\\\"fill-opacity:0.03921599\\\" />\\n    <path\\n       d=\\\"m 34.298,324.66 221.7,128 221.7,-128 -221.7,-128 z\\\"\\n       id=\\\"path20\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       style=\\\"fill-opacity:0.13018003\\\" />\\n  </g>\\n</svg>\"\n        },\n        \"$:/ipfs/image/tiddlywiki\": {\n            \"title\": \"$:/ipfs/image/tiddlywiki\",\n            \"_canonical_uri\": \"/ipfs/bafkreihzzc42nwumjeaz4d6kxsbxa6vy5llnsvqtz3xjjwnjrhwkjy5loq\",\n            \"created\": \"20191220080350311\",\n            \"modified\": \"20191220080350311\",\n            \"tags\": \"$:/ipfs/documentation $:/isAttachment $:/isIpfs\",\n            \"type\": \"image/svg+xml\"\n        },\n        \"$:/ipfs/saver/api\": {\n            \"title\": \"$:/ipfs/saver/api\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"$:/ipfs/saver/api/https/ipfs.infura.io/5001\"\n        },\n        \"$:/ipfs/saver/ens/domain\": {\n            \"title\": \"$:/ipfs/saver/ens/domain\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/saver/export\": {\n            \"title\": \"$:/ipfs/saver/export\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"json\"\n        },\n        \"$:/ipfs/saver/gateway\": {\n            \"title\": \"$:/ipfs/saver/gateway\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"$:/ipfs/saver/gateway/https/gateway.ipfs.io\"\n        },\n        \"$:/ipfs/saver/ipns/key\": {\n            \"title\": \"$:/ipfs/saver/ipns/key\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/saver/ipns/name\": {\n            \"title\": \"$:/ipfs/saver/ipns/name\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"\"\n        },\n        \"$:/ipfs/saver/policy\": {\n            \"title\": \"$:/ipfs/saver/policy\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"gateway\"\n        },\n        \"$:/config/PreferredSaver\": {\n            \"title\": \"$:/config/PreferredSaver\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"$:/plugins/ipfs/ipfs-saver.js\"\n        },\n        \"$:/ipfs/saver/protocol\": {\n            \"title\": \"$:/ipfs/saver/protocol\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ipfs\"\n        },\n        \"$:/ipfs/saver/provider\": {\n            \"title\": \"$:/ipfs/saver/provider\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"http\"\n        },\n        \"$:/ipfs/saver/unpin\": {\n            \"title\": \"$:/ipfs/saver/unpin\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"bluelightav.eth\",\n            \"text\": \"no\"\n        },\n        \"$:/ipfs/saver/verbose\": {\n            \"title\": \"$:/ipfs/saver/verbose\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"bluelightav.eth\",\n            \"text\": \"no\"\n        },\n        \"$:/plugins/ipfs/modules/parsers/audioparser.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/parsers/audioparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/parsers/audioparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe audio parser parses an audio tiddler into an embeddable HTML element\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  var name = \\\"ipfs-audioparser\\\";\\n\\n  var AudioParser = function (type, text, options) {\\n    var self = this;\\n    var value = \\\"data:\\\" + type + \\\";base64,\\\";\\n    var element = {\\n      type: \\\"element\\\",\\n      tag: \\\"audio\\\",\\n      attributes: {\\n        controls: { type: \\\"string\\\", value: \\\"controls\\\" },\\n        style: { type: \\\"string\\\", value: \\\"width: 100%; object-fit: contain\\\" },\\n      },\\n    };\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var tiddler = options.tiddler;\\n      var canonicalUri = tiddler.fields._canonical_uri;\\n      if (canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() != \\\"\\\") {\\n        $tw.ipfs\\n          .resolveUrl(false, true, canonicalUri)\\n          .then((data) => {\\n            var { normalizedUrl, resolvedUrl } = data;\\n            var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n            if (url !== null) {\\n              $tw.ipfs\\n                .loadToBase64(url)\\n                .then((loaded) => {\\n                  element.attributes.src = { type: \\\"string\\\", value: value + loaded.data };\\n                  var parsedTiddler = $tw.utils.getChangedTiddler(tiddler);\\n                  $tw.rootWidget.refresh(parsedTiddler);\\n                })\\n                .catch((error) => {\\n                  self.getLogger().error(error);\\n                  $tw.utils.alert(name, error.message);\\n                });\\n            }\\n          })\\n          .catch((error) => {\\n            // Ignore\\n          });\\n      } else if (text) {\\n        element.attributes.src = { type: \\\"string\\\", value: value + text };\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element];\\n  };\\n\\n  AudioParser.prototype.getLogger = function () {\\n    if (window.log) {\\n      return window.log.getLogger(name);\\n    }\\n    return console;\\n  };\\n\\n  exports[\\\"audio/ogg\\\"] = AudioParser;\\n  exports[\\\"audio/mpeg\\\"] = AudioParser;\\n  exports[\\\"audio/mp3\\\"] = AudioParser;\\n  exports[\\\"audio/mp4\\\"] = AudioParser;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/plugins/ipfs/modules/parsers/binaryparser.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/parsers/binaryparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/parsers/binaryparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe binary parser parses a binary tiddler into a warning message and download link\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const name = \\\"ipfs-binaryparser\\\";\\n\\n  var BINARY_WARNING_MESSAGE = \\\"$:/core/ui/BinaryWarning\\\";\\n  var EXPORT_BUTTON_IMAGE = \\\"$:/core/images/export-button\\\";\\n\\n  var BinaryParser = function (type, text, options) {\\n    var self = this;\\n    // Transclude the binary data tiddler warning message\\n    var warn = {\\n      type: \\\"element\\\",\\n      tag: \\\"p\\\",\\n      children: [\\n        {\\n          type: \\\"transclude\\\",\\n          attributes: {\\n            tiddler: { type: \\\"string\\\", value: BINARY_WARNING_MESSAGE },\\n          },\\n        },\\n      ],\\n    };\\n    // Create download link based on binary tiddler title\\n    var link = {\\n      type: \\\"element\\\",\\n      tag: \\\"a\\\",\\n      attributes: {\\n        title: { type: \\\"indirect\\\", textReference: \\\"!!title\\\" },\\n        download: { type: \\\"indirect\\\", textReference: \\\"!!title\\\" },\\n      },\\n      children: [\\n        {\\n          type: \\\"transclude\\\",\\n          attributes: {\\n            tiddler: { type: \\\"string\\\", value: EXPORT_BUTTON_IMAGE },\\n          },\\n        },\\n      ],\\n    };\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var tiddler = options.tiddler;\\n      // Set the link href to external or internal data URI\\n      var canonicalUri = tiddler.fields._canonical_uri;\\n      if (canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() != \\\"\\\") {\\n        $tw.ipfs\\n          .resolveUrl(false, true, canonicalUri)\\n          .then((data) => {\\n            var { normalizedUrl, resolvedUrl } = data;\\n            var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n            if (url !== null) {\\n              link.attributes.href = {\\n                type: \\\"string\\\",\\n                value: url,\\n              };\\n              var parsedTiddler = $tw.utils.getChangedTiddler(tiddler);\\n              $tw.rootWidget.refresh(parsedTiddler);\\n            }\\n          })\\n          .catch((error) => {\\n            // Ignore\\n          });\\n      } else if (text) {\\n        link.attributes.href = {\\n          type: \\\"string\\\",\\n          value: \\\"data:\\\" + type + \\\";base64,\\\" + text,\\n        };\\n      }\\n    }\\n    // Combine warning message and download link in a div\\n    var element = {\\n      type: \\\"element\\\",\\n      tag: \\\"div\\\",\\n      attributes: {\\n        class: { type: \\\"string\\\", value: \\\"tc-binary-warning\\\" },\\n      },\\n      children: [warn, link],\\n    };\\n    this.tree = [element];\\n  };\\n\\n  BinaryParser.prototype.getLogger = function () {\\n    if (window.log) {\\n      return window.log.getLogger(name);\\n    }\\n    return console;\\n  };\\n\\n  exports[\\\"application/octet-stream\\\"] = BinaryParser;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/plugins/ipfs/modules/parsers/htmlparser.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/parsers/htmlparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/parsers/htmlparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe HTML parser displays text as raw HTML\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const name = \\\"ipfs-binaryparser\\\";\\n\\n  var HtmlParser = function (type, text, options) {\\n    var value = \\\"data:text/html;charset=utf-8,\\\";\\n    var src;\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var tiddler = options.tiddler;\\n      var canonicalUri = tiddler.fields._canonical_uri;\\n      if (canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() != \\\"\\\") {\\n        $tw.ipfs\\n          .resolveUrl(false, true, canonicalUri)\\n          .then((data) => {\\n            var { normalizedUrl, resolvedUrl } = data;\\n            var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n            if (url !== null) {\\n              src = url;\\n              var parsedTiddler = $tw.utils.getChangedTiddler(tiddler);\\n              $tw.rootWidget.refresh(parsedTiddler);\\n            }\\n          })\\n          .catch((error) => {\\n            // Ignore\\n          });\\n      } else if (text) {\\n        src = value + encodeURIComponent(text);\\n      }\\n    }\\n    this.tree = [\\n      {\\n        type: \\\"element\\\",\\n        tag: \\\"iframe\\\",\\n        attributes: {\\n          src: { type: \\\"string\\\", value: src },\\n          sandbox: { type: \\\"string\\\", value: \\\"\\\" },\\n        },\\n      },\\n    ];\\n  };\\n\\n  HtmlParser.prototype.getLogger = function () {\\n    if (window.log) {\\n      return window.log.getLogger(name);\\n    }\\n    return console;\\n  };\\n\\n  exports[\\\"text/html\\\"] = HtmlParser;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/plugins/ipfs/modules/parsers/imageparser.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/parsers/imageparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/parsers/imageparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe image parser parses an image into an embeddable HTML element\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  var name = \\\"ipfs-imageparser\\\";\\n\\n  var ImageParser = function (type, text, options) {\\n    var self = this;\\n    var value = \\\"data:\\\" + type + \\\";base64,\\\";\\n    var element = {\\n      type: \\\"element\\\",\\n      tag: \\\"img\\\",\\n      attributes: {},\\n    };\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var tiddler = options.tiddler;\\n      var canonicalUri = tiddler.fields._canonical_uri;\\n      if (canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() != \\\"\\\") {\\n        $tw.ipfs\\n          .resolveUrl(false, true, canonicalUri)\\n          .then((data) => {\\n            var { normalizedUrl, resolvedUrl } = data;\\n            var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n            if (url !== null) {\\n              $tw.ipfs\\n                .loadToBase64(url)\\n                .then((loaded) => {\\n                  element.attributes.src = { type: \\\"string\\\", value: value + loaded.data };\\n                  var parsedTiddler = $tw.utils.getChangedTiddler(tiddler);\\n                  $tw.rootWidget.refresh(parsedTiddler);\\n                })\\n                .catch((error) => {\\n                  self.getLogger().error(error);\\n                  $tw.utils.alert(name, error.message);\\n                });\\n            }\\n          })\\n          .catch((error) => {\\n            // Ignore\\n          });\\n      } else if (text) {\\n        element.attributes.src = { type: \\\"string\\\", value: value + text };\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element];\\n  };\\n\\n  ImageParser.prototype.getLogger = function () {\\n    if (window.log) {\\n      return window.log.getLogger(name);\\n    }\\n    return console;\\n  };\\n\\n  exports[\\\"image/jpg\\\"] = ImageParser;\\n  exports[\\\"image/jpeg\\\"] = ImageParser;\\n  exports[\\\"image/png\\\"] = ImageParser;\\n  exports[\\\"image/gif\\\"] = ImageParser;\\n  exports[\\\"image/webp\\\"] = ImageParser;\\n  exports[\\\"image/heic\\\"] = ImageParser;\\n  exports[\\\"image/heif\\\"] = ImageParser;\\n  exports[\\\"image/x-icon\\\"] = ImageParser;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/plugins/ipfs/modules/parsers/pdfparser.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/parsers/pdfparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/parsers/pdfparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe PDF parser embeds a PDF viewer\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const name = \\\"ipfs-pdfparser\\\";\\n\\n  var PdfParser = function (type, text, options) {\\n    var self = this;\\n    var value = \\\"data:application/pdf;base64,\\\";\\n    var element = {\\n      type: \\\"element\\\",\\n      tag: \\\"embed\\\",\\n      attributes: {},\\n    };\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var tiddler = options.tiddler;\\n      var canonicalUri = tiddler.fields._canonical_uri;\\n      if (canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() != \\\"\\\") {\\n        $tw.ipfs\\n          .resolveUrl(false, true, canonicalUri)\\n          .then((data) => {\\n            var { normalizedUrl, resolvedUrl } = data;\\n            var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n            if (url !== null) {\\n              $tw.ipfs\\n                .loadToBase64(url)\\n                .then((loaded) => {\\n                  element.attributes.src = { type: \\\"string\\\", value: value + loaded.data };\\n                  var parsedTiddler = $tw.utils.getChangedTiddler(tiddler);\\n                  $tw.rootWidget.refresh(parsedTiddler);\\n                })\\n                .catch((error) => {\\n                  self.getLogger().error(error);\\n                  $tw.utils.alert(name, error.message);\\n                });\\n            }\\n          })\\n          .catch((error) => {\\n            // Ignore\\n          });\\n      } else if (text) {\\n        element.attributes.src = { type: \\\"string\\\", value: value + text };\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element];\\n  };\\n\\n  PdfParser.prototype.getLogger = function () {\\n    if (window.log) {\\n      return window.log.getLogger(name);\\n    }\\n    return console;\\n  };\\n\\n  exports[\\\"application/pdf\\\"] = PdfParser;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/plugins/ipfs/modules/parsers/svgparser.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/parsers/svgparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/parsers/svgparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe image parser parses an image into an embeddable HTML element\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const name = \\\"ipfs-svgparser\\\";\\n\\n  var SvgParser = function (type, text, options) {\\n    var self = this;\\n    var value = \\\"data:image/svg+xml,\\\";\\n    var element = {\\n      type: \\\"element\\\",\\n      tag: \\\"img\\\",\\n      attributes: {},\\n    };\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var tiddler = options.tiddler;\\n      var canonicalUri = tiddler.fields._canonical_uri;\\n      if (canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() != \\\"\\\") {\\n        $tw.ipfs\\n          .resolveUrl(false, true, canonicalUri)\\n          .then((data) => {\\n            var { normalizedUrl, resolvedUrl } = data;\\n            var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n            if (url !== null) {\\n              $tw.ipfs\\n                .loadToUtf8(url)\\n                .then((loaded) => {\\n                  element.attributes.src = { type: \\\"string\\\", value: value + encodeURIComponent(loaded.data) };\\n                  var parsedTiddler = $tw.utils.getChangedTiddler(tiddler);\\n                  $tw.rootWidget.refresh(parsedTiddler);\\n                })\\n                .catch((error) => {\\n                  self.getLogger().error(error);\\n                  $tw.utils.alert(name, error.message);\\n                });\\n            }\\n          })\\n          .catch((error) => {\\n            // Ignore\\n          });\\n      } else {\\n        element.attributes.src = { type: \\\"string\\\", value: value + encodeURIComponent(text) };\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element];\\n  };\\n\\n  SvgParser.prototype.getLogger = function () {\\n    if (window.log) {\\n      return window.log.getLogger(name);\\n    }\\n    return console;\\n  };\\n\\n  exports[\\\"image/svg+xml\\\"] = SvgParser;\\n  exports[\\\".svg\\\"] = SvgParser;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/plugins/ipfs/modules/parsers/videoparser.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/parsers/videoparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/parsers/videoparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nThe video parser parses a video tiddler into an embeddable HTML element\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const name = \\\"ipfs-videoparser\\\";\\n\\n  var VideoParser = function (type, text, options) {\\n    var self = this;\\n    var value = \\\"data:\\\" + type + \\\";base64,\\\";\\n    var element = {\\n      type: \\\"element\\\",\\n      tag: \\\"video\\\",\\n      attributes: {\\n        controls: { type: \\\"string\\\", value: \\\"controls\\\" },\\n        style: { type: \\\"string\\\", value: \\\"width: 100%; object-fit: contain\\\" },\\n      },\\n    };\\n    if ($tw.browser && options.tiddler !== undefined && options.tiddler !== null) {\\n      var tiddler = options.tiddler;\\n      var canonicalUri = tiddler.fields._canonical_uri;\\n      if (canonicalUri !== undefined && canonicalUri !== null && canonicalUri.trim() != \\\"\\\") {\\n        $tw.ipfs\\n          .resolveUrl(false, true, canonicalUri)\\n          .then((data) => {\\n            var { normalizedUrl, resolvedUrl } = data;\\n            var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n            if (url !== null) {\\n              $tw.ipfs\\n                .loadToBase64(url)\\n                .then((loaded) => {\\n                  element.attributes.src = { type: \\\"string\\\", value: value + loaded.data };\\n                  var parsedTiddler = $tw.utils.getChangedTiddler(tiddler);\\n                  $tw.rootWidget.refresh(parsedTiddler);\\n                })\\n                .catch((error) => {\\n                  self.getLogger().error(error);\\n                  $tw.utils.alert(name, error.message);\\n                });\\n            }\\n          })\\n          .catch((error) => {\\n            // Ignore\\n          });\\n      } else if (text) {\\n        element.attributes.src = { type: \\\"string\\\", value: value + text };\\n      }\\n    }\\n    // Return the parsed tree\\n    this.tree = [element];\\n  };\\n\\n  VideoParser.prototype.getLogger = function () {\\n    if (window.log) {\\n      return window.log.getLogger(name);\\n    }\\n    return console;\\n  };\\n\\n  exports[\\\"video/ogg\\\"] = VideoParser;\\n  exports[\\\"video/webm\\\"] = VideoParser;\\n  exports[\\\"video/mp4\\\"] = VideoParser;\\n  exports[\\\"video/quicktime\\\"] = VideoParser;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/plugins/ipfs/modules/parsers/wikiparser/wikiparser.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/parsers/wikiparser/wikiparser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/parsers/wikiparser/wikiparser.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: parser\\n\\nwikiparser\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2020, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const IpfsImport = require(\\\"$:/plugins/ipfs/ipfs-import.js\\\").IpfsImport;\\n\\n  var name = \\\"ipfs-wikiparser\\\";\\n\\n  var WikiParser = function (type, text, options) {\\n    var self = this;\\n    this.wiki = options.wiki;\\n    // Check for an externally linked tiddler\\n    if ($tw.browser && (text || \\\"\\\") === \\\"\\\" && options.tiddler !== undefined && options.tiddler !== null) {\\n      var canonicalUri = options.tiddler.fields._canonical_uri;\\n      var importUri = options.tiddler.fields._import_uri;\\n      var title = options.tiddler.fields.title;\\n      var url =\\n        importUri !== undefined && importUri !== null\\n          ? importUri\\n          : canonicalUri !== undefined && canonicalUri !== null\\n          ? canonicalUri\\n          : null;\\n      if (url !== null) {\\n        var ipfsImport = new IpfsImport();\\n        ipfsImport.loadRemoteTiddlers(importUri, canonicalUri, title).catch((error) => {\\n          self.getLogger().error(error);\\n          $tw.utils.alert(name, error.message);\\n        });\\n        text = $tw.language.getRawString(\\\"LazyLoadingWarning\\\");\\n      }\\n    }\\n    // Initialise the classes if we don't have them already\\n    if (!this.pragmaRuleClasses) {\\n      WikiParser.prototype.pragmaRuleClasses = $tw.modules.createClassesFromModules(\\n        \\\"wikirule\\\",\\n        \\\"pragma\\\",\\n        $tw.WikiRuleBase\\n      );\\n      this.setupRules(WikiParser.prototype.pragmaRuleClasses, \\\"$:/config/WikiParserRules/Pragmas/\\\");\\n    }\\n    if (!this.blockRuleClasses) {\\n      WikiParser.prototype.blockRuleClasses = $tw.modules.createClassesFromModules(\\n        \\\"wikirule\\\",\\n        \\\"block\\\",\\n        $tw.WikiRuleBase\\n      );\\n      this.setupRules(WikiParser.prototype.blockRuleClasses, \\\"$:/config/WikiParserRules/Block/\\\");\\n    }\\n    if (!this.inlineRuleClasses) {\\n      WikiParser.prototype.inlineRuleClasses = $tw.modules.createClassesFromModules(\\n        \\\"wikirule\\\",\\n        \\\"inline\\\",\\n        $tw.WikiRuleBase\\n      );\\n      this.setupRules(WikiParser.prototype.inlineRuleClasses, \\\"$:/config/WikiParserRules/Inline/\\\");\\n    }\\n    // Save the parse text\\n    this.type = type || \\\"text/vnd.tiddlywiki\\\";\\n    this.source = text || \\\"\\\";\\n    this.sourceLength = this.source.length;\\n    // Flag for ignoring whitespace\\n    this.configTrimWhiteSpace = false;\\n    // Set current parse position\\n    this.pos = 0;\\n    // Instantiate the pragma parse rules\\n    this.pragmaRules = this.instantiateRules(this.pragmaRuleClasses, \\\"pragma\\\", 0);\\n    // Instantiate the parser block and inline rules\\n    this.blockRules = this.instantiateRules(this.blockRuleClasses, \\\"block\\\", 0);\\n    this.inlineRules = this.instantiateRules(this.inlineRuleClasses, \\\"inline\\\", 0);\\n    // Parse any pragmas\\n    this.tree = [];\\n    var topBranch = this.parsePragmas();\\n    // Parse the text into inline runs or blocks\\n    if (options.parseAsInline) {\\n      topBranch.push.apply(topBranch, this.parseInlineRun());\\n    } else {\\n      topBranch.push.apply(topBranch, this.parseBlocks());\\n    }\\n    // Return the parsed tree\\n  };\\n\\n  WikiParser.prototype.getLogger = function () {\\n    if (window.log) {\\n      return window.log.getLogger(name);\\n    }\\n    return console;\\n  };\\n\\n  /*\\n   */\\n  WikiParser.prototype.setupRules = function (proto, configPrefix) {\\n    var self = this;\\n    if (!$tw.safemode) {\\n      $tw.utils.each(proto, function (object, name) {\\n        if (self.wiki.getTiddlerText(configPrefix + name, \\\"enable\\\") !== \\\"enable\\\") {\\n          delete proto[name];\\n        }\\n      });\\n    }\\n  };\\n\\n  /*\\nInstantiate an array of parse rules\\n*/\\n  WikiParser.prototype.instantiateRules = function (classes, type, startPos) {\\n    var rulesInfo = [],\\n      self = this;\\n    $tw.utils.each(classes, function (RuleClass) {\\n      // Instantiate the rule\\n      var rule = new RuleClass(self);\\n      rule.is = {};\\n      rule.is[type] = true;\\n      rule.init(self);\\n      var matchIndex = rule.findNextMatch(startPos);\\n      if (matchIndex !== undefined) {\\n        rulesInfo.push({\\n          rule: rule,\\n          matchIndex: matchIndex,\\n        });\\n      }\\n    });\\n    return rulesInfo;\\n  };\\n\\n  /*\\nSkip any whitespace at the current position. Options are:\\n  treatNewlinesAsNonWhitespace: true if newlines are NOT to be treated as whitespace\\n*/\\n  WikiParser.prototype.skipWhitespace = function (options) {\\n    options = options || {};\\n    var whitespaceRegExp = options.treatNewlinesAsNonWhitespace ? /([^\\\\S\\\\n]+)/gm : /(\\\\s+)/gm;\\n    whitespaceRegExp.lastIndex = this.pos;\\n    var whitespaceMatch = whitespaceRegExp.exec(this.source);\\n    if (whitespaceMatch && whitespaceMatch.index === this.pos) {\\n      this.pos = whitespaceRegExp.lastIndex;\\n    }\\n  };\\n\\n  /*\\nGet the next match out of an array of parse rule instances\\n*/\\n  WikiParser.prototype.findNextMatch = function (rules, startPos) {\\n    // Find the best matching rule by finding the closest match position\\n    var matchingRule,\\n      matchingRulePos = this.sourceLength;\\n    // Step through each rule\\n    for (var t = 0; t < rules.length; t++) {\\n      var ruleInfo = rules[t];\\n      // Ask the rule to get the next match if we've moved past the current one\\n      if (ruleInfo.matchIndex !== undefined && ruleInfo.matchIndex < startPos) {\\n        ruleInfo.matchIndex = ruleInfo.rule.findNextMatch(startPos);\\n      }\\n      // Adopt this match if it's closer than the current best match\\n      if (ruleInfo.matchIndex !== undefined && ruleInfo.matchIndex <= matchingRulePos) {\\n        matchingRule = ruleInfo;\\n        matchingRulePos = ruleInfo.matchIndex;\\n      }\\n    }\\n    return matchingRule;\\n  };\\n\\n  /*\\nParse any pragmas at the beginning of a block of parse text\\n*/\\n  WikiParser.prototype.parsePragmas = function () {\\n    var currentTreeBranch = this.tree;\\n    while (true) {\\n      // Skip whitespace\\n      this.skipWhitespace();\\n      // Check for the end of the text\\n      if (this.pos >= this.sourceLength) {\\n        break;\\n      }\\n      // Check if we've arrived at a pragma rule match\\n      var nextMatch = this.findNextMatch(this.pragmaRules, this.pos);\\n      // If not, just exit\\n      if (!nextMatch || nextMatch.matchIndex !== this.pos) {\\n        break;\\n      }\\n      // Process the pragma rule\\n      var subTree = nextMatch.rule.parse();\\n      if (subTree.length > 0) {\\n        // Quick hack; we only cope with a single parse tree node being returned, which is true at the moment\\n        currentTreeBranch.push.apply(currentTreeBranch, subTree);\\n        subTree[0].children = [];\\n        currentTreeBranch = subTree[0].children;\\n      }\\n    }\\n    return currentTreeBranch;\\n  };\\n\\n  /*\\nParse a block from the current position\\n  terminatorRegExpString: optional regular expression string that identifies the end of plain paragraphs. Must not include capturing parenthesis\\n*/\\n  WikiParser.prototype.parseBlock = function (terminatorRegExpString) {\\n    var terminatorRegExp = terminatorRegExpString\\n      ? new RegExp(\\\"(\\\" + terminatorRegExpString + \\\"|\\\\\\\\r?\\\\\\\\n\\\\\\\\r?\\\\\\\\n)\\\", \\\"mg\\\")\\n      : /(\\\\r?\\\\n\\\\r?\\\\n)/gm;\\n    this.skipWhitespace();\\n    if (this.pos >= this.sourceLength) {\\n      return [];\\n    }\\n    // Look for a block rule that applies at the current position\\n    var nextMatch = this.findNextMatch(this.blockRules, this.pos);\\n    if (nextMatch && nextMatch.matchIndex === this.pos) {\\n      return nextMatch.rule.parse();\\n    }\\n    // Treat it as a paragraph if we didn't find a block rule\\n    return [{ type: \\\"element\\\", tag: \\\"p\\\", children: this.parseInlineRun(terminatorRegExp) }];\\n  };\\n\\n  /*\\nParse a series of blocks of text until a terminating regexp is encountered or the end of the text\\n  terminatorRegExpString: terminating regular expression\\n*/\\n  WikiParser.prototype.parseBlocks = function (terminatorRegExpString) {\\n    if (terminatorRegExpString) {\\n      return this.parseBlocksTerminated(terminatorRegExpString);\\n    } else {\\n      return this.parseBlocksUnterminated();\\n    }\\n  };\\n\\n  /*\\nParse a block from the current position to the end of the text\\n*/\\n  WikiParser.prototype.parseBlocksUnterminated = function () {\\n    var tree = [];\\n    while (this.pos < this.sourceLength) {\\n      tree.push.apply(tree, this.parseBlock());\\n    }\\n    return tree;\\n  };\\n\\n  /*\\nParse blocks of text until a terminating regexp is encountered\\n*/\\n  WikiParser.prototype.parseBlocksTerminated = function (terminatorRegExpString) {\\n    var terminatorRegExp = new RegExp(\\\"(\\\" + terminatorRegExpString + \\\")\\\", \\\"mg\\\"),\\n      tree = [];\\n    // Skip any whitespace\\n    this.skipWhitespace();\\n    //  Check if we've got the end marker\\n    terminatorRegExp.lastIndex = this.pos;\\n    var match = terminatorRegExp.exec(this.source);\\n    // Parse the text into blocks\\n    while (this.pos < this.sourceLength && !(match && match.index === this.pos)) {\\n      var blocks = this.parseBlock(terminatorRegExpString);\\n      tree.push.apply(tree, blocks);\\n      // Skip any whitespace\\n      this.skipWhitespace();\\n      //  Check if we've got the end marker\\n      terminatorRegExp.lastIndex = this.pos;\\n      match = terminatorRegExp.exec(this.source);\\n    }\\n    if (match && match.index === this.pos) {\\n      this.pos = match.index + match[0].length;\\n    }\\n    return tree;\\n  };\\n\\n  /*\\nParse a run of text at the current position\\n  terminatorRegExp: a regexp at which to stop the run\\n  options: see below\\nOptions available:\\n  eatTerminator: move the parse position past any encountered terminator (default false)\\n*/\\n  WikiParser.prototype.parseInlineRun = function (terminatorRegExp, options) {\\n    if (terminatorRegExp) {\\n      return this.parseInlineRunTerminated(terminatorRegExp, options);\\n    } else {\\n      return this.parseInlineRunUnterminated(options);\\n    }\\n  };\\n\\n  WikiParser.prototype.parseInlineRunUnterminated = function (options) {\\n    var tree = [];\\n    // Find the next occurrence of an inline rule\\n    var nextMatch = this.findNextMatch(this.inlineRules, this.pos);\\n    // Loop around the matches until we've reached the end of the text\\n    while (this.pos < this.sourceLength && nextMatch) {\\n      // Process the text preceding the run rule\\n      if (nextMatch.matchIndex > this.pos) {\\n        this.pushTextWidget(tree, this.source.substring(this.pos, nextMatch.matchIndex));\\n        this.pos = nextMatch.matchIndex;\\n      }\\n      // Process the run rule\\n      tree.push.apply(tree, nextMatch.rule.parse());\\n      // Look for the next run rule\\n      nextMatch = this.findNextMatch(this.inlineRules, this.pos);\\n    }\\n    // Process the remaining text\\n    if (this.pos < this.sourceLength) {\\n      this.pushTextWidget(tree, this.source.substr(this.pos));\\n    }\\n    this.pos = this.sourceLength;\\n    return tree;\\n  };\\n\\n  WikiParser.prototype.parseInlineRunTerminated = function (terminatorRegExp, options) {\\n    options = options || {};\\n    var tree = [];\\n    // Find the next occurrence of the terminator\\n    terminatorRegExp.lastIndex = this.pos;\\n    var terminatorMatch = terminatorRegExp.exec(this.source);\\n    // Find the next occurrence of a inlinerule\\n    var inlineRuleMatch = this.findNextMatch(this.inlineRules, this.pos);\\n    // Loop around until we've reached the end of the text\\n    while (this.pos < this.sourceLength && (terminatorMatch || inlineRuleMatch)) {\\n      // Return if we've found the terminator, and it precedes any inline rule match\\n      if (terminatorMatch) {\\n        if (!inlineRuleMatch || inlineRuleMatch.matchIndex >= terminatorMatch.index) {\\n          if (terminatorMatch.index > this.pos) {\\n            this.pushTextWidget(tree, this.source.substring(this.pos, terminatorMatch.index));\\n          }\\n          this.pos = terminatorMatch.index;\\n          if (options.eatTerminator) {\\n            this.pos += terminatorMatch[0].length;\\n          }\\n          return tree;\\n        }\\n      }\\n      // Process any inline rule, along with the text preceding it\\n      if (inlineRuleMatch) {\\n        // Preceding text\\n        if (inlineRuleMatch.matchIndex > this.pos) {\\n          this.pushTextWidget(tree, this.source.substring(this.pos, inlineRuleMatch.matchIndex));\\n          this.pos = inlineRuleMatch.matchIndex;\\n        }\\n        // Process the inline rule\\n        tree.push.apply(tree, inlineRuleMatch.rule.parse());\\n        // Look for the next inline rule\\n        inlineRuleMatch = this.findNextMatch(this.inlineRules, this.pos);\\n        // Look for the next terminator match\\n        terminatorRegExp.lastIndex = this.pos;\\n        terminatorMatch = terminatorRegExp.exec(this.source);\\n      }\\n    }\\n    // Process the remaining text\\n    if (this.pos < this.sourceLength) {\\n      this.pushTextWidget(tree, this.source.substr(this.pos));\\n    }\\n    this.pos = this.sourceLength;\\n    return tree;\\n  };\\n\\n  /*\\nPush a text widget onto an array, respecting the configTrimWhiteSpace setting\\n*/\\n  WikiParser.prototype.pushTextWidget = function (array, text) {\\n    if (this.configTrimWhiteSpace) {\\n      text = $tw.utils.trim(text);\\n    }\\n    if (text) {\\n      array.push({ type: \\\"text\\\", text: text });\\n    }\\n  };\\n\\n  /*\\nParse zero or more class specifiers `.classname`\\n*/\\n  WikiParser.prototype.parseClasses = function () {\\n    var classRegExp = /\\\\.([^\\\\s\\\\.]+)/gm,\\n      classNames = [];\\n    classRegExp.lastIndex = this.pos;\\n    var match = classRegExp.exec(this.source);\\n    while (match && match.index === this.pos) {\\n      this.pos = match.index + match[0].length;\\n      classNames.push(match[1]);\\n      match = classRegExp.exec(this.source);\\n    }\\n    return classNames;\\n  };\\n\\n  /*\\nAmend the rules used by this instance of the parser\\n  type: `only` keeps just the named rules, `except` keeps all but the named rules\\n  names: array of rule names\\n*/\\n  WikiParser.prototype.amendRules = function (type, names) {\\n    names = names || [];\\n    // Define the filter function\\n    var keepFilter;\\n    if (type === \\\"only\\\") {\\n      keepFilter = function (name) {\\n        return names.indexOf(name) !== -1;\\n      };\\n    } else if (type === \\\"except\\\") {\\n      keepFilter = function (name) {\\n        return names.indexOf(name) === -1;\\n      };\\n    } else {\\n      return;\\n    }\\n    // Define a function to process each of our rule arrays\\n    var processRuleArray = function (ruleArray) {\\n      for (var t = ruleArray.length - 1; t >= 0; t--) {\\n        if (!keepFilter(ruleArray[t].rule.name)) {\\n          ruleArray.splice(t, 1);\\n        }\\n      }\\n    };\\n    // Process each rule array\\n    processRuleArray(this.pragmaRules);\\n    processRuleArray(this.blockRules);\\n    processRuleArray(this.inlineRules);\\n  };\\n\\n  exports[\\\"text/vnd.tiddlywiki\\\"] = WikiParser;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"parser\"\n        },\n        \"$:/core/modules/saver-handler.js\": {\n            \"title\": \"$:/core/modules/saver-handler.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/saver-handler.js\\ntype: application/javascript\\nmodule-type: global\\n\\nThe saver handler tracks changes to the store and handles saving the entire wiki via saver modules.\\n\\n\\\\*/\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  /*\\nInstantiate the saver handler with the following options:\\nwiki: wiki to be synced\\ndirtyTracking: true if dirty tracking should be performed\\n*/\\n  function SaverHandler(options) {\\n    var self = this;\\n    this.wiki = options.wiki;\\n    this.dirtyTracking = options.dirtyTracking;\\n    this.preloadDirty = options.preloadDirty || [];\\n    this.pendingAutoSave = false;\\n    // Make a logger\\n    this.logger = new $tw.utils.Logger(\\\"saver-handler\\\");\\n    // Initialise our savers\\n    if ($tw.browser) {\\n      this.initSavers();\\n    }\\n    // Only do dirty tracking if required\\n    if ($tw.browser && this.dirtyTracking) {\\n      // Compile the dirty tiddler filter\\n      this.filterFn = this.wiki.compileFilter(this.wiki.getTiddlerText(this.titleSyncFilter));\\n      // Count of changes that have not yet been saved\\n      var filteredChanges = self.filterFn.call(self.wiki, function (iterator) {\\n        $tw.utils.each(self.preloadDirty, function (title) {\\n          var tiddler = self.wiki.getTiddler(title);\\n          iterator(tiddler, title);\\n        });\\n      });\\n      this.numChanges = filteredChanges.length;\\n      // Listen out for changes to tiddlers\\n      this.wiki.addEventListener(\\\"change\\\", async function (changes) {\\n        // Filter the changes so that we only count changes to tiddlers that we care about\\n        var filteredChanges = self.filterFn.call(self.wiki, function (iterator) {\\n          $tw.utils.each(changes, function (change, title) {\\n            var tiddler = self.wiki.getTiddler(title);\\n            iterator(tiddler, title);\\n          });\\n        });\\n        // Adjust the number of changes\\n        self.numChanges += filteredChanges.length;\\n        self.updateDirtyStatus();\\n        // Do any autosave if one is pending and there's no more change events\\n        if (self.pendingAutoSave && self.wiki.getSizeOfTiddlerEventQueue() === 0) {\\n          // Check if we're dirty\\n          if (self.numChanges > 0) {\\n            await self.saveWiki({\\n              method: \\\"autosave\\\",\\n              downloadType: \\\"text/plain\\\",\\n            });\\n          }\\n          self.pendingAutoSave = false;\\n        }\\n      });\\n      // Listen for the autosave event\\n      $tw.rootWidget.addEventListener(\\\"tm-auto-save-wiki\\\", async function (event) {\\n        // Do the autosave unless there are outstanding tiddler change events\\n        if (self.wiki.getSizeOfTiddlerEventQueue() === 0) {\\n          // Check if we're dirty\\n          if (self.numChanges > 0) {\\n            await self.saveWiki({\\n              method: \\\"autosave\\\",\\n              downloadType: \\\"text/plain\\\",\\n            });\\n          }\\n        } else {\\n          // Otherwise put ourselves in the \\\"pending autosave\\\" state and wait for the change event before we do the autosave\\n          self.pendingAutoSave = true;\\n        }\\n      });\\n      // Set up our beforeunload handler\\n      $tw.addUnloadTask(function (event) {\\n        var confirmationMessage;\\n        if (self.isDirty()) {\\n          confirmationMessage = $tw.language.getString(\\\"UnsavedChangesWarning\\\");\\n          event.returnValue = confirmationMessage; // Gecko\\n        }\\n        return confirmationMessage;\\n      });\\n    }\\n    // Install the save action handlers\\n    if ($tw.browser) {\\n      $tw.rootWidget.addEventListener(\\\"tm-save-wiki\\\", async function (event) {\\n        await self.saveWiki({\\n          template: event.param,\\n          downloadType: \\\"text/plain\\\",\\n          variables: event.paramObject,\\n        });\\n      });\\n      $tw.rootWidget.addEventListener(\\\"tm-download-file\\\", async function (event) {\\n        await self.saveWiki({\\n          method: \\\"download\\\",\\n          template: event.param,\\n          downloadType: \\\"text/plain\\\",\\n          variables: event.paramObject,\\n        });\\n      });\\n    }\\n  }\\n\\n  SaverHandler.prototype.titleSyncFilter = \\\"$:/config/SaverFilter\\\";\\n  SaverHandler.prototype.titleAutoSave = \\\"$:/config/AutoSave\\\";\\n  SaverHandler.prototype.titleSavedNotification = \\\"$:/language/Notifications/Save/Done\\\";\\n\\n  /*\\nSelect the appropriate saver modules and set them up\\n*/\\n  SaverHandler.prototype.initSavers = function (moduleType) {\\n    moduleType = moduleType || \\\"saver\\\";\\n    // Instantiate the available savers\\n    this.savers = [];\\n    var self = this;\\n    $tw.modules.forEachModuleOfType(moduleType, function (title, module) {\\n      if (module.canSave(self)) {\\n        self.savers.push({ title: title, module: module.create(self.wiki) });\\n      }\\n    });\\n    // Sort savers\\n    this.sortSavers();\\n  };\\n\\n  /*\\n   * Sort the savers into priority order\\n   */\\n  SaverHandler.prototype.sortSavers = function () {\\n    this.savers.sort(function (a, b) {\\n      if (a.module.info.priority < b.module.info.priority) {\\n        return -1;\\n      } else {\\n        if (a.module.info.priority > b.module.info.priority) {\\n          return +1;\\n        } else {\\n          return 0;\\n        }\\n      }\\n    });\\n  };\\n\\n  /*\\nSave the wiki contents. Options are:\\nmethod: \\\"save\\\", \\\"autosave\\\" or \\\"download\\\"\\ntemplate: the tiddler containing the template to save\\ndownloadType: the content type for the saved file\\n*/\\n  SaverHandler.prototype.saveWiki = async function (options) {\\n    options = options || {};\\n    var self = this,\\n      method = options.method || \\\"save\\\";\\n    // Ignore autosave if disabled\\n    if (method === \\\"autosave\\\" && this.wiki.getTiddlerText(this.titleAutoSave, \\\"yes\\\") !== \\\"yes\\\") {\\n      return false;\\n    }\\n    var variables = options.variables || {},\\n      template = options.template || \\\"$:/core/save/all\\\",\\n      downloadType = options.downloadType || \\\"text/plain\\\",\\n      text = this.wiki.renderTiddler(downloadType, template, options),\\n      callback = function (err) {\\n        if (err) {\\n          alert($tw.language.getString(\\\"Error/WhileSaving\\\") + \\\":\\\\n\\\\n\\\" + err);\\n        } else {\\n          // Clear the task queue if we're saving (rather than downloading)\\n          if (method !== \\\"download\\\") {\\n            self.numChanges = 0;\\n            self.updateDirtyStatus();\\n          }\\n          $tw.notifier.display(self.titleSavedNotification);\\n          if (options.callback) {\\n            options.callback();\\n          }\\n        }\\n      };\\n    // Process preferred if any\\n    var ignorePreferred = null;\\n    var preferredSaver = $tw.wiki.getTiddler(\\\"$:/config/PreferredSaver\\\");\\n    if (preferredSaver !== null && preferredSaver !== undefined) {\\n      var title = preferredSaver.getFieldString(\\\"text\\\");\\n      if (title !== null && title !== undefined && title.trim() !== \\\"\\\") {\\n        ignorePreferred = title;\\n        // Process preferred saver\\n        if (await this.save(this.getSaver(title).module, method, variables, text, callback)) {\\n          return true;\\n        }\\n      }\\n    }\\n\\n    // Call the highest priority saver that supports this method\\n    for (var t = this.savers.length - 1; t >= 0; t--) {\\n      // Ignore failed preferred if any\\n      if (this.savers[t].title === ignorePreferred) {\\n        continue;\\n      }\\n      // Process\\n      if (await this.save(this.savers[t].module, method, variables, text, callback)) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  };\\n\\n  SaverHandler.prototype.getSaver = function (title) {\\n    // Locate saver\\n    var saver = null;\\n    for (var i = 0; i < this.savers.length; i++) {\\n      var current = this.savers[i];\\n      if (current.title === title) {\\n        saver = current;\\n        break;\\n      }\\n    }\\n    return saver;\\n  };\\n\\n  SaverHandler.prototype.save = async function (saver, method, variables, text, callback) {\\n    if (saver.info.capabilities.indexOf(method) !== -1) {\\n      var saved = await saver.save(text, method, callback, {\\n        variables: { filename: variables.filename },\\n      });\\n      if (saved) {\\n        this.logger.log(\\\"Saved wiki with method\\\", method, \\\"through saver\\\", saver.info.name);\\n        return true;\\n      }\\n    }\\n    return false;\\n  };\\n\\n  /*\\nChecks whether the wiki is dirty (ie the window shouldn't be closed)\\n*/\\n  SaverHandler.prototype.isDirty = function () {\\n    return this.numChanges > 0;\\n  };\\n\\n  /*\\nUpdate the document body with the class \\\"tc-dirty\\\" if the wiki has unsaved/unsynced changes\\n*/\\n  SaverHandler.prototype.updateDirtyStatus = function () {\\n    if ($tw.browser) {\\n      $tw.utils.toggleClass(document.body, \\\"tc-dirty\\\", this.isDirty());\\n    }\\n  };\\n\\n  exports.SaverHandler = SaverHandler;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"global\"\n        },\n        \"$:/core/ui/ControlPanel/Saving/General\": {\n            \"title\": \"$:/core/ui/ControlPanel/Saving/General\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/tags/ControlPanel/Saving\",\n            \"caption\": \"{{$:/language/ControlPanel/Saving/General/Caption}}\",\n            \"list-before\": \"\",\n            \"text\": \"\\\\define lingo-base() $:/language/ControlPanel/Settings/\\n\\n\\\\define ipfs-saver()\\n<$text text=<<ipfs-info-saver \\\"$(currentTiddler)$\\\">>/>\\n\\\\end\\n\\n{{$:/language/ControlPanel/Saving/General/Hint}}\\n\\n!! <$link to=\\\"$:/config/PreferredSaver\\\"><<lingo PreferredSaver/Caption>></$link>\\n\\n<$select tiddler=\\\"$:/config/PreferredSaver\\\">\\n<$list filter=\\\"[savers[]]\\\">\\n<option value=<<currentTiddler>>><<ipfs-saver>></option>\\n</$list>\\n</$select>\\n\\n!! <$link to=\\\"$:/config/AutoSave\\\"><<lingo AutoSave/Caption>></$link>\\n\\n<<lingo AutoSave/Hint>>\\n\\n<$radio tiddler=\\\"$:/config/AutoSave\\\" value=\\\"yes\\\"> <<lingo AutoSave/Enabled/Description>> </$radio>\\n\\n<$radio tiddler=\\\"$:/config/AutoSave\\\" value=\\\"no\\\"> <<lingo AutoSave/Disabled/Description>> </$radio>\\n\"\n        },\n        \"$:/core/ui/ControlPanel/Toolbars/ItemTemplate\": {\n            \"title\": \"$:/core/ui/ControlPanel/Toolbars/ItemTemplate\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"text\": \"\\\\define config-title()\\n$(config-base)$$(currentTiddler)$\\n\\\\end\\n\\n<$draggable tiddler=<<currentTiddler>>>\\n<$checkbox tiddler=<<config-title>> field=\\\"text\\\" checked=\\\"show\\\" unchecked=\\\"hide\\\" default=\\\"show\\\"/> <span class=\\\"tc-icon-wrapper tc-icon-ipfs-wrapper\\\"> <$transclude field=\\\"caption\\\"/> <i class=\\\"tc-muted\\\">-- <$transclude field=\\\"description\\\"/></i></span>\\n</$draggable>\\n\"\n        },\n        \"$:/core/ui/EditTemplate/body\": {\n            \"title\": \"$:/core/ui/EditTemplate/body\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/tags/EditTemplate\",\n            \"text\": \"\\\\define lingo-base() $:/language/EditTemplate/Body/\\n\\\\define config-visibility-title()\\n$:/config/EditorToolbarButtons/Visibility/$(currentTiddler)$\\n\\\\end\\n\\n<$list filter=\\\"[all[current]has[_canonical_uri]]\\\">\\n  <div class=\\\"tc-message-box\\\">\\n    <<lingo External/Hint>>\\n    <p><$ipfslink caption={{!!_canonical_uri}} value={{!!_canonical_uri}} tiddler=<<currentTiddler>>/></p>\\n  </div>\\n</$list>\\n\\n<$list filter=\\\"[all[current]!has[_canonical_uri]]\\\">\\n  <$reveal state=\\\"$:/state/showeditpreview\\\" type=\\\"match\\\" text=\\\"yes\\\">\\n    <div class=\\\"tc-tiddler-preview\\\">\\n      <$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/editor\\\" mode=\\\"inline\\\"/>\\n      <div class=\\\"tc-tiddler-preview-preview\\\">\\n        <$transclude tiddler={{$:/state/editpreviewtype}} mode=\\\"inline\\\">\\n          <$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/preview/output\\\" mode=\\\"inline\\\"/>\\n        </$transclude>\\n      </div>\\n    </div>\\n  </$reveal>\\n  <$reveal state=\\\"$:/state/showeditpreview\\\" type=\\\"nomatch\\\" text=\\\"yes\\\">\\n    <$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/editor\\\" mode=\\\"inline\\\"/>\\n  </$reveal>\\n</$list>\"\n        },\n        \"$:/core/ui/EditTemplate/fields\": {\n            \"title\": \"$:/core/ui/EditTemplate/fields\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/tags/EditTemplate\",\n            \"text\": \"\\\\define lingo-base() $:/language/EditTemplate/\\n\\\\define config-title()\\n$:/config/EditTemplateFields/Visibility/$(currentField)$\\n\\\\end\\n\\n\\\\define config-filter()\\n[[hide]] -[title{$(config-title)$}]\\n\\\\end\\n\\n\\\\define current-tiddler-new-field-selector()\\n[data-tiddler-title=\\\"$(currentTiddlerCSSescaped)$\\\"] .tc-edit-field-add-name input\\n\\\\end\\n\\n\\\\define new-field-actions()\\n<$action-sendmessage $message=\\\"tm-add-field\\\" $name={{{ [<newFieldNameTiddler>get[text]] }}} $value={{{ [<newFieldValueTiddler>get[text]] }}}/>\\n<$action-deletetiddler $tiddler=<<newFieldNameTiddler>>/>\\n<$action-deletetiddler $tiddler=<<newFieldValueTiddler>>/>\\n<$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=<<current-tiddler-new-field-selector>>/>\\n\\\\end\\n\\n\\\\define new-field()\\n<$vars name={{{ [<newFieldNameTiddler>get[text]] }}}>\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" default=<<name>>>\\n<$button tooltip=<<lingo Fields/Add/Button/Hint>>>\\n<$action-sendmessage $message=\\\"tm-add-field\\\"\\n$name=<<name>>\\n$value={{{ [<newFieldValueTiddler>get[text]] }}}/>\\n<$action-deletetiddler $tiddler=<<newFieldNameTiddler>>/>\\n<$action-deletetiddler $tiddler=<<newFieldValueTiddler>>/>\\n<<lingo Fields/Add/Button>>\\n</$button>\\n</$reveal>\\n<$reveal type=\\\"match\\\" text=\\\"\\\" default=<<name>>>\\n<$button>\\n<<lingo Fields/Add/Button>>\\n</$button>\\n</$reveal>\\n</$vars>\\n\\\\end\\n\\\\whitespace trim\\n\\n<div class=\\\"tc-edit-fields\\\">\\n<table class=\\\"tc-edit-fields\\\">\\n<tbody>\\n<$list filter=\\\"[all[current]fields[]] +[sort[title]]\\\" variable=\\\"currentField\\\" storyview=\\\"pop\\\">\\n<$list filter=<<config-filter>> variable=\\\"temp\\\">\\n<tr class=\\\"tc-edit-field\\\">\\n<td class=\\\"tc-edit-field-name\\\">\\n<$ipfslink caption=<<currentField>> field=<<currentField>> tiddler=<<currentTiddler>>/>\\n</td>\\n<td class=\\\"tc-edit-field-value\\\">\\n<$edit-text tiddler=<<currentTiddler>> field=<<currentField>> placeholder={{$:/language/EditTemplate/Fields/Add/Value/Placeholder}} tabindex={{$:/config/EditTabIndex}}/>\\n</td>\\n<td class=\\\"tc-edit-field-remove\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip={{$:/language/EditTemplate/Field/Remove/Hint}} aria-label={{$:/language/EditTemplate/Field/Remove/Caption}}>\\n<$action-deletefield $field=<<currentField>>/>\\n{{$:/core/images/delete-button}}\\n</$button>\\n</td>\\n</tr>\\n</$list>\\n</$list>\\n</tbody>\\n</table>\\n</div>\\n\\n<$fieldmangler>\\n<div class=\\\"tc-edit-field-add\\\">\\n<em class=\\\"tc-edit\\\">\\n<<lingo Fields/Add/Prompt>>&nbsp;&nbsp;\\n</em>\\n<span class=\\\"tc-edit-field-add-name\\\">\\n<$edit-text tiddler=<<newFieldNameTiddler>> tag=\\\"input\\\" default=\\\"\\\" placeholder={{$:/language/EditTemplate/Fields/Add/Name/Placeholder}} focusPopup=<<qualify \\\"$:/state/popup/field-dropdown\\\">> class=\\\"tc-edit-texteditor tc-popup-handle\\\" tabindex={{$:/config/EditTabIndex}} focus={{{ [{$:/config/AutoFocus}match[fields]then[true]] ~[[false]] }}}/>\\n</span>&nbsp;\\n<$button popup=<<qualify \\\"$:/state/popup/field-dropdown\\\">> class=\\\"tc-btn-invisible tc-btn-dropdown\\\" tooltip={{$:/language/EditTemplate/Field/Dropdown/Hint}} aria-label={{$:/language/EditTemplate/Field/Dropdown/Caption}}>{{$:/core/images/down-arrow}}</$button>&nbsp;\\n<$reveal state=<<qualify \\\"$:/state/popup/field-dropdown\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\">\\n<div class=\\\"tc-block-dropdown tc-edit-type-dropdown\\\">\\n<$set name=\\\"tv-show-missing-links\\\" value=\\\"yes\\\">\\n<$linkcatcher to=<<newFieldNameTiddler>>>\\n<div class=\\\"tc-dropdown-item\\\">\\n<<lingo Fields/Add/Dropdown/User>>\\n</div>\\n<$set name=\\\"newFieldName\\\" value={{{ [<newFieldNameTiddler>get[text]] }}}>\\n<$list filter=\\\"[!is[shadow]!is[system]fields[]search:title<newFieldName>sort[]] -created -creator -draft.of -draft.title -modified -modifier -tags -text -title -type\\\"  variable=\\\"currentField\\\">\\n<$link to=<<currentField>>>\\n<$text text=<<currentField>>/>\\n</$link>\\n</$list>\\n<div class=\\\"tc-dropdown-item\\\">\\n<<lingo Fields/Add/Dropdown/System>>\\n</div>\\n<$list filter=\\\"[fields[]search:title<newFieldName>sort[]] -[!is[shadow]!is[system]fields[]]\\\" variable=\\\"currentField\\\">\\n<$link to=<<currentField>>>\\n<$text text=<<currentField>>/>\\n</$link>\\n</$list>\\n</$set>\\n</$linkcatcher>\\n</$set>\\n</div>\\n</$reveal>\\n<span class=\\\"tc-edit-field-add-value\\\">\\n<$set name=\\\"currentTiddlerCSSescaped\\\" value={{{ [<currentTiddler>escapecss[]] }}}>\\n<$keyboard key=\\\"((add-field))\\\" actions=<<new-field-actions>>>\\n<$edit-text tiddler=<<newFieldValueTiddler>> tag=\\\"input\\\" default=\\\"\\\" placeholder={{$:/language/EditTemplate/Fields/Add/Value/Placeholder}} class=\\\"tc-edit-texteditor\\\" tabindex={{$:/config/EditTabIndex}}/>\\n</$keyboard>\\n</$set>\\n</span>&nbsp;\\n<span class=\\\"tc-edit-field-add-button\\\">\\n<$macrocall $name=\\\"new-field\\\"/>\\n</span>\\n</div>\\n</$fieldmangler>\"\n        },\n        \"$:/core/ui/EditTemplate\": {\n            \"title\": \"$:/core/ui/EditTemplate\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"text\": \"\\\\define save-tiddler-actions()\\n<$action-sendmessage $message=\\\"tm-add-tag\\\" $param={{{ [<newTagNameTiddler>get[text]] }}}/>\\n<$action-deletetiddler $tiddler=<<newTagNameTiddler>>/>\\n<$action-sendmessage $message=\\\"tm-add-field\\\" $name={{{ [<newFieldNameTiddler>get[text]] }}} $value={{{ [<newFieldValueTiddler>get[text]] }}}/>\\n<$action-deletetiddler $tiddler=<<newFieldNameTiddler>>/>\\n<$action-deletetiddler $tiddler=<<newFieldValueTiddler>>/>\\n<$action-sendmessage $message=\\\"tm-save-tiddler\\\"/>\\n\\\\end\\n<div data-tiddler-title=<<currentTiddler>> data-tags={{!!tags}} class={{{ tc-tiddler-frame tc-tiddler-edit-frame [<currentTiddler>is[tiddler]then[tc-tiddler-exists]] [<currentTiddler>is[missing]!is[shadow]then[tc-tiddler-missing]] [<currentTiddler>is[shadow]then[tc-tiddler-exists tc-tiddler-shadow]] [<currentTiddler>is[system]then[tc-tiddler-system]] [{!!class}] [<currentTiddler>tags[]encodeuricomponent[]addprefix[tc-tagged-]] +[join[ ]] }}}>\\n<$fieldmangler>\\n<$vars storyTiddler=<<currentTiddler>> newTagNameTiddler=<<qualify \\\"$:/temp/NewTagName\\\">> newFieldNameTiddler=<<qualify \\\"$:/temp/NewFieldName\\\">> newFieldValueTiddler=<<qualify \\\"$:/temp/NewFieldValue\\\">>>\\n<$keyboard key=\\\"((cancel-edit-tiddler))\\\" message=\\\"tm-cancel-tiddler\\\">\\n<$keyboard key=\\\"((save-tiddler))\\\" actions=<<save-tiddler-actions>>>\\n<$list filter=\\\"[all[shadows+tiddlers]list[$:/tags/EditTemplate]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n<$set name=\\\"tv-config-toolbar-class\\\" filter=\\\"[<tv-config-toolbar-class>] [<listItem>encodeuricomponent[]addprefix[tc-btn-]]\\\">\\n<$transclude tiddler=<<listItem>>/>\\n</$set>\\n</$list>\\n</$keyboard>\\n</$keyboard>\\n</$vars>\\n</$fieldmangler>\\n</div>\"\n        },\n        \"$:/core/ui/SideBar/Tools\": {\n            \"title\": \"$:/core/ui/SideBar/Tools\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/SideBar\",\n            \"caption\": \"{{$:/language/SideBar/Tools/Caption}}\",\n            \"text\": \"\\\\define lingo-base() $:/language/ControlPanel/\\n\\\\define config-title()\\n$:/config/PageControlButtons/Visibility/$(listItem)$\\n\\\\end\\n\\n<<lingo Basics/Version/Prompt>> <b><<version>></b>, <<lingo Ipfs/Version/Prompt>> <b><<ipfs-plugin-version>></b>\\n\\n<$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n<$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n<$set name=\\\"tv-config-toolbar-class\\\" value=\\\"\\\">\\n\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/PageControls]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\n<div style=\\\"position:relative;\\\" class={{{ [<listItem>encodeuricomponent[]addprefix[tc-btn-]] }}}>\\n\\n<$checkbox tiddler=<<config-title>> field=\\\"text\\\" checked=\\\"show\\\" unchecked=\\\"hide\\\" default=\\\"show\\\"/> <$transclude tiddler=<<listItem>>/> <i class=\\\"tc-muted\\\"><$transclude tiddler=<<listItem>> field=\\\"description\\\"/></i>\\n\\n</div>\\n\\n</$list>\\n\\n</$set>\\n\\n</$set>\\n\\n</$set>\"\n        },\n        \"$:/plugins/ipfs/modules/widgets/image.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/widgets/image.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/widgets/image.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nThe image widget displays an image referenced with an external URI or with a local tiddler title.\\n\\n```\\n<$image src=\\\"TiddlerTitle\\\" width=\\\"320\\\" height=\\\"400\\\" class=\\\"classnames\\\">\\n```\\n\\nThe image source can be the title of an existing tiddler or the URL of an external image.\\n\\nExternal images always generate an HTML `<img>` tag.\\n\\nTiddlers that have a _canonical_uri field generate an HTML `<img>` tag with the src attribute containing the URI.\\n\\nTiddlers that contain image data generate an HTML `<img>` tag with the src attribute containing a base64 representation of the image.\\n\\nTiddlers that contain wikitext could be rendered to a DIV of the usual size of a tiddler, and then transformed to the size requested.\\n\\nThe width and height attributes are interpreted as a number of pixels, and do not need to include the \\\"px\\\" suffix.\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  var Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\n  var name = \\\"ipfs-image\\\";\\n\\n  var ImageWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options);\\n  };\\n\\n  /*\\nInherit from the base widget class\\n*/\\n  ImageWidget.prototype = new Widget();\\n\\n  ImageWidget.prototype.getLogger = function () {\\n    if (window.log) {\\n      return window.log.getLogger(name);\\n    }\\n    return console;\\n  };\\n\\n  /*\\nRender this widget into the DOM\\n*/\\n  ImageWidget.prototype.render = function (parent, nextSibling) {\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n    // Create element\\n    // Determine what type of image it is\\n    var tiddler = this.wiki.getTiddler(this.imageSource);\\n    // Create default element\\n    var domNode = this.document.createElement(\\\"img\\\");\\n    if (!tiddler) {\\n      // The source isn't the title of a tiddler, so we'll assume it's a URL\\n      domNode.setAttribute(\\n        \\\"src\\\",\\n        this.getVariable(\\\"tv-get-export-image-link\\\", {\\n          params: [{ name: \\\"src\\\", value: this.imageSource }],\\n          defaultValue: this.imageSource,\\n        })\\n      );\\n    } else {\\n      // Check if it is an image tiddler\\n      if (this.wiki.isImageTiddler(this.imageSource)) {\\n        var type = tiddler.fields.type;\\n        var text = tiddler.fields.text;\\n        var _canonical_uri = tiddler.fields._canonical_uri;\\n        var self = this;\\n        // If the tiddler has body text then it doesn't need to be lazily loaded\\n        if (text) {\\n          // Render the appropriate element for the image type\\n          switch (type) {\\n            case \\\"application/pdf\\\":\\n              domNode = this.document.createElement(\\\"embed\\\");\\n              domNode.setAttribute(\\\"src\\\", \\\"data:application/pdf;base64,\\\" + text);\\n              break;\\n            case \\\"image/svg+xml\\\":\\n              domNode.setAttribute(\\\"src\\\", \\\"data:image/svg+xml,\\\" + encodeURIComponent(text));\\n              break;\\n            default:\\n              domNode.setAttribute(\\\"src\\\", \\\"data:\\\" + type + \\\";base64,\\\" + text);\\n              break;\\n          }\\n        } else if (_canonical_uri) {\\n          $tw.ipfs\\n            .resolveUrl(false, true, _canonical_uri)\\n            .then((data) => {\\n              var { normalizedUrl, resolvedUrl } = data;\\n              var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n              if (url !== null) {\\n                switch (type) {\\n                  case \\\"application/pdf\\\":\\n                    domNode = this.document.createElement(\\\"embed\\\");\\n                    $tw.ipfs\\n                      .loadToBase64(url)\\n                      .then((loaded) => {\\n                        if (\\n                          loaded !== undefined &&\\n                          loaded !== null &&\\n                          loaded.data !== undefined &&\\n                          loaded.data !== null\\n                        ) {\\n                          domNode.setAttribute(\\\"src\\\", \\\"data:application/pdf;base64,\\\" + loaded.data);\\n                        }\\n                      })\\n                      .catch((error) => {\\n                        self.getLogger().error(error);\\n                        $tw.utils.alert(name, error.message);\\n                      });\\n                    break;\\n                  case \\\"image/svg+xml\\\":\\n                    $tw.ipfs\\n                      .loadToUtf8(url)\\n                      .then((loaded) => {\\n                        if (\\n                          loaded !== undefined &&\\n                          loaded !== null &&\\n                          loaded.data !== undefined &&\\n                          loaded.data !== null\\n                        ) {\\n                          domNode.setAttribute(\\\"src\\\", \\\"data:image/svg+xml,\\\" + encodeURIComponent(loaded.data));\\n                        }\\n                      })\\n                      .catch((error) => {\\n                        self.getLogger().error(error);\\n                        $tw.utils.alert(name, error.message);\\n                      });\\n                    break;\\n                  default:\\n                    $tw.ipfs\\n                      .loadToBase64(url)\\n                      .then((loaded) => {\\n                        if (\\n                          loaded !== undefined &&\\n                          loaded !== null &&\\n                          loaded.data !== undefined &&\\n                          loaded.data !== null\\n                        ) {\\n                          domNode.setAttribute(\\\"src\\\", \\\"data:\\\" + type + \\\";base64,\\\" + loaded.data);\\n                        }\\n                      })\\n                      .catch((error) => {\\n                        self.getLogger().error(error);\\n                        $tw.utils.alert(name, error.message);\\n                      });\\n                    break;\\n                }\\n              }\\n            })\\n            .catch((error) => {\\n              // Ignore\\n            });\\n        } else {\\n          // Just trigger loading of the tiddler\\n          this.wiki.getTiddlerText(this.imageSource);\\n          domNode.setAttribute(\\\"src\\\", \\\"\\\");\\n        }\\n      }\\n    }\\n    // Assign the attributes\\n    if (this.imageClass) {\\n      domNode.setAttribute(\\\"class\\\", this.imageClass);\\n    }\\n    if (this.imageWidth) {\\n      domNode.setAttribute(\\\"width\\\", this.imageWidth);\\n    }\\n    if (this.imageHeight) {\\n      domNode.setAttribute(\\\"height\\\", this.imageHeight);\\n    }\\n    if (this.imageTooltip) {\\n      domNode.setAttribute(\\\"title\\\", this.imageTooltip);\\n    }\\n    if (this.imageAlt) {\\n      domNode.setAttribute(\\\"alt\\\", this.imageAlt);\\n    }\\n    // Insert element\\n    parent.insertBefore(domNode, nextSibling);\\n    this.domNodes.push(domNode);\\n  };\\n\\n  /*\\nCompute the internal state of the widget\\n*/\\n  ImageWidget.prototype.execute = function () {\\n    // Get our parameters\\n    this.imageSource = this.getAttribute(\\\"source\\\");\\n    this.imageWidth = this.getAttribute(\\\"width\\\");\\n    this.imageHeight = this.getAttribute(\\\"height\\\");\\n    this.imageClass = this.getAttribute(\\\"class\\\");\\n    this.imageTooltip = this.getAttribute(\\\"tooltip\\\");\\n    this.imageAlt = this.getAttribute(\\\"alt\\\");\\n  };\\n\\n  /*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\n  ImageWidget.prototype.refresh = function (changedTiddlers) {\\n    var changedAttributes = this.computeAttributes();\\n    if (\\n      changedAttributes.source ||\\n      changedAttributes.width ||\\n      changedAttributes.height ||\\n      changedAttributes[\\\"class\\\"] ||\\n      changedAttributes.tooltip ||\\n      changedTiddlers[this.imageSource]\\n    ) {\\n      this.refreshSelf();\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n\\n  exports.image = ImageWidget;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/encryption\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/encryption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"show\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/home\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/home\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"show\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/pin\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/pin\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/unpin\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/unpin\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/console/mobile\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipfs/console/mobile\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"show\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/more-page-actions\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/more-page-actions\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"show\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ens/publish\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ens/publish\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipns/publish\": {\n            \"title\": \"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/ipns/publish\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export/content\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export/content\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export/attachment\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/export/attachment\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/refresh\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/refresh\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/tiddler/pin\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/tiddler/pin\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/tiddler/unpin\": {\n            \"title\": \"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/ipfs/tiddler/unpin\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"hide\"\n        },\n        \"$:/plugins/ipfs/ipfs-wiki.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-wiki.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-wiki.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: wikimethod\\n\\nwikimethod\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function() {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  /*\\n   * Parse a block of text of a specified MIME type\\n   *  type: content type of text to be parsed\\n   *  text: text\\n   *  options: see below\\n   * Options include:\\n   *  parseAsInline: if true, the text of the tiddler will be parsed as an inline run\\n   *  _canonical_uri: optional string of the canonical URI of this content\\n   */\\n  exports.parseText = function(type, text, options) {\\n    var text = text || \\\"\\\";\\n    var options = options || {};\\n    // Select a parser\\n    var Parser = $tw.Wiki.parsers[type];\\n    if (!Parser && $tw.utils.getFileExtensionInfo(type)) {\\n      Parser = $tw.Wiki.parsers[$tw.utils.getFileExtensionInfo(type).type];\\n    }\\n    if (!Parser) {\\n      Parser = $tw.Wiki.parsers[options.defaultType || \\\"text/vnd.tiddlywiki\\\"];\\n    }\\n    if (!Parser) {\\n      return null;\\n    }\\n    // Return the parser instance\\n    return new Parser(type, text, {\\n      parseAsInline: options.parseAsInline,\\n      wiki: this,\\n      _canonical_uri: options._canonical_uri,\\n      tiddler: options.tiddler\\n    });\\n  };\\n\\n  /*\\n   * Parse a tiddler according to its MIME type\\n   */\\n  exports.parseTiddler = function(title, options) {\\n    options = $tw.utils.extend({}, options);\\n    var cacheType = options.parseAsInline ? \\\"inlineParseTree\\\" : \\\"blockParseTree\\\",\\n      tiddler = this.getTiddler(title),\\n      self = this;\\n    return tiddler\\n      ? this.getCacheForTiddler(title, cacheType, function() {\\n          if (tiddler.hasField(\\\"_canonical_uri\\\")) {\\n            options._canonical_uri = tiddler.fields._canonical_uri;\\n          }\\n          options.tiddler = tiddler;\\n          return self.parseText(tiddler.fields.type, tiddler.fields.text, options);\\n        })\\n      : null;\\n  };\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"wikimethod\"\n        },\n        \"$:/plugins/ipfs/ens-action.js\": {\n            \"title\": \"$:/plugins/ipfs/ens-action.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ens-action.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nENS Action\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const fileProtocol = \\\"file:\\\";\\n  const ipnsKeyword = \\\"ipns\\\";\\n\\n  const name = \\\"ens-action\\\";\\n\\n  var EnsAction = function () {\\n    this.once = false;\\n  };\\n\\n  EnsAction.prototype.getLogger = function () {\\n    return window.log.getLogger(name);\\n  };\\n\\n  EnsAction.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return;\\n    }\\n    const self = this;\\n    $tw.rootWidget.addEventListener(\\\"tm-ens-manager-open\\\", function (event) {\\n      return self.handleOpenEnsManager(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ens-resolve-and-open\\\", async function (event) {\\n      return await self.handleResolveEnsAndOpen(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ens-publish\\\", async function (event) {\\n      return await self.handlePublishToEns(event);\\n    });\\n    // Init once\\n    this.once = true;\\n  };\\n\\n  EnsAction.prototype.handleOpenEnsManager = function (event) {\\n    // Retrieve ENS domain\\n    const ensDomain = $tw.utils.getIpfsEnsDomain();\\n    // Check\\n    if (ensDomain == null) {\\n      window.open(\\\"https://app.ens.domains\\\", \\\"_blank\\\", \\\"noopener,noreferrer\\\");\\n    } else {\\n      window.open(\\\"https://app.ens.domains/name/\\\" + ensDomain, \\\"_blank\\\", \\\"noopener,noreferrer\\\");\\n    }\\n    return true;\\n  };\\n\\n  EnsAction.prototype.handleResolveEnsAndOpen = async function (event) {\\n    const ensDomain = $tw.utils.getIpfsEnsDomain();\\n    if (ensDomain == null) {\\n      $tw.utils.alert(name, \\\"Undefined ENS domain...\\\");\\n      return false;\\n    }\\n    try {\\n      this.getLogger().info(\\\"ENS domain: \\\" + ensDomain);\\n      const { resolvedUrl } = await $tw.ipfs.resolveEns(ensDomain);\\n      if (resolvedUrl !== null) {\\n        window.open(resolvedUrl.href, \\\"_blank\\\", \\\"noopener,noreferrer\\\");\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    return true;\\n  };\\n\\n  EnsAction.prototype.handlePublishToEns = async function (event) {\\n    const self = this;\\n    const wiki = $tw.ipfs.getDocumentUrl();\\n    if (wiki.protocol === fileProtocol) {\\n      $tw.utils.alert(name, \\\"Undefined IPFS identifier...\\\");\\n      return false;\\n    }\\n    if (wiki.pathname === \\\"/\\\") {\\n      $tw.utils.alert(name, \\\"Unknown IPFS identifier...\\\");\\n      return false;\\n    }\\n    var cid = null;\\n    var ensCid = null;\\n    var ipnsKey = null;\\n    try {\\n      var { cid, ipnsKey } = await $tw.ipfs.resolveUrl(false, false, wiki);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    const ensDomain = $tw.utils.getIpfsEnsDomain();\\n    if (ensDomain == null) {\\n      $tw.utils.alert(name, \\\"Undefined ENS domain...\\\");\\n      return false;\\n    }\\n    if (cid == null && ipnsKey == null) {\\n      $tw.utils.alert(name, \\\"Nothing to publish to ENS...\\\");\\n      return false;\\n    }\\n    try {\\n      var { cid: ensCid } = await $tw.ipfs.resolveUrl(false, true, ensDomain);\\n      if (cid !== null && ensCid !== null && cid === ensCid) {\\n        $tw.utils.alert(name, \\\"The current resolved ENS domain content is up to date...\\\");\\n        return false;\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    if (cid !== null) {\\n      $tw.ipfs\\n        .requestToUnpin(ensCid)\\n        .then((data) => {\\n          $tw.utils.alert(name, \\\"Publishing to ENS: \\\" + ensDomain);\\n          $tw.ipfs\\n            .setEns(ensDomain, cid)\\n            .then((data) => {\\n              $tw.utils.alert(name, \\\"Successfully published to ENS...\\\");\\n            })\\n            .catch((error) => {\\n              self.getLogger().error(error);\\n              $tw.utils.alert(name, error.message);\\n            });\\n        })\\n        .catch((error) => {\\n          self.getLogger().error(error);\\n          $tw.utils.alert(name, error.message);\\n        });\\n    } else if (ipnsKey !== null) {\\n      $tw.ipfs\\n        .resolveUrl(true, false, wiki)\\n        .then((data) => {\\n          const { cid: ipnsCid } = data;\\n          $tw.ipfs\\n            .requestToUnpin(ensCid)\\n            .then((data) => {\\n              $tw.utils.alert(name, \\\"Publishing to ENS: \\\" + ensDomain);\\n              $tw.ipfs\\n                .setEns(ensDomain, ipnsCid)\\n                .then((data) => {\\n                  $tw.utils.alert(name, \\\"Successfully Published to ENS...\\\");\\n                })\\n                .catch((error) => {\\n                  self.getLogger().error(error);\\n                  $tw.utils.alert(name, error.message);\\n                });\\n            })\\n            .catch((error) => {\\n              self.getLogger().error(error);\\n              $tw.utils.alert(name, error.message);\\n            });\\n        })\\n        .catch((error) => {\\n          self.getLogger().error(error);\\n          $tw.utils.alert(name, error.message);\\n        });\\n    }\\n    return true;\\n  };\\n\\n  exports.EnsAction = EnsAction;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ens-wrapper.js\": {\n            \"title\": \"$:/plugins/ipfs/ens-wrapper.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ens-wrapper.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nENS Wrapper\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  /**\\n   * https://github.com/purposeindustries/window-or-global\\n   * The MIT License (MIT) Copyright (c) Purpose Industries\\n   * version: 1.0.1\\n   */\\n  const root =\\n    (typeof self === \\\"object\\\" && self.self === self && self) ||\\n    (typeof global === \\\"object\\\" && global.global === global && global) ||\\n    this;\\n\\n  const name = \\\"ens-wrapper\\\";\\n\\n  var EnsWrapper = function (ipfsBundle) {\\n    this.account = null;\\n    this.chainId = null;\\n    this.ethereum = null;\\n    this.provider = null;\\n    this.web3 = null;\\n    this.ipfsBundle = ipfsBundle;\\n    this.ensLibrary = ipfsBundle.ensLibrary;\\n  };\\n\\n  EnsWrapper.prototype.getLogger = function () {\\n    return root.log.getLogger(name);\\n  };\\n\\n  EnsWrapper.prototype.getEthereumProvider = function () {\\n    if (this.ethereum == null) {\\n      const self = this;\\n      this.ethereum = this.ensLibrary.getProvider();\\n      // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\\n      this.ethereum.on(\\\"accountsChanged\\\", function accountChanged(accounts) {\\n        self.accountChanged(accounts);\\n      });\\n      this.ethereum.on(\\\"chainChanged\\\", function networkChanged(chainId) {\\n        self.networkChanged(chainId);\\n      });\\n      this.ethereum.on(\\\"close\\\", function closeProvider(code, reason) {\\n        self.closeConnection(code, reason);\\n      });\\n      this.ethereum.on(\\\"networkChanged\\\", function networkChanged(chainId) {\\n        self.networkChanged(chainId);\\n      });\\n    }\\n    return this.ethereum;\\n  };\\n\\n  EnsWrapper.prototype.accountChanged = async function (accounts) {\\n    if (accounts == undefined || accounts == null || Array.isArray(accounts) == false || accounts.length === 0) {\\n      this.web3 = null;\\n      this.chainId = null;\\n      this.account = null;\\n      this.getLogger().info(\\\"Closing Ethereum connection...\\\");\\n    } else if (this.account !== accounts[0]) {\\n      try {\\n        if (this.web3 == null && this.chainId == null) {\\n          const { web3, chainId } = await this.getWeb3Provider();\\n          this.web3 = web3;\\n          this.chainId = chainId;\\n        }\\n        this.account = accounts[0];\\n        const etherscan = this.getEtherscanRegistry();\\n        this.getLogger().info(\\n          \\\"Current Ethereum account:\\\" + \\\"\\\\n \\\" + etherscan[this.chainId] + \\\"/address/\\\" + this.account\\n        );\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        $tw.utils.alert(name, error.message);\\n      }\\n    }\\n  };\\n\\n  EnsWrapper.prototype.closeConnection = function (code, reason) {\\n    this.web3 = null;\\n    this.chainId = null;\\n    this.account = null;\\n    this.getLogger().info(\\\"Closing Ethereum Connection:\\\" + \\\"\\\\n \\\" + \\\"Reason: \\\" + reason + \\\"\\\\n \\\" + \\\"Code: \\\" + code);\\n  };\\n\\n  EnsWrapper.prototype.networkChanged = function (chainId) {\\n    if (this.chainId !== chainId) {\\n      const network = this.getNetwork();\\n      try {\\n        this.web3 = null;\\n        this.chainId = chainId;\\n        this.account = null;\\n        this.getLogger().info(\\\"Current Ethereum network:\\\" + \\\"\\\\n \\\" + network[chainId]);\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        $tw.utils.alert(name, error.message);\\n      }\\n    }\\n  };\\n\\n  EnsWrapper.prototype.getEnabledWeb3Provider = async function () {\\n    var web3 = null;\\n    var chainId = null;\\n    var account = null;\\n    const provider = this.getEthereumProvider();\\n    const network = this.getNetwork();\\n    const etherscan = this.getEtherscanRegistry();\\n    var msg = \\\"Reuse Web3 provider:\\\";\\n    if (this.account == null) {\\n      try {\\n        var { web3, chainId, account } = await this.ensLibrary.getEnabledWeb3Provider(provider);\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        throw new Error(\\\"Unable to retrieve an enabled Ethereum provider...\\\");\\n      }\\n      this.web3 = web3;\\n      this.chainId = chainId;\\n      this.account = account;\\n      msg = \\\"New Web3 provider:\\\";\\n    }\\n    // Log\\n    this.getLogger().info(\\n      msg +\\n        \\\"\\\\n network: \\\" +\\n        network[this.chainId] +\\n        \\\"\\\\n account: \\\" +\\n        etherscan[this.chainId] +\\n        \\\"/address/\\\" +\\n        this.account\\n    );\\n    return {\\n      web3: this.web3,\\n      chainId: this.chainId,\\n      account: this.account,\\n    };\\n  };\\n\\n  EnsWrapper.prototype.getWeb3Provider = async function () {\\n    var web3 = null;\\n    var chainId = null;\\n    const provider = this.getEthereumProvider();\\n    const network = this.getNetwork();\\n    var info = \\\"Reuse Web3 provider:\\\";\\n    if (this.web3 == null) {\\n      try {\\n        var { web3, chainId } = await this.ensLibrary.getWeb3Provider(provider);\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        throw new Error(\\\"Unable to retrieve an Ethereum provider...\\\");\\n      }\\n      this.web3 = web3;\\n      this.chainId = chainId;\\n      info = \\\"New Web3 provider:\\\";\\n    }\\n    // Log\\n    this.getLogger().info(info + \\\"\\\\n network: \\\" + network[this.chainId]);\\n    return {\\n      web3: this.web3,\\n      chainId: this.chainId,\\n    };\\n  };\\n\\n  EnsWrapper.prototype.getContentHash = async function (domain, web3) {\\n    try {\\n      // Retrieve\\n      var { content, protocol } = await this.ensLibrary.getContentHash(domain, web3);\\n      if (content !== null && protocol !== null) {\\n        // Convert CidV0 to CidV1\\n        content = this.ipfsBundle.cidV0ToCidV1(content);\\n        // Success\\n        return {\\n          content: content,\\n          protocol: protocol,\\n        };\\n      }\\n      this.getLogger().warn(\\\"Unassigned ENS domain content...\\\");\\n      return {\\n        content: null,\\n        protocol: null,\\n      };\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      throw new Error(\\\"Unable to fetch ENS domain content...\\\");\\n    }\\n  };\\n\\n  EnsWrapper.prototype.setContentHash = async function (domain, cid, web3, account) {\\n    try {\\n      const cidV0 = this.ipfsBundle.cidV1ToCidV0(cid);\\n      await this.ensLibrary.setContentHash(domain, cidV0, web3, account);\\n      return {\\n        cidV0: cidV0,\\n      };\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      throw new Error(\\\"Unable to set ENS domain content...\\\");\\n    }\\n  };\\n\\n  EnsWrapper.prototype.getEtherscanRegistry = function () {\\n    return this.ensLibrary.getEtherscanRegistry();\\n  };\\n\\n  EnsWrapper.prototype.getNetwork = function () {\\n    return this.ensLibrary.getNetwork();\\n  };\\n\\n  EnsWrapper.prototype.getENSRegistry = function () {\\n    return this.ensLibrary.getENSRegistry();\\n  };\\n\\n  exports.EnsWrapper = EnsWrapper;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/loglevel/loglevel.js\": {\n            \"text\": \"/*\\n* loglevel - https://github.com/pimterry/loglevel\\n*\\n* Copyright (c) 2013 Tim Perry\\n* Licensed under the MIT license.\\n*/\\n(function (root, definition) {\\n    \\\"use strict\\\";\\n    if (typeof define === 'function' && define.amd) {\\n        define(definition);\\n    } else if (typeof module === 'object' && module.exports) {\\n        module.exports = definition();\\n    } else {\\n        root.log = definition();\\n    }\\n}(this, function () {\\n    \\\"use strict\\\";\\n\\n    // Slightly dubious tricks to cut down minimized file size\\n    var noop = function() {};\\n    var undefinedType = \\\"undefined\\\";\\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\\n        /Trident\\\\/|MSIE /.test(window.navigator.userAgent)\\n    );\\n\\n    var logMethods = [\\n        \\\"trace\\\",\\n        \\\"debug\\\",\\n        \\\"info\\\",\\n        \\\"warn\\\",\\n        \\\"error\\\"\\n    ];\\n\\n    // Cross-browser bind equivalent that works at least back to IE6\\n    function bindMethod(obj, methodName) {\\n        var method = obj[methodName];\\n        if (typeof method.bind === 'function') {\\n            return method.bind(obj);\\n        } else {\\n            try {\\n                return Function.prototype.bind.call(method, obj);\\n            } catch (e) {\\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\\n                return function() {\\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\\n                };\\n            }\\n        }\\n    }\\n\\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\\n    function traceForIE() {\\n        if (console.log) {\\n            if (console.log.apply) {\\n                console.log.apply(console, arguments);\\n            } else {\\n                // In old IE, native console methods themselves don't have apply().\\n                Function.prototype.apply.apply(console.log, [console, arguments]);\\n            }\\n        }\\n        if (console.trace) console.trace();\\n    }\\n\\n    // Build the best logging method possible for this env\\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\\n    function realMethod(methodName) {\\n        if (methodName === 'debug') {\\n            methodName = 'log';\\n        }\\n\\n        if (typeof console === undefinedType) {\\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\\n        } else if (methodName === 'trace' && isIE) {\\n            return traceForIE;\\n        } else if (console[methodName] !== undefined) {\\n            return bindMethod(console, methodName);\\n        } else if (console.log !== undefined) {\\n            return bindMethod(console, 'log');\\n        } else {\\n            return noop;\\n        }\\n    }\\n\\n    // These private functions always need `this` to be set properly\\n\\n    function replaceLoggingMethods(level, loggerName) {\\n        /*jshint validthis:true */\\n        for (var i = 0; i < logMethods.length; i++) {\\n            var methodName = logMethods[i];\\n            this[methodName] = (i < level) ?\\n                noop :\\n                this.methodFactory(methodName, level, loggerName);\\n        }\\n\\n        // Define log.log as an alias for log.debug\\n        this.log = this.debug;\\n    }\\n\\n    // In old IE versions, the console isn't present until you first open it.\\n    // We build realMethod() replacements here that regenerate logging methods\\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\\n        return function () {\\n            if (typeof console !== undefinedType) {\\n                replaceLoggingMethods.call(this, level, loggerName);\\n                this[methodName].apply(this, arguments);\\n            }\\n        };\\n    }\\n\\n    // By default, we use closely bound real methods wherever possible, and\\n    // otherwise we wait for a console to appear, and then try again.\\n    function defaultMethodFactory(methodName, level, loggerName) {\\n        /*jshint validthis:true */\\n        return realMethod(methodName) ||\\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\\n    }\\n\\n    function Logger(name, defaultLevel, factory) {\\n      var self = this;\\n      var currentLevel;\\n      var storageKey = \\\"loglevel\\\";\\n      if (name) {\\n        storageKey += \\\":\\\" + name;\\n      }\\n\\n      function persistLevelIfPossible(levelNum) {\\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\\n\\n          if (typeof window === undefinedType) return;\\n\\n          // Use localStorage if available\\n          try {\\n              window.localStorage[storageKey] = levelName;\\n              return;\\n          } catch (ignore) {}\\n\\n          // Use session cookie as fallback\\n          try {\\n              window.document.cookie =\\n                encodeURIComponent(storageKey) + \\\"=\\\" + levelName + \\\";\\\";\\n          } catch (ignore) {}\\n      }\\n\\n      function getPersistedLevel() {\\n          var storedLevel;\\n\\n          if (typeof window === undefinedType) return;\\n\\n          try {\\n              storedLevel = window.localStorage[storageKey];\\n          } catch (ignore) {}\\n\\n          // Fallback to cookies if local storage gives us nothing\\n          if (typeof storedLevel === undefinedType) {\\n              try {\\n                  var cookie = window.document.cookie;\\n                  var location = cookie.indexOf(\\n                      encodeURIComponent(storageKey) + \\\"=\\\");\\n                  if (location !== -1) {\\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\\n                  }\\n              } catch (ignore) {}\\n          }\\n\\n          // If the stored level is not valid, treat it as if nothing was stored.\\n          if (self.levels[storedLevel] === undefined) {\\n              storedLevel = undefined;\\n          }\\n\\n          return storedLevel;\\n      }\\n\\n      /*\\n       *\\n       * Public logger API - see https://github.com/pimterry/loglevel for details\\n       *\\n       */\\n\\n      self.name = name;\\n\\n      self.levels = { \\\"TRACE\\\": 0, \\\"DEBUG\\\": 1, \\\"INFO\\\": 2, \\\"WARN\\\": 3,\\n          \\\"ERROR\\\": 4, \\\"SILENT\\\": 5};\\n\\n      self.methodFactory = factory || defaultMethodFactory;\\n\\n      self.getLevel = function () {\\n          return currentLevel;\\n      };\\n\\n      self.setLevel = function (level, persist) {\\n          if (typeof level === \\\"string\\\" && self.levels[level.toUpperCase()] !== undefined) {\\n              level = self.levels[level.toUpperCase()];\\n          }\\n          if (typeof level === \\\"number\\\" && level >= 0 && level <= self.levels.SILENT) {\\n              currentLevel = level;\\n              if (persist !== false) {  // defaults to true\\n                  persistLevelIfPossible(level);\\n              }\\n              replaceLoggingMethods.call(self, level, name);\\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\\n                  return \\\"No console available for logging\\\";\\n              }\\n          } else {\\n              throw \\\"log.setLevel() called with invalid level: \\\" + level;\\n          }\\n      };\\n\\n      self.setDefaultLevel = function (level) {\\n          if (!getPersistedLevel()) {\\n              self.setLevel(level, false);\\n          }\\n      };\\n\\n      self.enableAll = function(persist) {\\n          self.setLevel(self.levels.TRACE, persist);\\n      };\\n\\n      self.disableAll = function(persist) {\\n          self.setLevel(self.levels.SILENT, persist);\\n      };\\n\\n      // Initialize with the right level\\n      var initialLevel = getPersistedLevel();\\n      if (initialLevel == null) {\\n          initialLevel = defaultLevel == null ? \\\"WARN\\\" : defaultLevel;\\n      }\\n      self.setLevel(initialLevel, false);\\n    }\\n\\n    /*\\n     *\\n     * Top-level API\\n     *\\n     */\\n\\n    var defaultLogger = new Logger();\\n\\n    var _loggersByName = {};\\n    defaultLogger.getLogger = function getLogger(name) {\\n        if (typeof name !== \\\"string\\\" || name === \\\"\\\") {\\n          throw new TypeError(\\\"You must supply a name when creating a logger.\\\");\\n        }\\n\\n        var logger = _loggersByName[name];\\n        if (!logger) {\\n          logger = _loggersByName[name] = new Logger(\\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\\n        }\\n        return logger;\\n    };\\n\\n    // Grab the current global log variable in case of overwrite\\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\\n    defaultLogger.noConflict = function() {\\n        if (typeof window !== undefinedType &&\\n               window.log === defaultLogger) {\\n            window.log = _log;\\n        }\\n\\n        return defaultLogger;\\n    };\\n\\n    defaultLogger.getLoggers = function getLoggers() {\\n        return _loggersByName;\\n    };\\n\\n    return defaultLogger;\\n}));\\n\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/plugins/ipfs/loglevel/loglevel.js\",\n            \"global-module\": \"true\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/loglevel/license\": {\n            \"text\": \"Copyright (c) 2013 Tim Perry\\r\\n\\r\\nPermission is hereby granted, free of charge, to any person\\r\\nobtaining a copy of this software and associated documentation\\r\\nfiles (the \\\"Software\\\"), to deal in the Software without\\r\\nrestriction, including without limitation the rights to use,\\r\\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\ncopies of the Software, and to permit persons to whom the\\r\\nSoftware is furnished to do so, subject to the following\\r\\nconditions:\\r\\n\\r\\nThe above copyright notice and this permission notice shall be\\r\\nincluded in all copies or substantial portions of the Software.\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND,\\r\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\\r\\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\\r\\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\\r\\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\\r\\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\r\\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\\r\\nOTHER DEALINGS IN THE SOFTWARE.\\r\\n\",\n            \"type\": \"text/plain\",\n            \"title\": \"$:/plugins/ipfs/loglevel/license\"\n        },\n        \"$:/plugins/ipfs/ipfs-action.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-action.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-action.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Action\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const fileProtocol = \\\"file:\\\";\\n  const ipfsKeyword = \\\"ipfs\\\";\\n  const ipnsKeyword = \\\"ipns\\\";\\n\\n  const name = \\\"ipfs-action\\\";\\n\\n  var IpfsAction = function () {\\n    this.once = false;\\n    this.console = false;\\n    this.ipnsName = $tw.utils.getIpfsIpnsName();\\n    this.ipnsKey = $tw.utils.getIpfsIpnsKey();\\n  };\\n\\n  IpfsAction.prototype.getLogger = function () {\\n    return window.log.getLogger(name);\\n  };\\n\\n  IpfsAction.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return;\\n    }\\n    const self = this;\\n    // Widget\\n    $tw.rootWidget.addEventListener(\\\"tm-ipfs-export\\\", async function (event) {\\n      return await self.handleExportToIpfs(event, false);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ipfs-export-content\\\", async function (event) {\\n      return await self.handleExportToIpfs(event, true);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ipns-fetch\\\", async function (event) {\\n      return await self.handleFetchIpnsKey(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ipns-generate\\\", async function (event) {\\n      return await self.handleGenerateIpnsKey(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-console-mobile\\\", async function (event) {\\n      return await self.handleMobileConsole(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ipfs-export-attachment\\\", async function (event) {\\n      return await self.handleExportAttachmentToIpfs(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ipns-publish\\\", async function (event) {\\n      return await self.handlePublishToIpns(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ipns-remove\\\", async function (event) {\\n      return await self.handleRemoveIpnsKey(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ipns-rename\\\", async function (event) {\\n      return await self.handleRenameIpnsName(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ipns-resolve-and-open\\\", async function (event) {\\n      return await self.handleResolveIpnsKeyAndOpen(event);\\n    });\\n    // Init once\\n    this.once = true;\\n  };\\n\\n  IpfsAction.prototype.handleExportToIpfs = async function (event, child) {\\n    var cid = null;\\n    var ipnsKey = null;\\n    var ipnsName = null;\\n    var normalizedUrl = null;\\n    var added = null;\\n    var fields = [];\\n    const title = event.tiddlerTitle;\\n    var tiddler = $tw.wiki.getTiddler(title);\\n    var exportUri = tiddler.getFieldString(\\\"_export_uri\\\");\\n    try {\\n      var { cid, ipnsKey, ipnsName, normalizedUrl } = await $tw.ipfs.resolveUrl(true, true, exportUri);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    // Retrieve content\\n    const content = await this.exportTiddler(child, exportUri, tiddler);\\n    // Check\\n    if (content == null) {\\n      return false;\\n    }\\n    this.getLogger().info(\\\"Uploading Tiddler: \\\" + content.length + \\\" bytes\\\");\\n    try {\\n      var { added } = await $tw.ipfs.addToIpfs(content);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    // Prepare New value\\n    fields.push({ key: \\\"_export_uri\\\", value: \\\"/\\\" + ipfsKeyword + \\\"/\\\" + added });\\n    var tiddler = $tw.wiki.getTiddler(title);\\n    var updatedTiddler = $tw.utils.updateTiddler({\\n      tiddler: tiddler,\\n      addTags: [\\\"$:/isExported\\\", \\\"$:/isIpfs\\\"],\\n      fields: fields,\\n    });\\n    $tw.wiki.addTiddler(updatedTiddler);\\n    $tw.ipfs.requestToPin(added);\\n    $tw.ipfs.requestToUnpin(cid);\\n    if (ipnsKey !== null) {\\n      const msg = \\\"Publishing IPNS name: \\\" + ipnsName;\\n      this.getLogger().info(msg);\\n      $tw.utils.alert(name, msg);\\n      $tw.ipfs\\n        .requestToUnpin(null, ipnsKey, normalizedUrl)\\n        .then((data) => {\\n          $tw.ipfs\\n            .publishIpnsName(added, ipnsKey, ipnsName)\\n            .then((data) => {\\n              fields.push({ key: \\\"_export_uri\\\", value: exportUri });\\n              tiddler = $tw.utils.updateTiddler({\\n                tiddler: tiddler,\\n                addTags: [\\\"$:/isExported\\\", \\\"$:/isIpfs\\\"],\\n                fields: fields,\\n              });\\n              $tw.wiki.addTiddler(tiddler);\\n              $tw.utils.alert(name, \\\"Successfully Published IPNS name: \\\" + ipnsName);\\n            })\\n            .catch((error) => {\\n              self.getLogger().error(error);\\n              $tw.utils.alert(name, error.message);\\n            });\\n        })\\n        .catch((error) => {\\n          self.getLogger().error(error);\\n          $tw.utils.alert(name, error.message);\\n        });\\n    } else if (normalizedUrl !== null && normalizedUrl.hostname.endsWith(\\\".eth\\\")) {\\n      $tw.utils.alert(name, \\\"Publishing to ENS: \\\" + normalizedUrl.hostname);\\n      $tw.ipfs\\n        .setEns(normalizedUrl.hostname, added)\\n        .then((data) => {\\n          fields.push({ key: \\\"_export_uri\\\", value: exportUri });\\n          tiddler = $tw.utils.updateTiddler({\\n            tiddler: tiddler,\\n            addTags: [\\\"$:/isExported\\\", \\\"$:/isIpfs\\\"],\\n            fields: fields,\\n          });\\n          $tw.wiki.addTiddler(tiddler);\\n          $tw.utils.alert(name, \\\"Successfully Published to ENS...\\\");\\n        })\\n        .catch((error) => {\\n          self.getLogger().error(error);\\n          $tw.utils.alert(name, error.message);\\n        });\\n    }\\n    return true;\\n  };\\n\\n  IpfsAction.prototype.handleExportAttachmentToIpfs = async function (event) {\\n    const title = event.tiddlerTitle;\\n    var tiddler = $tw.wiki.getTiddler(title);\\n    const { type, info } = $tw.utils.getContentType(tiddler);\\n    var added = null;\\n    if (info.encoding !== \\\"base64\\\" && type !== \\\"image/svg+xml\\\") {\\n      $tw.utils.alert(name, \\\"This Tiddler do not contain any Attachment...\\\");\\n      return false;\\n    }\\n    // Do not process if _canonical_uri is set and the text field is empty\\n    const canonical_uri = tiddler.getFieldString(\\\"_canonical_uri\\\");\\n    if (canonical_uri !== undefined && canonical_uri !== null && canonical_uri !== \\\"\\\") {\\n      $tw.utils.alert(name, \\\"Attachment is already published...\\\");\\n      return false;\\n    }\\n    try {\\n      const content = this.getAttachmentContent(tiddler);\\n      if (content == null) {\\n        return false;\\n      }\\n      this.getLogger().info(\\\"Uploading attachment: \\\" + content.length + \\\" bytes\\\");\\n      var { added } = await $tw.ipfs.addToIpfs(content);\\n      $tw.ipfs.requestToPin(added);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    var addTags = [];\\n    var removeTags = [];\\n    if ($tw.crypto.hasPassword()) {\\n      addTags = [\\\"$:/isAttachment\\\", \\\"$:/isIpfs\\\"];\\n      removeTags = [\\\"$:/isEmbedded\\\"];\\n    } else {\\n      addTags = [\\\"$:/isAttachment\\\", \\\"$:/isIpfs\\\"];\\n      removeTags = [\\\"$:/isEmbedded\\\"];\\n    }\\n    // Update\\n    tiddler = $tw.utils.updateTiddler({\\n      tiddler: tiddler,\\n      addTags: addTags,\\n      removeTags: removeTags,\\n      fields: [\\n        { key: \\\"text\\\", value: \\\"\\\" },\\n        { key: \\\"_canonical_uri\\\", value: \\\"/\\\" + ipfsKeyword + \\\"/\\\" + added },\\n      ],\\n    });\\n    $tw.wiki.addTiddler(tiddler);\\n    return true;\\n  };\\n\\n  IpfsAction.prototype.getAttachmentContent = function (tiddler) {\\n    const { type, info } = $tw.utils.getContentType(tiddler);\\n    if (info.encoding !== \\\"base64\\\" && type !== \\\"image/svg+xml\\\") {\\n      $tw.utils.alert(name, \\\"Unsupported Tiddler Content-Type...\\\");\\n      return null;\\n    }\\n    var text = tiddler.getFieldString(\\\"text\\\");\\n    if (text == undefined || text == null || text === \\\"\\\") {\\n      $tw.utils.alert(name, \\\"Empty attachment content...\\\");\\n      return null;\\n    }\\n    if ($tw.crypto.hasPassword()) {\\n      try {\\n        // https://github.com/xmaysonnave/tiddlywiki-ipfs/issues/9\\n        if (info.encoding === \\\"base64\\\") {\\n          text = atob(text);\\n        }\\n        text = $tw.crypto.encrypt(text, $tw.crypto.currentPassword);\\n        text = $tw.ipfs.StringToUint8Array(text);\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        $tw.utils.alert(name, \\\"Failed to process encrypted Attachment content...\\\");\\n        return null;\\n      }\\n    } else {\\n      try {\\n        if (info.encoding === \\\"base64\\\") {\\n          text = $tw.ipfs.Base64ToUint8Array(text);\\n        } else {\\n          text = $tw.ipfs.StringToUint8Array(text);\\n        }\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        $tw.utils.alert(name, \\\"Failed to process Attachment content...\\\");\\n        return null;\\n      }\\n    }\\n    return text;\\n  };\\n\\n  IpfsAction.prototype.handleRenameIpnsName = async function (event) {\\n    var ipnsKey = null;\\n    const ipnsName = $tw.utils.getIpfsIpnsName();\\n    if (ipnsName == undefined || ipnsName == null || ipnsName === \\\"\\\") {\\n      $tw.utils.alert(name, \\\"Undefined IPNS name....\\\");\\n      return false;\\n    }\\n    if (this.ipnsName == null || this.ipnsName === ipnsName) {\\n      $tw.utils.alert(name, \\\"Nothing to rename....\\\");\\n      return false;\\n    }\\n    try {\\n      var { ipnsKey } = await $tw.ipfs.renameIpnsName(this.ipnsName, ipnsName);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/ipns/key\\\");\\n    if (tiddler !== undefined && this.ipnsKey !== ipnsKey) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: \\\"text\\\", value: ipnsKey }],\\n      });\\n      $tw.wiki.addTiddler(tiddler);\\n    }\\n    this.ipnsKey = ipnsKey;\\n    this.ipnsName = ipnsName;\\n    return true;\\n  };\\n\\n  IpfsAction.prototype.handleGenerateIpnsKey = async function (event) {\\n    var ipnsKey = null;\\n    const ipnsName = $tw.utils.getIpfsIpnsName();\\n    if (ipnsName == undefined || ipnsName == null || ipnsName === \\\"\\\") {\\n      $tw.utils.alert(name, \\\"Undefined IPNS name....\\\");\\n      return false;\\n    }\\n    try {\\n      var ipnsKey = await $tw.ipfs.generateIpnsKey(ipnsName);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/ipns/key\\\");\\n    if (tiddler !== undefined && this.ipnsKey !== ipnsKey) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: \\\"text\\\", value: ipnsKey }],\\n      });\\n      $tw.wiki.addTiddler(tiddler);\\n    }\\n    this.ipnsKey = ipnsKey;\\n    this.ipnsName = ipnsName;\\n    return true;\\n  };\\n\\n  IpfsAction.prototype.handleRemoveIpnsKey = async function (event) {\\n    var ipnsKey = null;\\n    var normalizedUrl = null;\\n    const ipnsName = $tw.utils.getIpfsIpnsName();\\n    const self = this;\\n    if (ipnsName == undefined || ipnsName == null || ipnsName === \\\"\\\") {\\n      $tw.utils.alert(name, \\\"Undefined IPNS name....\\\");\\n      return false;\\n    }\\n    try {\\n      var { ipnsKey, normalizedUrl } = await $tw.ipfs.getIpnsIdentifiers(ipnsName);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    // Async\\n    $tw.ipfs\\n      .requestToUnpin(null, ipnsKey, normalizedUrl)\\n      .then((data) => {\\n        $tw.ipfs\\n          .removeIpnsKey(ipnsName)\\n          .then((data) => {\\n            $tw.utils.alert(name, \\\"Succesfully removed Ipns key....\\\");\\n          })\\n          .catch((error) => {\\n            self.getLogger().error(error);\\n            $tw.utils.alert(name, error.message);\\n          });\\n      })\\n      .catch((error) => {\\n        self.getLogger().error(error);\\n        $tw.utils.alert(name, error.message);\\n      });\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/ipns/name\\\");\\n    if (tiddler !== undefined) {\\n      const updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: \\\"text\\\", value: \\\"\\\" }],\\n      });\\n      $tw.wiki.addTiddler(updatedTiddler);\\n    }\\n    tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/ipns/key\\\");\\n    if (tiddler !== undefined) {\\n      const updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: \\\"text\\\", value: \\\"\\\" }],\\n      });\\n      $tw.wiki.addTiddler(updatedTiddler);\\n    }\\n    this.ipnsName = null;\\n    this.ipnsKey = null;\\n    return true;\\n  };\\n\\n  IpfsAction.prototype.handleFetchIpnsKey = async function (event) {\\n    var ipnsKey = null;\\n    const ipnsName = $tw.utils.getIpfsIpnsName();\\n    if (ipnsName == undefined || ipnsName == null || ipnsName === \\\"\\\") {\\n      $tw.utils.alert(name, \\\"Undefined IPNS name....\\\");\\n      return false;\\n    }\\n    try {\\n      var { ipnsKey } = await $tw.ipfs.getIpnsIdentifiers(ipnsName);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/ipns/key\\\");\\n    if (tiddler !== undefined && this.ipnsKey !== ipnsKey) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: \\\"text\\\", value: ipnsKey }],\\n      });\\n      $tw.wiki.addTiddler(tiddler);\\n      this.ipnsKey = ipnsKey;\\n    }\\n    this.ipnsName = ipnsName;\\n    return true;\\n  };\\n\\n  IpfsAction.prototype.handleResolveIpnsKeyAndOpen = async function (event) {\\n    var ipnsKey = null;\\n    const ipnsName = $tw.utils.getIpfsIpnsName();\\n    var resolvedUrl = null;\\n    if (ipnsName == undefined || ipnsName == null || ipnsName === \\\"\\\") {\\n      $tw.utils.alert(name, \\\"Undefined IPNS name....\\\");\\n      return false;\\n    }\\n    try {\\n      var { ipnsKey, resolvedUrl } = await $tw.ipfs.resolveUrl(true, false, \\\"/\\\" + ipnsKeyword + \\\"/\\\" + ipnsName);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/ipns/key\\\");\\n    if (tiddler !== undefined && this.ipnsKey !== ipnsKey) {\\n      tiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: \\\"text\\\", value: ipnsKey }],\\n      });\\n      this.ipnsKey = ipnsKey;\\n      $tw.wiki.addTiddler(tiddler);\\n    }\\n    this.ipnsName = ipnsName;\\n    window.open(resolvedUrl.href, \\\"_blank\\\", \\\"noopener,noreferrer\\\");\\n    return true;\\n  };\\n\\n  IpfsAction.prototype.handleMobileConsole = async function (tiddler) {\\n    // Load mobile console if applicable\\n    if (typeof window.eruda === \\\"undefined\\\") {\\n      try {\\n        // Load eruda\\n        await $tw.ipfs.ipfsBundle.ipfsLoader.loadErudaLibrary();\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        throw new Error(error.message);\\n      }\\n      const eruda = window.document.createElement(\\\"div\\\");\\n      window.document.body.appendChild(eruda);\\n      window.eruda.init({\\n        container: eruda,\\n        tool: [\\\"console\\\"],\\n        useShadowDom: false,\\n      });\\n      // Inherit font\\n      eruda.style.fontFamily = \\\"inherit\\\";\\n      // Preserve user preference if any, default is 80\\n      if (window.eruda.get().config.get(\\\"displaySize\\\") === 80) {\\n        window.eruda.get().config.set(\\\"displaySize\\\", 40);\\n      }\\n      // Preserve user preference if any, default is 0.95\\n      if (window.eruda.get().config.get(\\\"transparency\\\") === 0.95) {\\n        window.eruda.get().config.set(\\\"transparency\\\", 1);\\n      }\\n      // Remove the button\\n      const buttons = document.getElementsByClassName(\\\"eruda-entry-btn\\\");\\n      for (var i = 0; i < buttons.length; i++) {\\n        buttons[i].remove();\\n      }\\n      // The first output line is eaten...\\n      this.getLogger().info(\\\"Mobile console has been loaded...\\\");\\n    }\\n    if (this.console == false) {\\n      // Show\\n      window.eruda.show();\\n      window.eruda.show(\\\"console\\\");\\n      this.console = true;\\n    } else {\\n      window.eruda.hide();\\n      this.console = false;\\n    }\\n  };\\n\\n  IpfsAction.prototype.handlePublishToIpns = async function (event) {\\n    const self = this;\\n    var wikiCid = null;\\n    var wikiIpnsKey = null;\\n    var ipnsKey = null;\\n    const ipnsName = $tw.utils.getIpfsIpnsName();\\n    const wiki = $tw.ipfs.getDocumentUrl();\\n    if (wiki.protocol === fileProtocol) {\\n      $tw.utils.alert(name, \\\"Undefined IPFS identifier...\\\");\\n      return false;\\n    }\\n    if (wiki.pathname === \\\"/\\\") {\\n      $tw.utils.alert(name, \\\"Unknown IPFS identifier...\\\");\\n      return false;\\n    }\\n    if (ipnsName == undefined || ipnsName == null || ipnsName === \\\"\\\") {\\n      $tw.utils.alert(name, \\\"Undefined IPNS name....\\\");\\n      return false;\\n    }\\n    try {\\n      var { ipnsKey } = await $tw.ipfs.getIpnsIdentifiers(ipnsName);\\n      var { cid: wikiCid, ipnsKey: wikiIpnsKey } = await $tw.ipfs.resolveUrl(true, false, wiki);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return false;\\n    }\\n    if (wikiIpnsKey == null && wikiCid == null) {\\n      $tw.utils.alert(name, \\\"Unknown IPNS identifier...\\\");\\n      return false;\\n    }\\n    if (wikiIpnsKey !== null && wikiIpnsKey === ipnsKey) {\\n      $tw.utils.alert(name, \\\"Default IPNS key matches current IPNS key....\\\");\\n      return false;\\n    }\\n    $tw.utils.alert(name, \\\"Publishing IPNS name: \\\" + ipnsName);\\n    $tw.ipfs\\n      .publishIpnsName(wikiCid, ipnsKey, ipnsName)\\n      .then((data) => {\\n        $tw.utils.alert(name, \\\"Successfully Published IPNS name: \\\" + ipnsName);\\n      })\\n      .catch((error) => {\\n        self.getLogger().error(error);\\n        $tw.utils.alert(name, error.message);\\n      });\\n    return true;\\n  };\\n\\n  IpfsAction.prototype.exportTiddlersAsJson = async function (exportFilter, exportUri, spaces) {\\n    var tiddlers = $tw.wiki.filterTiddlers(exportFilter);\\n    var spaces = spaces === undefined ? $tw.config.preferences.jsonSpaces : spaces;\\n    var data = [];\\n    // Process Tiddlers\\n    for (var t = 0; t < tiddlers.length; t++) {\\n      // Load Tiddler\\n      var tiddler = $tw.wiki.getTiddler(tiddlers[t]);\\n      // Process\\n      var fields = new Object();\\n      // Process fields\\n      for (var field in tiddler.fields) {\\n        // Discard\\n        if (field === \\\"tags\\\" || field === \\\"_export_uri\\\") {\\n          continue;\\n        }\\n        var ipnsKey = null;\\n        var fieldValue = tiddler.getFieldString(field);\\n        if (field === \\\"_canonical_uri\\\" && fieldValue === exportUri) {\\n          continue;\\n        }\\n        if (field === \\\"_import_uri\\\" && fieldValue === exportUri) {\\n          continue;\\n        }\\n        try {\\n          var { ipnsKey } = await $tw.ipfs.resolveUrl(false, false, fieldValue);\\n        } catch (error) {\\n          this.getLogger().error(error);\\n          $tw.utils.alert(name, error.message);\\n          return null;\\n        }\\n        // IPNS\\n        if (ipnsKey !== null) {\\n          fieldValue = \\\"/\\\" + ipnsKeyword + \\\"/\\\" + ipnsKey;\\n        }\\n        // Store field\\n        fields[field] = fieldValue;\\n      }\\n      // Process tags\\n      var tags = tiddler.fields[\\\"tags\\\"];\\n      if (tags !== undefined && tags !== null) {\\n        var tagValues = \\\"\\\";\\n        for (var i = 0; i < tags.length; i++) {\\n          const tag = tags[i];\\n          // Discard\\n          if (tag === \\\"$:/isExported\\\" || tag === \\\"$:/isImported\\\") {\\n            continue;\\n          }\\n          tagValues = (tagValues.length === 0 ? \\\"[[\\\" : tagValues + \\\" [[\\\") + tag + \\\"]]\\\";\\n        }\\n        // Store tags\\n        fields[\\\"tags\\\"] = tagValues;\\n      }\\n      // Store\\n      data.push(fields);\\n    }\\n    return JSON.stringify(data, null, spaces);\\n  };\\n\\n  IpfsAction.prototype.exportTiddler = async function (child, exportUri, tiddler) {\\n    // Check\\n    if (tiddler == undefined || tiddler == null) {\\n      const error = new Error(\\\"Unknown Tiddler...\\\");\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n      return null;\\n    }\\n    // Title\\n    const title = tiddler.getFieldString(\\\"title\\\");\\n    // Filter\\n    var exportFilter = \\\"[[\\\" + tiddler.fields.title + \\\"]]\\\";\\n    // Child filters\\n    if (child) {\\n      // Links\\n      const linked = $tw.wiki.getTiddlerLinks(title);\\n      this.getLogger().info(\\\"Found \\\" + linked.length + \\\" Tiddler link(s).\\\");\\n      // Transcluded\\n      const transcluded = this.transcludeContent(title);\\n      this.getLogger().info(\\\"Found \\\" + transcluded.length + \\\" transcluded Tiddler reference(s).\\\");\\n      const filtered = linked.concat(transcluded);\\n      // Process filtered content\\n      for (var i = 0; i < filtered.length; i++) {\\n        if (exportFilter.includes(\\\"[[\\\" + filtered[i] + \\\"]]\\\") == false) {\\n          exportFilter = exportFilter + \\\" [[\\\" + filtered[i] + \\\"]]\\\";\\n        }\\n      }\\n    }\\n    var content = null;\\n    if (child || $tw.utils.getIpfsExport() === \\\"json\\\") {\\n      content = await this.exportTiddlersAsJson(exportFilter, exportUri);\\n    } else if ($tw.utils.getIpfsExport() === \\\"static\\\") {\\n      // Export Tiddler as Static River\\n      const options = {\\n        downloadType: \\\"text/plain\\\",\\n        method: \\\"download\\\",\\n        template: \\\"$:/core/templates/exporters/StaticRiver\\\",\\n        variables: {\\n          exportFilter: exportFilter,\\n        },\\n      };\\n      content = $tw.wiki.renderTiddler(\\\"text/plain\\\", \\\"$:/core/templates/exporters/StaticRiver\\\", options);\\n    } else {\\n      // Export Tiddler as tid\\n      const options = {\\n        downloadType: \\\"text/plain\\\",\\n        method: \\\"download\\\",\\n        template: \\\"$:/core/templates/exporters/TidFile\\\",\\n        variables: {\\n          exportFilter: exportFilter,\\n        },\\n      };\\n      content = $tw.wiki.renderTiddler(\\\"text/plain\\\", \\\"$:/core/templates/exporters/TidFile\\\", options);\\n    }\\n    if (content !== undefined && content !== null) {\\n      // Encrypt\\n      if ($tw.crypto.hasPassword()) {\\n        try {\\n          content = $tw.crypto.encrypt(content, $tw.crypto.currentPassword);\\n        } catch (error) {\\n          this.getLogger().error(error);\\n          $tw.utils.alert(name, \\\"Failed to encrypt content...\\\");\\n          return null;\\n        }\\n      }\\n      try {\\n        content = $tw.ipfs.StringToUint8Array(content);\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        $tw.utils.alert(name, \\\"Failed to convert content...\\\");\\n        return null;\\n      }\\n    }\\n    return content;\\n  };\\n\\n  IpfsAction.prototype.transcludeContent = function (title) {\\n    var tiddlers = [];\\n    // Build a transclude widget\\n    var transclude = $tw.wiki.makeTranscludeWidget(title);\\n    // Build a fake document element\\n    const container = $tw.fakeDocument.createElement(\\\"div\\\");\\n    // Transclude\\n    transclude.render(container, null);\\n    // Process children\\n    this.locateTiddlers(transclude, tiddlers);\\n    // Return\\n    return tiddlers;\\n  };\\n\\n  IpfsAction.prototype.locateTiddlers = function (transclude, tiddlers) {\\n    // Children lookup\\n    for (var i = 0; i < transclude.children.length; i++) {\\n      // Current child\\n      const child = transclude.children[i];\\n      if (child.variables !== undefined && child.variables !== null) {\\n        // Locate Tiddler\\n        const currentTiddler = \\\"currentTiddler\\\";\\n        const current = child.variables[currentTiddler];\\n        if (current !== undefined && current !== null && current.value !== undefined && current.value !== null) {\\n          if (tiddlers.indexOf(current.value) === -1) {\\n            tiddlers.push(current.value);\\n          }\\n        }\\n      }\\n      // Process children\\n      this.locateTiddlers(child, tiddlers);\\n    }\\n  };\\n\\n  exports.IpfsAction = IpfsAction;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-bundle.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-bundle.js\",\n            \"text\": \"(function(f){if(typeof exports===\\\"object\\\"&&typeof module!==\\\"undefined\\\"){module.exports=f()}else if(typeof define===\\\"function\\\"&&define.amd){define([],f)}else{var g;if(typeof window!==\\\"undefined\\\"){g=window}else if(typeof global!==\\\"undefined\\\"){g=global}else if(typeof self!==\\\"undefined\\\"){g=self}else{g=this}g.IpfsBundle = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\\\"function\\\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\\\"Cannot find module '\\\"+i+\\\"'\\\");throw a.code=\\\"MODULE_NOT_FOUND\\\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\\\"function\\\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\\nfunction _asyncIterator(iterable) {\\n  var method;\\n\\n  if (typeof Symbol !== \\\"undefined\\\") {\\n    if (Symbol.asyncIterator) {\\n      method = iterable[Symbol.asyncIterator];\\n      if (method != null) return method.call(iterable);\\n    }\\n\\n    if (Symbol.iterator) {\\n      method = iterable[Symbol.iterator];\\n      if (method != null) return method.call(iterable);\\n    }\\n  }\\n\\n  throw new TypeError(\\\"Object is not async iterable\\\");\\n}\\n\\nmodule.exports = _asyncIterator;\\n},{}],2:[function(require,module,exports){\\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\\n  try {\\n    var info = gen[key](arg);\\n    var value = info.value;\\n  } catch (error) {\\n    reject(error);\\n    return;\\n  }\\n\\n  if (info.done) {\\n    resolve(value);\\n  } else {\\n    Promise.resolve(value).then(_next, _throw);\\n  }\\n}\\n\\nfunction _asyncToGenerator(fn) {\\n  return function () {\\n    var self = this,\\n        args = arguments;\\n    return new Promise(function (resolve, reject) {\\n      var gen = fn.apply(self, args);\\n\\n      function _next(value) {\\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value);\\n      }\\n\\n      function _throw(err) {\\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err);\\n      }\\n\\n      _next(undefined);\\n    });\\n  };\\n}\\n\\nmodule.exports = _asyncToGenerator;\\n},{}],3:[function(require,module,exports){\\nfunction _interopRequireDefault(obj) {\\n  return obj && obj.__esModule ? obj : {\\n    \\\"default\\\": obj\\n  };\\n}\\n\\nmodule.exports = _interopRequireDefault;\\n},{}],4:[function(require,module,exports){\\nmodule.exports = require(\\\"regenerator-runtime\\\");\\n\\n},{\\\"regenerator-runtime\\\":81}],5:[function(require,module,exports){\\n'use strict'\\n// base-x encoding / decoding\\n// Copyright (c) 2018 base-x contributors\\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\\n// Distributed under the MIT software license, see the accompanying\\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\\n// @ts-ignore\\nvar _Buffer = require('safe-buffer').Buffer\\nfunction base (ALPHABET) {\\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\\n  var BASE_MAP = new Uint8Array(256)\\n  for (var j = 0; j < BASE_MAP.length; j++) {\\n    BASE_MAP[j] = 255\\n  }\\n  for (var i = 0; i < ALPHABET.length; i++) {\\n    var x = ALPHABET.charAt(i)\\n    var xc = x.charCodeAt(0)\\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\\n    BASE_MAP[xc] = i\\n  }\\n  var BASE = ALPHABET.length\\n  var LEADER = ALPHABET.charAt(0)\\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\\n  function encode (source) {\\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\\n    if (source.length === 0) { return '' }\\n        // Skip & count leading zeroes.\\n    var zeroes = 0\\n    var length = 0\\n    var pbegin = 0\\n    var pend = source.length\\n    while (pbegin !== pend && source[pbegin] === 0) {\\n      pbegin++\\n      zeroes++\\n    }\\n        // Allocate enough space in big-endian base58 representation.\\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\\n    var b58 = new Uint8Array(size)\\n        // Process the bytes.\\n    while (pbegin !== pend) {\\n      var carry = source[pbegin]\\n            // Apply \\\"b58 = b58 * 256 + ch\\\".\\n      var i = 0\\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\\n        carry += (256 * b58[it1]) >>> 0\\n        b58[it1] = (carry % BASE) >>> 0\\n        carry = (carry / BASE) >>> 0\\n      }\\n      if (carry !== 0) { throw new Error('Non-zero carry') }\\n      length = i\\n      pbegin++\\n    }\\n        // Skip leading zeroes in base58 result.\\n    var it2 = size - length\\n    while (it2 !== size && b58[it2] === 0) {\\n      it2++\\n    }\\n        // Translate the result into a string.\\n    var str = LEADER.repeat(zeroes)\\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\\n    return str\\n  }\\n  function decodeUnsafe (source) {\\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\\n    if (source.length === 0) { return _Buffer.alloc(0) }\\n    var psz = 0\\n        // Skip leading spaces.\\n    if (source[psz] === ' ') { return }\\n        // Skip and count leading '1's.\\n    var zeroes = 0\\n    var length = 0\\n    while (source[psz] === LEADER) {\\n      zeroes++\\n      psz++\\n    }\\n        // Allocate enough space in big-endian base256 representation.\\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\\n    var b256 = new Uint8Array(size)\\n        // Process the characters.\\n    while (source[psz]) {\\n            // Decode character\\n      var carry = BASE_MAP[source.charCodeAt(psz)]\\n            // Invalid character\\n      if (carry === 255) { return }\\n      var i = 0\\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\\n        carry += (BASE * b256[it3]) >>> 0\\n        b256[it3] = (carry % 256) >>> 0\\n        carry = (carry / 256) >>> 0\\n      }\\n      if (carry !== 0) { throw new Error('Non-zero carry') }\\n      length = i\\n      psz++\\n    }\\n        // Skip trailing spaces.\\n    if (source[psz] === ' ') { return }\\n        // Skip leading zeroes in b256.\\n    var it4 = size - length\\n    while (it4 !== size && b256[it4] === 0) {\\n      it4++\\n    }\\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\\n    vch.fill(0x00, 0, zeroes)\\n    var j = zeroes\\n    while (it4 !== size) {\\n      vch[j++] = b256[it4++]\\n    }\\n    return vch\\n  }\\n  function decode (string) {\\n    var buffer = decodeUnsafe(string)\\n    if (buffer) { return buffer }\\n    throw new Error('Non-base' + BASE + ' character')\\n  }\\n  return {\\n    encode: encode,\\n    decodeUnsafe: decodeUnsafe,\\n    decode: decode\\n  }\\n}\\nmodule.exports = base\\n\\n},{\\\"safe-buffer\\\":82}],6:[function(require,module,exports){\\n'use strict'\\n\\nexports.byteLength = byteLength\\nexports.toByteArray = toByteArray\\nexports.fromByteArray = fromByteArray\\n\\nvar lookup = []\\nvar revLookup = []\\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\\n\\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\\nfor (var i = 0, len = code.length; i < len; ++i) {\\n  lookup[i] = code[i]\\n  revLookup[code.charCodeAt(i)] = i\\n}\\n\\n// Support decoding URL-safe base64 strings, as Node.js does.\\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\\nrevLookup['-'.charCodeAt(0)] = 62\\nrevLookup['_'.charCodeAt(0)] = 63\\n\\nfunction getLens (b64) {\\n  var len = b64.length\\n\\n  if (len % 4 > 0) {\\n    throw new Error('Invalid string. Length must be a multiple of 4')\\n  }\\n\\n  // Trim off extra bytes after placeholder bytes are found\\n  // See: https://github.com/beatgammit/base64-js/issues/42\\n  var validLen = b64.indexOf('=')\\n  if (validLen === -1) validLen = len\\n\\n  var placeHoldersLen = validLen === len\\n    ? 0\\n    : 4 - (validLen % 4)\\n\\n  return [validLen, placeHoldersLen]\\n}\\n\\n// base64 is 4/3 + up to two characters of the original data\\nfunction byteLength (b64) {\\n  var lens = getLens(b64)\\n  var validLen = lens[0]\\n  var placeHoldersLen = lens[1]\\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\\n}\\n\\nfunction _byteLength (b64, validLen, placeHoldersLen) {\\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\\n}\\n\\nfunction toByteArray (b64) {\\n  var tmp\\n  var lens = getLens(b64)\\n  var validLen = lens[0]\\n  var placeHoldersLen = lens[1]\\n\\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\\n\\n  var curByte = 0\\n\\n  // if there are placeholders, only get up to the last complete 4 chars\\n  var len = placeHoldersLen > 0\\n    ? validLen - 4\\n    : validLen\\n\\n  var i\\n  for (i = 0; i < len; i += 4) {\\n    tmp =\\n      (revLookup[b64.charCodeAt(i)] << 18) |\\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\\n      revLookup[b64.charCodeAt(i + 3)]\\n    arr[curByte++] = (tmp >> 16) & 0xFF\\n    arr[curByte++] = (tmp >> 8) & 0xFF\\n    arr[curByte++] = tmp & 0xFF\\n  }\\n\\n  if (placeHoldersLen === 2) {\\n    tmp =\\n      (revLookup[b64.charCodeAt(i)] << 2) |\\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\\n    arr[curByte++] = tmp & 0xFF\\n  }\\n\\n  if (placeHoldersLen === 1) {\\n    tmp =\\n      (revLookup[b64.charCodeAt(i)] << 10) |\\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\\n    arr[curByte++] = (tmp >> 8) & 0xFF\\n    arr[curByte++] = tmp & 0xFF\\n  }\\n\\n  return arr\\n}\\n\\nfunction tripletToBase64 (num) {\\n  return lookup[num >> 18 & 0x3F] +\\n    lookup[num >> 12 & 0x3F] +\\n    lookup[num >> 6 & 0x3F] +\\n    lookup[num & 0x3F]\\n}\\n\\nfunction encodeChunk (uint8, start, end) {\\n  var tmp\\n  var output = []\\n  for (var i = start; i < end; i += 3) {\\n    tmp =\\n      ((uint8[i] << 16) & 0xFF0000) +\\n      ((uint8[i + 1] << 8) & 0xFF00) +\\n      (uint8[i + 2] & 0xFF)\\n    output.push(tripletToBase64(tmp))\\n  }\\n  return output.join('')\\n}\\n\\nfunction fromByteArray (uint8) {\\n  var tmp\\n  var len = uint8.length\\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\\n  var parts = []\\n  var maxChunkLength = 16383 // must be multiple of 3\\n\\n  // go through the array every three bytes, we'll deal with trailing stuff later\\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\\n    parts.push(encodeChunk(\\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\\n    ))\\n  }\\n\\n  // pad the end with zeros, but make sure to not forget the extra bytes\\n  if (extraBytes === 1) {\\n    tmp = uint8[len - 1]\\n    parts.push(\\n      lookup[tmp >> 2] +\\n      lookup[(tmp << 4) & 0x3F] +\\n      '=='\\n    )\\n  } else if (extraBytes === 2) {\\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\\n    parts.push(\\n      lookup[tmp >> 10] +\\n      lookup[(tmp >> 4) & 0x3F] +\\n      lookup[(tmp << 2) & 0x3F] +\\n      '='\\n    )\\n  }\\n\\n  return parts.join('')\\n}\\n\\n},{}],7:[function(require,module,exports){\\n(function (Buffer){\\n/*!\\n * The buffer module from node.js, for the browser.\\n *\\n * @author   Feross Aboukhadijeh <https://feross.org>\\n * @license  MIT\\n */\\n/* eslint-disable no-proto */\\n\\n'use strict'\\n\\nvar base64 = require('base64-js')\\nvar ieee754 = require('ieee754')\\n\\nexports.Buffer = Buffer\\nexports.SlowBuffer = SlowBuffer\\nexports.INSPECT_MAX_BYTES = 50\\n\\nvar K_MAX_LENGTH = 0x7fffffff\\nexports.kMaxLength = K_MAX_LENGTH\\n\\n/**\\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\\n *   === true    Use Uint8Array implementation (fastest)\\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\\n *               implementation (most compatible, even IE6)\\n *\\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\\n * Opera 11.6+, iOS 4.2+.\\n *\\n * We report that the browser does not support typed arrays if the are not subclassable\\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\\n * for __proto__ and has a buggy typed array implementation.\\n */\\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\\n\\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\\n    typeof console.error === 'function') {\\n  console.error(\\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\\n  )\\n}\\n\\nfunction typedArraySupport () {\\n  // Can typed array instances can be augmented?\\n  try {\\n    var arr = new Uint8Array(1)\\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\\n    return arr.foo() === 42\\n  } catch (e) {\\n    return false\\n  }\\n}\\n\\nObject.defineProperty(Buffer.prototype, 'parent', {\\n  enumerable: true,\\n  get: function () {\\n    if (!Buffer.isBuffer(this)) return undefined\\n    return this.buffer\\n  }\\n})\\n\\nObject.defineProperty(Buffer.prototype, 'offset', {\\n  enumerable: true,\\n  get: function () {\\n    if (!Buffer.isBuffer(this)) return undefined\\n    return this.byteOffset\\n  }\\n})\\n\\nfunction createBuffer (length) {\\n  if (length > K_MAX_LENGTH) {\\n    throw new RangeError('The value \\\"' + length + '\\\" is invalid for option \\\"size\\\"')\\n  }\\n  // Return an augmented `Uint8Array` instance\\n  var buf = new Uint8Array(length)\\n  buf.__proto__ = Buffer.prototype\\n  return buf\\n}\\n\\n/**\\n * The Buffer constructor returns instances of `Uint8Array` that have their\\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\\n * returns a single octet.\\n *\\n * The `Uint8Array` prototype remains unmodified.\\n */\\n\\nfunction Buffer (arg, encodingOrOffset, length) {\\n  // Common case.\\n  if (typeof arg === 'number') {\\n    if (typeof encodingOrOffset === 'string') {\\n      throw new TypeError(\\n        'The \\\"string\\\" argument must be of type string. Received type number'\\n      )\\n    }\\n    return allocUnsafe(arg)\\n  }\\n  return from(arg, encodingOrOffset, length)\\n}\\n\\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\\n    Buffer[Symbol.species] === Buffer) {\\n  Object.defineProperty(Buffer, Symbol.species, {\\n    value: null,\\n    configurable: true,\\n    enumerable: false,\\n    writable: false\\n  })\\n}\\n\\nBuffer.poolSize = 8192 // not used by this implementation\\n\\nfunction from (value, encodingOrOffset, length) {\\n  if (typeof value === 'string') {\\n    return fromString(value, encodingOrOffset)\\n  }\\n\\n  if (ArrayBuffer.isView(value)) {\\n    return fromArrayLike(value)\\n  }\\n\\n  if (value == null) {\\n    throw TypeError(\\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\\n      'or Array-like Object. Received type ' + (typeof value)\\n    )\\n  }\\n\\n  if (isInstance(value, ArrayBuffer) ||\\n      (value && isInstance(value.buffer, ArrayBuffer))) {\\n    return fromArrayBuffer(value, encodingOrOffset, length)\\n  }\\n\\n  if (typeof value === 'number') {\\n    throw new TypeError(\\n      'The \\\"value\\\" argument must not be of type number. Received type number'\\n    )\\n  }\\n\\n  var valueOf = value.valueOf && value.valueOf()\\n  if (valueOf != null && valueOf !== value) {\\n    return Buffer.from(valueOf, encodingOrOffset, length)\\n  }\\n\\n  var b = fromObject(value)\\n  if (b) return b\\n\\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\\n      typeof value[Symbol.toPrimitive] === 'function') {\\n    return Buffer.from(\\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\\n    )\\n  }\\n\\n  throw new TypeError(\\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\\n    'or Array-like Object. Received type ' + (typeof value)\\n  )\\n}\\n\\n/**\\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\\n * if value is a number.\\n * Buffer.from(str[, encoding])\\n * Buffer.from(array)\\n * Buffer.from(buffer)\\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\\n **/\\nBuffer.from = function (value, encodingOrOffset, length) {\\n  return from(value, encodingOrOffset, length)\\n}\\n\\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\\n// https://github.com/feross/buffer/pull/148\\nBuffer.prototype.__proto__ = Uint8Array.prototype\\nBuffer.__proto__ = Uint8Array\\n\\nfunction assertSize (size) {\\n  if (typeof size !== 'number') {\\n    throw new TypeError('\\\"size\\\" argument must be of type number')\\n  } else if (size < 0) {\\n    throw new RangeError('The value \\\"' + size + '\\\" is invalid for option \\\"size\\\"')\\n  }\\n}\\n\\nfunction alloc (size, fill, encoding) {\\n  assertSize(size)\\n  if (size <= 0) {\\n    return createBuffer(size)\\n  }\\n  if (fill !== undefined) {\\n    // Only pay attention to encoding if it's a string. This\\n    // prevents accidentally sending in a number that would\\n    // be interpretted as a start offset.\\n    return typeof encoding === 'string'\\n      ? createBuffer(size).fill(fill, encoding)\\n      : createBuffer(size).fill(fill)\\n  }\\n  return createBuffer(size)\\n}\\n\\n/**\\n * Creates a new filled Buffer instance.\\n * alloc(size[, fill[, encoding]])\\n **/\\nBuffer.alloc = function (size, fill, encoding) {\\n  return alloc(size, fill, encoding)\\n}\\n\\nfunction allocUnsafe (size) {\\n  assertSize(size)\\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\\n}\\n\\n/**\\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\\n * */\\nBuffer.allocUnsafe = function (size) {\\n  return allocUnsafe(size)\\n}\\n/**\\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\\n */\\nBuffer.allocUnsafeSlow = function (size) {\\n  return allocUnsafe(size)\\n}\\n\\nfunction fromString (string, encoding) {\\n  if (typeof encoding !== 'string' || encoding === '') {\\n    encoding = 'utf8'\\n  }\\n\\n  if (!Buffer.isEncoding(encoding)) {\\n    throw new TypeError('Unknown encoding: ' + encoding)\\n  }\\n\\n  var length = byteLength(string, encoding) | 0\\n  var buf = createBuffer(length)\\n\\n  var actual = buf.write(string, encoding)\\n\\n  if (actual !== length) {\\n    // Writing a hex string, for example, that contains invalid characters will\\n    // cause everything after the first invalid character to be ignored. (e.g.\\n    // 'abxxcd' will be treated as 'ab')\\n    buf = buf.slice(0, actual)\\n  }\\n\\n  return buf\\n}\\n\\nfunction fromArrayLike (array) {\\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\\n  var buf = createBuffer(length)\\n  for (var i = 0; i < length; i += 1) {\\n    buf[i] = array[i] & 255\\n  }\\n  return buf\\n}\\n\\nfunction fromArrayBuffer (array, byteOffset, length) {\\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\\n    throw new RangeError('\\\"offset\\\" is outside of buffer bounds')\\n  }\\n\\n  if (array.byteLength < byteOffset + (length || 0)) {\\n    throw new RangeError('\\\"length\\\" is outside of buffer bounds')\\n  }\\n\\n  var buf\\n  if (byteOffset === undefined && length === undefined) {\\n    buf = new Uint8Array(array)\\n  } else if (length === undefined) {\\n    buf = new Uint8Array(array, byteOffset)\\n  } else {\\n    buf = new Uint8Array(array, byteOffset, length)\\n  }\\n\\n  // Return an augmented `Uint8Array` instance\\n  buf.__proto__ = Buffer.prototype\\n  return buf\\n}\\n\\nfunction fromObject (obj) {\\n  if (Buffer.isBuffer(obj)) {\\n    var len = checked(obj.length) | 0\\n    var buf = createBuffer(len)\\n\\n    if (buf.length === 0) {\\n      return buf\\n    }\\n\\n    obj.copy(buf, 0, 0, len)\\n    return buf\\n  }\\n\\n  if (obj.length !== undefined) {\\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\\n      return createBuffer(0)\\n    }\\n    return fromArrayLike(obj)\\n  }\\n\\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\\n    return fromArrayLike(obj.data)\\n  }\\n}\\n\\nfunction checked (length) {\\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\\n  // length is NaN (which is otherwise coerced to zero.)\\n  if (length >= K_MAX_LENGTH) {\\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\\n  }\\n  return length | 0\\n}\\n\\nfunction SlowBuffer (length) {\\n  if (+length != length) { // eslint-disable-line eqeqeq\\n    length = 0\\n  }\\n  return Buffer.alloc(+length)\\n}\\n\\nBuffer.isBuffer = function isBuffer (b) {\\n  return b != null && b._isBuffer === true &&\\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\\n}\\n\\nBuffer.compare = function compare (a, b) {\\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\\n    throw new TypeError(\\n      'The \\\"buf1\\\", \\\"buf2\\\" arguments must be one of type Buffer or Uint8Array'\\n    )\\n  }\\n\\n  if (a === b) return 0\\n\\n  var x = a.length\\n  var y = b.length\\n\\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\\n    if (a[i] !== b[i]) {\\n      x = a[i]\\n      y = b[i]\\n      break\\n    }\\n  }\\n\\n  if (x < y) return -1\\n  if (y < x) return 1\\n  return 0\\n}\\n\\nBuffer.isEncoding = function isEncoding (encoding) {\\n  switch (String(encoding).toLowerCase()) {\\n    case 'hex':\\n    case 'utf8':\\n    case 'utf-8':\\n    case 'ascii':\\n    case 'latin1':\\n    case 'binary':\\n    case 'base64':\\n    case 'ucs2':\\n    case 'ucs-2':\\n    case 'utf16le':\\n    case 'utf-16le':\\n      return true\\n    default:\\n      return false\\n  }\\n}\\n\\nBuffer.concat = function concat (list, length) {\\n  if (!Array.isArray(list)) {\\n    throw new TypeError('\\\"list\\\" argument must be an Array of Buffers')\\n  }\\n\\n  if (list.length === 0) {\\n    return Buffer.alloc(0)\\n  }\\n\\n  var i\\n  if (length === undefined) {\\n    length = 0\\n    for (i = 0; i < list.length; ++i) {\\n      length += list[i].length\\n    }\\n  }\\n\\n  var buffer = Buffer.allocUnsafe(length)\\n  var pos = 0\\n  for (i = 0; i < list.length; ++i) {\\n    var buf = list[i]\\n    if (isInstance(buf, Uint8Array)) {\\n      buf = Buffer.from(buf)\\n    }\\n    if (!Buffer.isBuffer(buf)) {\\n      throw new TypeError('\\\"list\\\" argument must be an Array of Buffers')\\n    }\\n    buf.copy(buffer, pos)\\n    pos += buf.length\\n  }\\n  return buffer\\n}\\n\\nfunction byteLength (string, encoding) {\\n  if (Buffer.isBuffer(string)) {\\n    return string.length\\n  }\\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\\n    return string.byteLength\\n  }\\n  if (typeof string !== 'string') {\\n    throw new TypeError(\\n      'The \\\"string\\\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\\n      'Received type ' + typeof string\\n    )\\n  }\\n\\n  var len = string.length\\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\\n  if (!mustMatch && len === 0) return 0\\n\\n  // Use a for loop to avoid recursion\\n  var loweredCase = false\\n  for (;;) {\\n    switch (encoding) {\\n      case 'ascii':\\n      case 'latin1':\\n      case 'binary':\\n        return len\\n      case 'utf8':\\n      case 'utf-8':\\n        return utf8ToBytes(string).length\\n      case 'ucs2':\\n      case 'ucs-2':\\n      case 'utf16le':\\n      case 'utf-16le':\\n        return len * 2\\n      case 'hex':\\n        return len >>> 1\\n      case 'base64':\\n        return base64ToBytes(string).length\\n      default:\\n        if (loweredCase) {\\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\\n        }\\n        encoding = ('' + encoding).toLowerCase()\\n        loweredCase = true\\n    }\\n  }\\n}\\nBuffer.byteLength = byteLength\\n\\nfunction slowToString (encoding, start, end) {\\n  var loweredCase = false\\n\\n  // No need to verify that \\\"this.length <= MAX_UINT32\\\" since it's a read-only\\n  // property of a typed array.\\n\\n  // This behaves neither like String nor Uint8Array in that we set start/end\\n  // to their upper/lower bounds if the value passed is out of range.\\n  // undefined is handled specially as per ECMA-262 6th Edition,\\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\\n  if (start === undefined || start < 0) {\\n    start = 0\\n  }\\n  // Return early if start > this.length. Done here to prevent potential uint32\\n  // coercion fail below.\\n  if (start > this.length) {\\n    return ''\\n  }\\n\\n  if (end === undefined || end > this.length) {\\n    end = this.length\\n  }\\n\\n  if (end <= 0) {\\n    return ''\\n  }\\n\\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\\n  end >>>= 0\\n  start >>>= 0\\n\\n  if (end <= start) {\\n    return ''\\n  }\\n\\n  if (!encoding) encoding = 'utf8'\\n\\n  while (true) {\\n    switch (encoding) {\\n      case 'hex':\\n        return hexSlice(this, start, end)\\n\\n      case 'utf8':\\n      case 'utf-8':\\n        return utf8Slice(this, start, end)\\n\\n      case 'ascii':\\n        return asciiSlice(this, start, end)\\n\\n      case 'latin1':\\n      case 'binary':\\n        return latin1Slice(this, start, end)\\n\\n      case 'base64':\\n        return base64Slice(this, start, end)\\n\\n      case 'ucs2':\\n      case 'ucs-2':\\n      case 'utf16le':\\n      case 'utf-16le':\\n        return utf16leSlice(this, start, end)\\n\\n      default:\\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\\n        encoding = (encoding + '').toLowerCase()\\n        loweredCase = true\\n    }\\n  }\\n}\\n\\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\\n// reliably in a browserify context because there could be multiple different\\n// copies of the 'buffer' package in use. This method works even for Buffer\\n// instances that were created from another copy of the `buffer` package.\\n// See: https://github.com/feross/buffer/issues/154\\nBuffer.prototype._isBuffer = true\\n\\nfunction swap (b, n, m) {\\n  var i = b[n]\\n  b[n] = b[m]\\n  b[m] = i\\n}\\n\\nBuffer.prototype.swap16 = function swap16 () {\\n  var len = this.length\\n  if (len % 2 !== 0) {\\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\\n  }\\n  for (var i = 0; i < len; i += 2) {\\n    swap(this, i, i + 1)\\n  }\\n  return this\\n}\\n\\nBuffer.prototype.swap32 = function swap32 () {\\n  var len = this.length\\n  if (len % 4 !== 0) {\\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\\n  }\\n  for (var i = 0; i < len; i += 4) {\\n    swap(this, i, i + 3)\\n    swap(this, i + 1, i + 2)\\n  }\\n  return this\\n}\\n\\nBuffer.prototype.swap64 = function swap64 () {\\n  var len = this.length\\n  if (len % 8 !== 0) {\\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\\n  }\\n  for (var i = 0; i < len; i += 8) {\\n    swap(this, i, i + 7)\\n    swap(this, i + 1, i + 6)\\n    swap(this, i + 2, i + 5)\\n    swap(this, i + 3, i + 4)\\n  }\\n  return this\\n}\\n\\nBuffer.prototype.toString = function toString () {\\n  var length = this.length\\n  if (length === 0) return ''\\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\\n  return slowToString.apply(this, arguments)\\n}\\n\\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\\n\\nBuffer.prototype.equals = function equals (b) {\\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\\n  if (this === b) return true\\n  return Buffer.compare(this, b) === 0\\n}\\n\\nBuffer.prototype.inspect = function inspect () {\\n  var str = ''\\n  var max = exports.INSPECT_MAX_BYTES\\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\\n  if (this.length > max) str += ' ... '\\n  return '<Buffer ' + str + '>'\\n}\\n\\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\\n  if (isInstance(target, Uint8Array)) {\\n    target = Buffer.from(target, target.offset, target.byteLength)\\n  }\\n  if (!Buffer.isBuffer(target)) {\\n    throw new TypeError(\\n      'The \\\"target\\\" argument must be one of type Buffer or Uint8Array. ' +\\n      'Received type ' + (typeof target)\\n    )\\n  }\\n\\n  if (start === undefined) {\\n    start = 0\\n  }\\n  if (end === undefined) {\\n    end = target ? target.length : 0\\n  }\\n  if (thisStart === undefined) {\\n    thisStart = 0\\n  }\\n  if (thisEnd === undefined) {\\n    thisEnd = this.length\\n  }\\n\\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\\n    throw new RangeError('out of range index')\\n  }\\n\\n  if (thisStart >= thisEnd && start >= end) {\\n    return 0\\n  }\\n  if (thisStart >= thisEnd) {\\n    return -1\\n  }\\n  if (start >= end) {\\n    return 1\\n  }\\n\\n  start >>>= 0\\n  end >>>= 0\\n  thisStart >>>= 0\\n  thisEnd >>>= 0\\n\\n  if (this === target) return 0\\n\\n  var x = thisEnd - thisStart\\n  var y = end - start\\n  var len = Math.min(x, y)\\n\\n  var thisCopy = this.slice(thisStart, thisEnd)\\n  var targetCopy = target.slice(start, end)\\n\\n  for (var i = 0; i < len; ++i) {\\n    if (thisCopy[i] !== targetCopy[i]) {\\n      x = thisCopy[i]\\n      y = targetCopy[i]\\n      break\\n    }\\n  }\\n\\n  if (x < y) return -1\\n  if (y < x) return 1\\n  return 0\\n}\\n\\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\\n//\\n// Arguments:\\n// - buffer - a Buffer to search\\n// - val - a string, Buffer, or number\\n// - byteOffset - an index into `buffer`; will be clamped to an int32\\n// - encoding - an optional encoding, relevant is val is a string\\n// - dir - true for indexOf, false for lastIndexOf\\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\\n  // Empty buffer means no match\\n  if (buffer.length === 0) return -1\\n\\n  // Normalize byteOffset\\n  if (typeof byteOffset === 'string') {\\n    encoding = byteOffset\\n    byteOffset = 0\\n  } else if (byteOffset > 0x7fffffff) {\\n    byteOffset = 0x7fffffff\\n  } else if (byteOffset < -0x80000000) {\\n    byteOffset = -0x80000000\\n  }\\n  byteOffset = +byteOffset // Coerce to Number.\\n  if (numberIsNaN(byteOffset)) {\\n    // byteOffset: it it's undefined, null, NaN, \\\"foo\\\", etc, search whole buffer\\n    byteOffset = dir ? 0 : (buffer.length - 1)\\n  }\\n\\n  // Normalize byteOffset: negative offsets start from the end of the buffer\\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\\n  if (byteOffset >= buffer.length) {\\n    if (dir) return -1\\n    else byteOffset = buffer.length - 1\\n  } else if (byteOffset < 0) {\\n    if (dir) byteOffset = 0\\n    else return -1\\n  }\\n\\n  // Normalize val\\n  if (typeof val === 'string') {\\n    val = Buffer.from(val, encoding)\\n  }\\n\\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\\n  if (Buffer.isBuffer(val)) {\\n    // Special case: looking for empty string/buffer always fails\\n    if (val.length === 0) {\\n      return -1\\n    }\\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\\n  } else if (typeof val === 'number') {\\n    val = val & 0xFF // Search for a byte value [0-255]\\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\\n      if (dir) {\\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\\n      } else {\\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\\n      }\\n    }\\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\\n  }\\n\\n  throw new TypeError('val must be string, number or Buffer')\\n}\\n\\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\\n  var indexSize = 1\\n  var arrLength = arr.length\\n  var valLength = val.length\\n\\n  if (encoding !== undefined) {\\n    encoding = String(encoding).toLowerCase()\\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\\n        encoding === 'utf16le' || encoding === 'utf-16le') {\\n      if (arr.length < 2 || val.length < 2) {\\n        return -1\\n      }\\n      indexSize = 2\\n      arrLength /= 2\\n      valLength /= 2\\n      byteOffset /= 2\\n    }\\n  }\\n\\n  function read (buf, i) {\\n    if (indexSize === 1) {\\n      return buf[i]\\n    } else {\\n      return buf.readUInt16BE(i * indexSize)\\n    }\\n  }\\n\\n  var i\\n  if (dir) {\\n    var foundIndex = -1\\n    for (i = byteOffset; i < arrLength; i++) {\\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\\n        if (foundIndex === -1) foundIndex = i\\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\\n      } else {\\n        if (foundIndex !== -1) i -= i - foundIndex\\n        foundIndex = -1\\n      }\\n    }\\n  } else {\\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\\n    for (i = byteOffset; i >= 0; i--) {\\n      var found = true\\n      for (var j = 0; j < valLength; j++) {\\n        if (read(arr, i + j) !== read(val, j)) {\\n          found = false\\n          break\\n        }\\n      }\\n      if (found) return i\\n    }\\n  }\\n\\n  return -1\\n}\\n\\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\\n  return this.indexOf(val, byteOffset, encoding) !== -1\\n}\\n\\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\\n}\\n\\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\\n}\\n\\nfunction hexWrite (buf, string, offset, length) {\\n  offset = Number(offset) || 0\\n  var remaining = buf.length - offset\\n  if (!length) {\\n    length = remaining\\n  } else {\\n    length = Number(length)\\n    if (length > remaining) {\\n      length = remaining\\n    }\\n  }\\n\\n  var strLen = string.length\\n\\n  if (length > strLen / 2) {\\n    length = strLen / 2\\n  }\\n  for (var i = 0; i < length; ++i) {\\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\\n    if (numberIsNaN(parsed)) return i\\n    buf[offset + i] = parsed\\n  }\\n  return i\\n}\\n\\nfunction utf8Write (buf, string, offset, length) {\\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\\n}\\n\\nfunction asciiWrite (buf, string, offset, length) {\\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\\n}\\n\\nfunction latin1Write (buf, string, offset, length) {\\n  return asciiWrite(buf, string, offset, length)\\n}\\n\\nfunction base64Write (buf, string, offset, length) {\\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\\n}\\n\\nfunction ucs2Write (buf, string, offset, length) {\\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\\n}\\n\\nBuffer.prototype.write = function write (string, offset, length, encoding) {\\n  // Buffer#write(string)\\n  if (offset === undefined) {\\n    encoding = 'utf8'\\n    length = this.length\\n    offset = 0\\n  // Buffer#write(string, encoding)\\n  } else if (length === undefined && typeof offset === 'string') {\\n    encoding = offset\\n    length = this.length\\n    offset = 0\\n  // Buffer#write(string, offset[, length][, encoding])\\n  } else if (isFinite(offset)) {\\n    offset = offset >>> 0\\n    if (isFinite(length)) {\\n      length = length >>> 0\\n      if (encoding === undefined) encoding = 'utf8'\\n    } else {\\n      encoding = length\\n      length = undefined\\n    }\\n  } else {\\n    throw new Error(\\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\\n    )\\n  }\\n\\n  var remaining = this.length - offset\\n  if (length === undefined || length > remaining) length = remaining\\n\\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\\n    throw new RangeError('Attempt to write outside buffer bounds')\\n  }\\n\\n  if (!encoding) encoding = 'utf8'\\n\\n  var loweredCase = false\\n  for (;;) {\\n    switch (encoding) {\\n      case 'hex':\\n        return hexWrite(this, string, offset, length)\\n\\n      case 'utf8':\\n      case 'utf-8':\\n        return utf8Write(this, string, offset, length)\\n\\n      case 'ascii':\\n        return asciiWrite(this, string, offset, length)\\n\\n      case 'latin1':\\n      case 'binary':\\n        return latin1Write(this, string, offset, length)\\n\\n      case 'base64':\\n        // Warning: maxLength not taken into account in base64Write\\n        return base64Write(this, string, offset, length)\\n\\n      case 'ucs2':\\n      case 'ucs-2':\\n      case 'utf16le':\\n      case 'utf-16le':\\n        return ucs2Write(this, string, offset, length)\\n\\n      default:\\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\\n        encoding = ('' + encoding).toLowerCase()\\n        loweredCase = true\\n    }\\n  }\\n}\\n\\nBuffer.prototype.toJSON = function toJSON () {\\n  return {\\n    type: 'Buffer',\\n    data: Array.prototype.slice.call(this._arr || this, 0)\\n  }\\n}\\n\\nfunction base64Slice (buf, start, end) {\\n  if (start === 0 && end === buf.length) {\\n    return base64.fromByteArray(buf)\\n  } else {\\n    return base64.fromByteArray(buf.slice(start, end))\\n  }\\n}\\n\\nfunction utf8Slice (buf, start, end) {\\n  end = Math.min(buf.length, end)\\n  var res = []\\n\\n  var i = start\\n  while (i < end) {\\n    var firstByte = buf[i]\\n    var codePoint = null\\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\\n      : (firstByte > 0xDF) ? 3\\n        : (firstByte > 0xBF) ? 2\\n          : 1\\n\\n    if (i + bytesPerSequence <= end) {\\n      var secondByte, thirdByte, fourthByte, tempCodePoint\\n\\n      switch (bytesPerSequence) {\\n        case 1:\\n          if (firstByte < 0x80) {\\n            codePoint = firstByte\\n          }\\n          break\\n        case 2:\\n          secondByte = buf[i + 1]\\n          if ((secondByte & 0xC0) === 0x80) {\\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\\n            if (tempCodePoint > 0x7F) {\\n              codePoint = tempCodePoint\\n            }\\n          }\\n          break\\n        case 3:\\n          secondByte = buf[i + 1]\\n          thirdByte = buf[i + 2]\\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\\n              codePoint = tempCodePoint\\n            }\\n          }\\n          break\\n        case 4:\\n          secondByte = buf[i + 1]\\n          thirdByte = buf[i + 2]\\n          fourthByte = buf[i + 3]\\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\\n              codePoint = tempCodePoint\\n            }\\n          }\\n      }\\n    }\\n\\n    if (codePoint === null) {\\n      // we did not generate a valid codePoint so insert a\\n      // replacement char (U+FFFD) and advance only 1 byte\\n      codePoint = 0xFFFD\\n      bytesPerSequence = 1\\n    } else if (codePoint > 0xFFFF) {\\n      // encode to utf16 (surrogate pair dance)\\n      codePoint -= 0x10000\\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\\n      codePoint = 0xDC00 | codePoint & 0x3FF\\n    }\\n\\n    res.push(codePoint)\\n    i += bytesPerSequence\\n  }\\n\\n  return decodeCodePointsArray(res)\\n}\\n\\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\\n// the lowest limit is Chrome, with 0x10000 args.\\n// We go 1 magnitude less, for safety\\nvar MAX_ARGUMENTS_LENGTH = 0x1000\\n\\nfunction decodeCodePointsArray (codePoints) {\\n  var len = codePoints.length\\n  if (len <= MAX_ARGUMENTS_LENGTH) {\\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\\n  }\\n\\n  // Decode in chunks to avoid \\\"call stack size exceeded\\\".\\n  var res = ''\\n  var i = 0\\n  while (i < len) {\\n    res += String.fromCharCode.apply(\\n      String,\\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\\n    )\\n  }\\n  return res\\n}\\n\\nfunction asciiSlice (buf, start, end) {\\n  var ret = ''\\n  end = Math.min(buf.length, end)\\n\\n  for (var i = start; i < end; ++i) {\\n    ret += String.fromCharCode(buf[i] & 0x7F)\\n  }\\n  return ret\\n}\\n\\nfunction latin1Slice (buf, start, end) {\\n  var ret = ''\\n  end = Math.min(buf.length, end)\\n\\n  for (var i = start; i < end; ++i) {\\n    ret += String.fromCharCode(buf[i])\\n  }\\n  return ret\\n}\\n\\nfunction hexSlice (buf, start, end) {\\n  var len = buf.length\\n\\n  if (!start || start < 0) start = 0\\n  if (!end || end < 0 || end > len) end = len\\n\\n  var out = ''\\n  for (var i = start; i < end; ++i) {\\n    out += toHex(buf[i])\\n  }\\n  return out\\n}\\n\\nfunction utf16leSlice (buf, start, end) {\\n  var bytes = buf.slice(start, end)\\n  var res = ''\\n  for (var i = 0; i < bytes.length; i += 2) {\\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\\n  }\\n  return res\\n}\\n\\nBuffer.prototype.slice = function slice (start, end) {\\n  var len = this.length\\n  start = ~~start\\n  end = end === undefined ? len : ~~end\\n\\n  if (start < 0) {\\n    start += len\\n    if (start < 0) start = 0\\n  } else if (start > len) {\\n    start = len\\n  }\\n\\n  if (end < 0) {\\n    end += len\\n    if (end < 0) end = 0\\n  } else if (end > len) {\\n    end = len\\n  }\\n\\n  if (end < start) end = start\\n\\n  var newBuf = this.subarray(start, end)\\n  // Return an augmented `Uint8Array` instance\\n  newBuf.__proto__ = Buffer.prototype\\n  return newBuf\\n}\\n\\n/*\\n * Need to make sure that buffer isn't trying to write out of bounds.\\n */\\nfunction checkOffset (offset, ext, length) {\\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\\n}\\n\\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\\n\\n  var val = this[offset]\\n  var mul = 1\\n  var i = 0\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    val += this[offset + i] * mul\\n  }\\n\\n  return val\\n}\\n\\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) {\\n    checkOffset(offset, byteLength, this.length)\\n  }\\n\\n  var val = this[offset + --byteLength]\\n  var mul = 1\\n  while (byteLength > 0 && (mul *= 0x100)) {\\n    val += this[offset + --byteLength] * mul\\n  }\\n\\n  return val\\n}\\n\\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 1, this.length)\\n  return this[offset]\\n}\\n\\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 2, this.length)\\n  return this[offset] | (this[offset + 1] << 8)\\n}\\n\\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 2, this.length)\\n  return (this[offset] << 8) | this[offset + 1]\\n}\\n\\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n\\n  return ((this[offset]) |\\n      (this[offset + 1] << 8) |\\n      (this[offset + 2] << 16)) +\\n      (this[offset + 3] * 0x1000000)\\n}\\n\\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n\\n  return (this[offset] * 0x1000000) +\\n    ((this[offset + 1] << 16) |\\n    (this[offset + 2] << 8) |\\n    this[offset + 3])\\n}\\n\\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\\n\\n  var val = this[offset]\\n  var mul = 1\\n  var i = 0\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    val += this[offset + i] * mul\\n  }\\n  mul *= 0x80\\n\\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\\n\\n  return val\\n}\\n\\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\\n\\n  var i = byteLength\\n  var mul = 1\\n  var val = this[offset + --i]\\n  while (i > 0 && (mul *= 0x100)) {\\n    val += this[offset + --i] * mul\\n  }\\n  mul *= 0x80\\n\\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\\n\\n  return val\\n}\\n\\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 1, this.length)\\n  if (!(this[offset] & 0x80)) return (this[offset])\\n  return ((0xff - this[offset] + 1) * -1)\\n}\\n\\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 2, this.length)\\n  var val = this[offset] | (this[offset + 1] << 8)\\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\\n}\\n\\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 2, this.length)\\n  var val = this[offset + 1] | (this[offset] << 8)\\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\\n}\\n\\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n\\n  return (this[offset]) |\\n    (this[offset + 1] << 8) |\\n    (this[offset + 2] << 16) |\\n    (this[offset + 3] << 24)\\n}\\n\\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n\\n  return (this[offset] << 24) |\\n    (this[offset + 1] << 16) |\\n    (this[offset + 2] << 8) |\\n    (this[offset + 3])\\n}\\n\\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n  return ieee754.read(this, offset, true, 23, 4)\\n}\\n\\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n  return ieee754.read(this, offset, false, 23, 4)\\n}\\n\\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 8, this.length)\\n  return ieee754.read(this, offset, true, 52, 8)\\n}\\n\\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 8, this.length)\\n  return ieee754.read(this, offset, false, 52, 8)\\n}\\n\\nfunction checkInt (buf, value, offset, ext, max, min) {\\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\\\"buffer\\\" argument must be a Buffer instance')\\n  if (value > max || value < min) throw new RangeError('\\\"value\\\" argument is out of bounds')\\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\\n}\\n\\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) {\\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\\n  }\\n\\n  var mul = 1\\n  var i = 0\\n  this[offset] = value & 0xFF\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    this[offset + i] = (value / mul) & 0xFF\\n  }\\n\\n  return offset + byteLength\\n}\\n\\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) {\\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\\n  }\\n\\n  var i = byteLength - 1\\n  var mul = 1\\n  this[offset + i] = value & 0xFF\\n  while (--i >= 0 && (mul *= 0x100)) {\\n    this[offset + i] = (value / mul) & 0xFF\\n  }\\n\\n  return offset + byteLength\\n}\\n\\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\\n  this[offset] = (value & 0xff)\\n  return offset + 1\\n}\\n\\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\\n  this[offset] = (value & 0xff)\\n  this[offset + 1] = (value >>> 8)\\n  return offset + 2\\n}\\n\\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\\n  this[offset] = (value >>> 8)\\n  this[offset + 1] = (value & 0xff)\\n  return offset + 2\\n}\\n\\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\\n  this[offset + 3] = (value >>> 24)\\n  this[offset + 2] = (value >>> 16)\\n  this[offset + 1] = (value >>> 8)\\n  this[offset] = (value & 0xff)\\n  return offset + 4\\n}\\n\\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\\n  this[offset] = (value >>> 24)\\n  this[offset + 1] = (value >>> 16)\\n  this[offset + 2] = (value >>> 8)\\n  this[offset + 3] = (value & 0xff)\\n  return offset + 4\\n}\\n\\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) {\\n    var limit = Math.pow(2, (8 * byteLength) - 1)\\n\\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\\n  }\\n\\n  var i = 0\\n  var mul = 1\\n  var sub = 0\\n  this[offset] = value & 0xFF\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\\n      sub = 1\\n    }\\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\\n  }\\n\\n  return offset + byteLength\\n}\\n\\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) {\\n    var limit = Math.pow(2, (8 * byteLength) - 1)\\n\\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\\n  }\\n\\n  var i = byteLength - 1\\n  var mul = 1\\n  var sub = 0\\n  this[offset + i] = value & 0xFF\\n  while (--i >= 0 && (mul *= 0x100)) {\\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\\n      sub = 1\\n    }\\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\\n  }\\n\\n  return offset + byteLength\\n}\\n\\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\\n  if (value < 0) value = 0xff + value + 1\\n  this[offset] = (value & 0xff)\\n  return offset + 1\\n}\\n\\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\\n  this[offset] = (value & 0xff)\\n  this[offset + 1] = (value >>> 8)\\n  return offset + 2\\n}\\n\\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\\n  this[offset] = (value >>> 8)\\n  this[offset + 1] = (value & 0xff)\\n  return offset + 2\\n}\\n\\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\\n  this[offset] = (value & 0xff)\\n  this[offset + 1] = (value >>> 8)\\n  this[offset + 2] = (value >>> 16)\\n  this[offset + 3] = (value >>> 24)\\n  return offset + 4\\n}\\n\\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\\n  if (value < 0) value = 0xffffffff + value + 1\\n  this[offset] = (value >>> 24)\\n  this[offset + 1] = (value >>> 16)\\n  this[offset + 2] = (value >>> 8)\\n  this[offset + 3] = (value & 0xff)\\n  return offset + 4\\n}\\n\\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\\n  if (offset < 0) throw new RangeError('Index out of range')\\n}\\n\\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) {\\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\\n  }\\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\\n  return offset + 4\\n}\\n\\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\\n  return writeFloat(this, value, offset, true, noAssert)\\n}\\n\\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\\n  return writeFloat(this, value, offset, false, noAssert)\\n}\\n\\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) {\\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\\n  }\\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\\n  return offset + 8\\n}\\n\\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\\n  return writeDouble(this, value, offset, true, noAssert)\\n}\\n\\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\\n  return writeDouble(this, value, offset, false, noAssert)\\n}\\n\\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\\n  if (!start) start = 0\\n  if (!end && end !== 0) end = this.length\\n  if (targetStart >= target.length) targetStart = target.length\\n  if (!targetStart) targetStart = 0\\n  if (end > 0 && end < start) end = start\\n\\n  // Copy 0 bytes; we're done\\n  if (end === start) return 0\\n  if (target.length === 0 || this.length === 0) return 0\\n\\n  // Fatal error conditions\\n  if (targetStart < 0) {\\n    throw new RangeError('targetStart out of bounds')\\n  }\\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\\n\\n  // Are we oob?\\n  if (end > this.length) end = this.length\\n  if (target.length - targetStart < end - start) {\\n    end = target.length - targetStart + start\\n  }\\n\\n  var len = end - start\\n\\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\\n    // Use built-in when available, missing from IE11\\n    this.copyWithin(targetStart, start, end)\\n  } else if (this === target && start < targetStart && targetStart < end) {\\n    // descending copy from end\\n    for (var i = len - 1; i >= 0; --i) {\\n      target[i + targetStart] = this[i + start]\\n    }\\n  } else {\\n    Uint8Array.prototype.set.call(\\n      target,\\n      this.subarray(start, end),\\n      targetStart\\n    )\\n  }\\n\\n  return len\\n}\\n\\n// Usage:\\n//    buffer.fill(number[, offset[, end]])\\n//    buffer.fill(buffer[, offset[, end]])\\n//    buffer.fill(string[, offset[, end]][, encoding])\\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\\n  // Handle string cases:\\n  if (typeof val === 'string') {\\n    if (typeof start === 'string') {\\n      encoding = start\\n      start = 0\\n      end = this.length\\n    } else if (typeof end === 'string') {\\n      encoding = end\\n      end = this.length\\n    }\\n    if (encoding !== undefined && typeof encoding !== 'string') {\\n      throw new TypeError('encoding must be a string')\\n    }\\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\\n      throw new TypeError('Unknown encoding: ' + encoding)\\n    }\\n    if (val.length === 1) {\\n      var code = val.charCodeAt(0)\\n      if ((encoding === 'utf8' && code < 128) ||\\n          encoding === 'latin1') {\\n        // Fast path: If `val` fits into a single byte, use that numeric value.\\n        val = code\\n      }\\n    }\\n  } else if (typeof val === 'number') {\\n    val = val & 255\\n  }\\n\\n  // Invalid ranges are not set to a default, so can range check early.\\n  if (start < 0 || this.length < start || this.length < end) {\\n    throw new RangeError('Out of range index')\\n  }\\n\\n  if (end <= start) {\\n    return this\\n  }\\n\\n  start = start >>> 0\\n  end = end === undefined ? this.length : end >>> 0\\n\\n  if (!val) val = 0\\n\\n  var i\\n  if (typeof val === 'number') {\\n    for (i = start; i < end; ++i) {\\n      this[i] = val\\n    }\\n  } else {\\n    var bytes = Buffer.isBuffer(val)\\n      ? val\\n      : Buffer.from(val, encoding)\\n    var len = bytes.length\\n    if (len === 0) {\\n      throw new TypeError('The value \\\"' + val +\\n        '\\\" is invalid for argument \\\"value\\\"')\\n    }\\n    for (i = 0; i < end - start; ++i) {\\n      this[i + start] = bytes[i % len]\\n    }\\n  }\\n\\n  return this\\n}\\n\\n// HELPER FUNCTIONS\\n// ================\\n\\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\\n\\nfunction base64clean (str) {\\n  // Node takes equal signs as end of the Base64 encoding\\n  str = str.split('=')[0]\\n  // Node strips out invalid characters like \\\\n and \\\\t from the string, base64-js does not\\n  str = str.trim().replace(INVALID_BASE64_RE, '')\\n  // Node converts strings with length < 2 to ''\\n  if (str.length < 2) return ''\\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\\n  while (str.length % 4 !== 0) {\\n    str = str + '='\\n  }\\n  return str\\n}\\n\\nfunction toHex (n) {\\n  if (n < 16) return '0' + n.toString(16)\\n  return n.toString(16)\\n}\\n\\nfunction utf8ToBytes (string, units) {\\n  units = units || Infinity\\n  var codePoint\\n  var length = string.length\\n  var leadSurrogate = null\\n  var bytes = []\\n\\n  for (var i = 0; i < length; ++i) {\\n    codePoint = string.charCodeAt(i)\\n\\n    // is surrogate component\\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\\n      // last char was a lead\\n      if (!leadSurrogate) {\\n        // no lead yet\\n        if (codePoint > 0xDBFF) {\\n          // unexpected trail\\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\\n          continue\\n        } else if (i + 1 === length) {\\n          // unpaired lead\\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\\n          continue\\n        }\\n\\n        // valid lead\\n        leadSurrogate = codePoint\\n\\n        continue\\n      }\\n\\n      // 2 leads in a row\\n      if (codePoint < 0xDC00) {\\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\\n        leadSurrogate = codePoint\\n        continue\\n      }\\n\\n      // valid surrogate pair\\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\\n    } else if (leadSurrogate) {\\n      // valid bmp char, but last char was a lead\\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\\n    }\\n\\n    leadSurrogate = null\\n\\n    // encode utf8\\n    if (codePoint < 0x80) {\\n      if ((units -= 1) < 0) break\\n      bytes.push(codePoint)\\n    } else if (codePoint < 0x800) {\\n      if ((units -= 2) < 0) break\\n      bytes.push(\\n        codePoint >> 0x6 | 0xC0,\\n        codePoint & 0x3F | 0x80\\n      )\\n    } else if (codePoint < 0x10000) {\\n      if ((units -= 3) < 0) break\\n      bytes.push(\\n        codePoint >> 0xC | 0xE0,\\n        codePoint >> 0x6 & 0x3F | 0x80,\\n        codePoint & 0x3F | 0x80\\n      )\\n    } else if (codePoint < 0x110000) {\\n      if ((units -= 4) < 0) break\\n      bytes.push(\\n        codePoint >> 0x12 | 0xF0,\\n        codePoint >> 0xC & 0x3F | 0x80,\\n        codePoint >> 0x6 & 0x3F | 0x80,\\n        codePoint & 0x3F | 0x80\\n      )\\n    } else {\\n      throw new Error('Invalid code point')\\n    }\\n  }\\n\\n  return bytes\\n}\\n\\nfunction asciiToBytes (str) {\\n  var byteArray = []\\n  for (var i = 0; i < str.length; ++i) {\\n    // Node's code seems to be doing this and not & 0x7F..\\n    byteArray.push(str.charCodeAt(i) & 0xFF)\\n  }\\n  return byteArray\\n}\\n\\nfunction utf16leToBytes (str, units) {\\n  var c, hi, lo\\n  var byteArray = []\\n  for (var i = 0; i < str.length; ++i) {\\n    if ((units -= 2) < 0) break\\n\\n    c = str.charCodeAt(i)\\n    hi = c >> 8\\n    lo = c % 256\\n    byteArray.push(lo)\\n    byteArray.push(hi)\\n  }\\n\\n  return byteArray\\n}\\n\\nfunction base64ToBytes (str) {\\n  return base64.toByteArray(base64clean(str))\\n}\\n\\nfunction blitBuffer (src, dst, offset, length) {\\n  for (var i = 0; i < length; ++i) {\\n    if ((i + offset >= dst.length) || (i >= src.length)) break\\n    dst[i + offset] = src[i]\\n  }\\n  return i\\n}\\n\\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\\n// the `instanceof` check but they should be treated as of that type.\\n// See: https://github.com/feross/buffer/issues/166\\nfunction isInstance (obj, type) {\\n  return obj instanceof type ||\\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\\n      obj.constructor.name === type.name)\\n}\\nfunction numberIsNaN (obj) {\\n  // For IE11 support\\n  return obj !== obj // eslint-disable-line no-self-compare\\n}\\n\\n}).call(this,require(\\\"buffer\\\").Buffer)\\n},{\\\"base64-js\\\":6,\\\"buffer\\\":7,\\\"ieee754\\\":36}],8:[function(require,module,exports){\\n'use strict'\\n\\nconst mh = require('multihashes')\\nconst { Buffer } = require('buffer')\\nvar CIDUtil = {\\n  /**\\n   * Test if the given input is a valid CID object.\\n   * Returns an error message if it is not.\\n   * Returns undefined if it is a valid CID.\\n   *\\n   * @param {any} other\\n   * @returns {string}\\n   */\\n  checkCIDComponents: function (other) {\\n    if (other == null) {\\n      return 'null values are not valid CIDs'\\n    }\\n\\n    if (!(other.version === 0 || other.version === 1)) {\\n      return 'Invalid version, must be a number equal to 1 or 0'\\n    }\\n\\n    if (typeof other.codec !== 'string') {\\n      return 'codec must be string'\\n    }\\n\\n    if (other.version === 0) {\\n      if (other.codec !== 'dag-pb') {\\n        return \\\"codec must be 'dag-pb' for CIDv0\\\"\\n      }\\n      if (other.multibaseName !== 'base58btc') {\\n        return \\\"multibaseName must be 'base58btc' for CIDv0\\\"\\n      }\\n    }\\n\\n    if (!Buffer.isBuffer(other.multihash)) {\\n      return 'multihash must be a Buffer'\\n    }\\n\\n    try {\\n      mh.validate(other.multihash)\\n    } catch (err) {\\n      let errorMsg = err.message\\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\\n        errorMsg = 'Multihash validation failed'\\n      }\\n      return errorMsg\\n    }\\n  }\\n}\\n\\nmodule.exports = CIDUtil\\n\\n},{\\\"buffer\\\":7,\\\"multihashes\\\":64}],9:[function(require,module,exports){\\n'use strict'\\n\\nconst { Buffer } = require('buffer')\\nconst mh = require('multihashes')\\nconst multibase = require('multibase')\\nconst multicodec = require('multicodec')\\nconst codecs = require('multicodec/src/base-table.json')\\nconst CIDUtil = require('./cid-util')\\nconst withIs = require('class-is')\\n\\n/**\\n * @typedef {Object} SerializedCID\\n * @param {string} codec\\n * @param {number} version\\n * @param {Buffer} multihash\\n */\\n\\n/**\\n * Test if the given input is a CID.\\n * @function isCID\\n * @memberof CID\\n * @static\\n * @param {any} other\\n * @returns {bool}\\n */\\n\\n/**\\n * Class representing a CID `<mbase><version><mcodec><mhash>`\\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\\n * @class CID\\n */\\nclass CID {\\n  /**\\n   * Create a new CID.\\n   *\\n   * The algorithm for argument input is roughly:\\n   * ```\\n   * if (cid)\\n   *   -> create a copy\\n   * else if (str)\\n   *   if (1st char is on multibase table) -> CID String\\n   *   else -> bs58 encoded multihash\\n   * else if (Buffer)\\n   *   if (1st byte is 0 or 1) -> CID\\n   *   else -> multihash\\n   * else if (Number)\\n   *   -> construct CID by parts\\n   * ```\\n   *\\n   * @param {string|Buffer|CID} version\\n   * @param {string} [codec]\\n   * @param {Buffer} [multihash]\\n   * @param {string} [multibaseName]\\n   *\\n   * @example\\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\\n   * new CID(<cidStr>)\\n   * new CID(<cid.buffer>)\\n   * new CID(<multihash>)\\n   * new CID(<bs58 encoded multihash>)\\n   * new CID(<cid>)\\n   */\\n  constructor (version, codec, multihash, multibaseName) {\\n    if (_CID.isCID(version)) {\\n      // version is an exising CID instance\\n      const cid = version\\n      this.version = cid.version\\n      this.codec = cid.codec\\n      this.multihash = Buffer.from(cid.multihash)\\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\\n      return\\n    }\\n\\n    if (typeof version === 'string') {\\n      // e.g. 'base32' or false\\n      const baseName = multibase.isEncoded(version)\\n      if (baseName) {\\n        // version is a CID String encoded with multibase, so v1\\n        const cid = multibase.decode(version)\\n        this.version = parseInt(cid.slice(0, 1).toString('hex'), 16)\\n        this.codec = multicodec.getCodec(cid.slice(1))\\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\\n        this.multibaseName = baseName\\n      } else {\\n        // version is a base58btc string multihash, so v0\\n        this.version = 0\\n        this.codec = 'dag-pb'\\n        this.multihash = mh.fromB58String(version)\\n        this.multibaseName = 'base58btc'\\n      }\\n      CID.validateCID(this)\\n      Object.defineProperty(this, 'string', { value: version })\\n      return\\n    }\\n\\n    if (Buffer.isBuffer(version)) {\\n      const firstByte = version.slice(0, 1)\\n      const v = parseInt(firstByte.toString('hex'), 16)\\n      if (v === 1) {\\n        // version is a CID buffer\\n        const cid = version\\n        this.version = v\\n        this.codec = multicodec.getCodec(cid.slice(1))\\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\\n        this.multibaseName = 'base32'\\n      } else {\\n        // version is a raw multihash buffer, so v0\\n        this.version = 0\\n        this.codec = 'dag-pb'\\n        this.multihash = version\\n        this.multibaseName = 'base58btc'\\n      }\\n      CID.validateCID(this)\\n      return\\n    }\\n\\n    // otherwise, assemble the CID from the parameters\\n\\n    /**\\n     * @type {number}\\n     */\\n    this.version = version\\n\\n    /**\\n     * @type {string}\\n     */\\n    this.codec = codec\\n\\n    /**\\n     * @type {Buffer}\\n     */\\n    this.multihash = multihash\\n\\n    /**\\n     * @type {string}\\n     */\\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\\n\\n    CID.validateCID(this)\\n  }\\n\\n  /**\\n   * The CID as a `Buffer`\\n   *\\n   * @return {Buffer}\\n   * @readonly\\n   *\\n   * @memberOf CID\\n   */\\n  get buffer () {\\n    let buffer = this._buffer\\n\\n    if (!buffer) {\\n      if (this.version === 0) {\\n        buffer = this.multihash\\n      } else if (this.version === 1) {\\n        buffer = Buffer.concat([\\n          Buffer.from('01', 'hex'),\\n          multicodec.getCodeVarint(this.codec),\\n          this.multihash\\n        ])\\n      } else {\\n        throw new Error('unsupported version')\\n      }\\n\\n      // Cache this buffer so it doesn't have to be recreated\\n      Object.defineProperty(this, '_buffer', { value: buffer })\\n    }\\n\\n    return buffer\\n  }\\n\\n  /**\\n   * Get the prefix of the CID.\\n   *\\n   * @returns {Buffer}\\n   * @readonly\\n   */\\n  get prefix () {\\n    return Buffer.concat([\\n      Buffer.from(`0${this.version}`, 'hex'),\\n      multicodec.getCodeVarint(this.codec),\\n      mh.prefix(this.multihash)\\n    ])\\n  }\\n\\n  /**\\n   * Convert to a CID of version `0`.\\n   *\\n   * @returns {CID}\\n   */\\n  toV0 () {\\n    if (this.codec !== 'dag-pb') {\\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\\n    }\\n\\n    const { name, length } = mh.decode(this.multihash)\\n\\n    if (name !== 'sha2-256') {\\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\\n    }\\n\\n    if (length !== 32) {\\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\\n    }\\n\\n    return new _CID(0, this.codec, this.multihash)\\n  }\\n\\n  /**\\n   * Convert to a CID of version `1`.\\n   *\\n   * @returns {CID}\\n   */\\n  toV1 () {\\n    return new _CID(1, this.codec, this.multihash)\\n  }\\n\\n  /**\\n   * Encode the CID into a string.\\n   *\\n   * @param {string} [base=this.multibaseName] - Base encoding to use.\\n   * @returns {string}\\n   */\\n  toBaseEncodedString (base = this.multibaseName) {\\n    if (this.string && base === this.multibaseName) {\\n      return this.string\\n    }\\n    let str = null\\n    if (this.version === 0) {\\n      if (base !== 'base58btc') {\\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\\n      }\\n      str = mh.toB58String(this.multihash)\\n    } else if (this.version === 1) {\\n      str = multibase.encode(base, this.buffer).toString()\\n    } else {\\n      throw new Error('unsupported version')\\n    }\\n    if (base === this.multibaseName) {\\n      // cache the string value\\n      Object.defineProperty(this, 'string', { value: str })\\n    }\\n    return str\\n  }\\n\\n  /**\\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\\n   *\\n   * @returns {String}\\n   */\\n  [Symbol.for('nodejs.util.inspect.custom')] () {\\n    return 'CID(' + this.toString() + ')'\\n  }\\n\\n  toString (base) {\\n    return this.toBaseEncodedString(base)\\n  }\\n\\n  /**\\n   * Serialize to a plain object.\\n   *\\n   * @returns {SerializedCID}\\n   */\\n  toJSON () {\\n    return {\\n      codec: this.codec,\\n      version: this.version,\\n      hash: this.multihash\\n    }\\n  }\\n\\n  /**\\n   * Compare equality with another CID.\\n   *\\n   * @param {CID} other\\n   * @returns {bool}\\n   */\\n  equals (other) {\\n    return this.codec === other.codec &&\\n      this.version === other.version &&\\n      this.multihash.equals(other.multihash)\\n  }\\n\\n  /**\\n   * Test if the given input is a valid CID object.\\n   * Throws if it is not.\\n   *\\n   * @param {any} other\\n   * @returns {void}\\n   */\\n  static validateCID (other) {\\n    const errorMsg = CIDUtil.checkCIDComponents(other)\\n    if (errorMsg) {\\n      throw new Error(errorMsg)\\n    }\\n  }\\n}\\n\\nconst _CID = withIs(CID, {\\n  className: 'CID',\\n  symbolName: '@ipld/js-cid/CID'\\n})\\n\\n_CID.codecs = codecs\\n\\nmodule.exports = _CID\\n\\n},{\\\"./cid-util\\\":8,\\\"buffer\\\":7,\\\"class-is\\\":10,\\\"multibase\\\":55,\\\"multicodec\\\":58,\\\"multicodec/src/base-table.json\\\":56,\\\"multihashes\\\":64}],10:[function(require,module,exports){\\n'use strict';\\n\\nfunction withIs(Class, { className, symbolName }) {\\n    const symbol = Symbol.for(symbolName);\\n\\n    const ClassIsWrapper = {\\n        // The code below assigns the class wrapper to an object to trick\\n        // JavaScript engines to show the name of the extended class when\\n        // logging an instances.\\n        // We are assigning an anonymous class (class wrapper) to the object\\n        // with key `className` to keep the correct name.\\n        // If this is not supported it falls back to logging `ClassIsWrapper`.\\n        [className]: class extends Class {\\n            constructor(...args) {\\n                super(...args);\\n                Object.defineProperty(this, symbol, { value: true });\\n            }\\n\\n            get [Symbol.toStringTag]() {\\n                return className;\\n            }\\n        },\\n    }[className];\\n\\n    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);\\n\\n    return ClassIsWrapper;\\n}\\n\\nfunction withIsProto(Class, { className, symbolName, withoutNew }) {\\n    const symbol = Symbol.for(symbolName);\\n\\n    /* eslint-disable object-shorthand */\\n    const ClassIsWrapper = {\\n        [className]: function (...args) {\\n            if (withoutNew && !(this instanceof ClassIsWrapper)) {\\n                return new ClassIsWrapper(...args);\\n            }\\n\\n            const _this = Class.call(this, ...args) || this;\\n\\n            if (_this && !_this[symbol]) {\\n                Object.defineProperty(_this, symbol, { value: true });\\n            }\\n\\n            return _this;\\n        },\\n    }[className];\\n    /* eslint-enable object-shorthand */\\n\\n    ClassIsWrapper.prototype = Object.create(Class.prototype);\\n    ClassIsWrapper.prototype.constructor = ClassIsWrapper;\\n\\n    Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {\\n        get() {\\n            return className;\\n        },\\n    });\\n\\n    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);\\n\\n    return ClassIsWrapper;\\n}\\n\\nmodule.exports = withIs;\\nmodule.exports.proto = withIsProto;\\n\\n},{}],11:[function(require,module,exports){\\nmodule.exports={\\n  \\\"identity\\\": 0,\\n  \\\"ip4\\\": 4,\\n  \\\"tcp\\\": 6,\\n  \\\"sha1\\\": 17,\\n  \\\"sha2-256\\\": 18,\\n  \\\"sha2-512\\\": 19,\\n  \\\"sha3-512\\\": 20,\\n  \\\"sha3-384\\\": 21,\\n  \\\"sha3-256\\\": 22,\\n  \\\"sha3-224\\\": 23,\\n  \\\"shake-128\\\": 24,\\n  \\\"shake-256\\\": 25,\\n  \\\"keccak-224\\\": 26,\\n  \\\"keccak-256\\\": 27,\\n  \\\"keccak-384\\\": 28,\\n  \\\"keccak-512\\\": 29,\\n  \\\"dccp\\\": 33,\\n  \\\"murmur3-128\\\": 34,\\n  \\\"murmur3-32\\\": 35,\\n  \\\"ip6\\\": 41,\\n  \\\"ip6zone\\\": 42,\\n  \\\"path\\\": 47,\\n  \\\"multicodec\\\": 48,\\n  \\\"multihash\\\": 49,\\n  \\\"multiaddr\\\": 50,\\n  \\\"multibase\\\": 51,\\n  \\\"dns\\\": 53,\\n  \\\"dns4\\\": 54,\\n  \\\"dns6\\\": 55,\\n  \\\"dnsaddr\\\": 56,\\n  \\\"protobuf\\\": 80,\\n  \\\"cbor\\\": 81,\\n  \\\"raw\\\": 85,\\n  \\\"dbl-sha2-256\\\": 86,\\n  \\\"rlp\\\": 96,\\n  \\\"bencode\\\": 99,\\n  \\\"dag-pb\\\": 112,\\n  \\\"dag-cbor\\\": 113,\\n  \\\"libp2p-key\\\": 114,\\n  \\\"git-raw\\\": 120,\\n  \\\"torrent-info\\\": 123,\\n  \\\"torrent-file\\\": 124,\\n  \\\"leofcoin-block\\\": 129,\\n  \\\"leofcoin-tx\\\": 130,\\n  \\\"leofcoin-pr\\\": 131,\\n  \\\"sctp\\\": 132,\\n  \\\"eth-block\\\": 144,\\n  \\\"eth-block-list\\\": 145,\\n  \\\"eth-tx-trie\\\": 146,\\n  \\\"eth-tx\\\": 147,\\n  \\\"eth-tx-receipt-trie\\\": 148,\\n  \\\"eth-tx-receipt\\\": 149,\\n  \\\"eth-state-trie\\\": 150,\\n  \\\"eth-account-snapshot\\\": 151,\\n  \\\"eth-storage-trie\\\": 152,\\n  \\\"bitcoin-block\\\": 176,\\n  \\\"bitcoin-tx\\\": 177,\\n  \\\"zcash-block\\\": 192,\\n  \\\"zcash-tx\\\": 193,\\n  \\\"stellar-block\\\": 208,\\n  \\\"stellar-tx\\\": 209,\\n  \\\"md4\\\": 212,\\n  \\\"md5\\\": 213,\\n  \\\"bmt\\\": 214,\\n  \\\"decred-block\\\": 224,\\n  \\\"decred-tx\\\": 225,\\n  \\\"ipld-ns\\\": 226,\\n  \\\"ipfs-ns\\\": 227,\\n  \\\"swarm-ns\\\": 228,\\n  \\\"ipns-ns\\\": 229,\\n  \\\"zeronet\\\": 230,\\n  \\\"ed25519-pub\\\": 237,\\n  \\\"dash-block\\\": 240,\\n  \\\"dash-tx\\\": 241,\\n  \\\"swarm-manifest\\\": 250,\\n  \\\"swarm-feed\\\": 251,\\n  \\\"udp\\\": 273,\\n  \\\"p2p-webrtc-star\\\": 275,\\n  \\\"p2p-webrtc-direct\\\": 276,\\n  \\\"p2p-stardust\\\": 277,\\n  \\\"p2p-circuit\\\": 290,\\n  \\\"dag-json\\\": 297,\\n  \\\"udt\\\": 301,\\n  \\\"utp\\\": 302,\\n  \\\"unix\\\": 400,\\n  \\\"p2p\\\": 421,\\n  \\\"ipfs\\\": 421,\\n  \\\"https\\\": 443,\\n  \\\"onion\\\": 444,\\n  \\\"onion3\\\": 445,\\n  \\\"garlic64\\\": 446,\\n  \\\"garlic32\\\": 447,\\n  \\\"tls\\\": 448,\\n  \\\"quic\\\": 460,\\n  \\\"ws\\\": 477,\\n  \\\"wss\\\": 478,\\n  \\\"p2p-websocket-star\\\": 479,\\n  \\\"http\\\": 480,\\n  \\\"json\\\": 512,\\n  \\\"messagepack\\\": 513,\\n  \\\"x11\\\": 4352,\\n  \\\"blake2b-8\\\": 45569,\\n  \\\"blake2b-16\\\": 45570,\\n  \\\"blake2b-24\\\": 45571,\\n  \\\"blake2b-32\\\": 45572,\\n  \\\"blake2b-40\\\": 45573,\\n  \\\"blake2b-48\\\": 45574,\\n  \\\"blake2b-56\\\": 45575,\\n  \\\"blake2b-64\\\": 45576,\\n  \\\"blake2b-72\\\": 45577,\\n  \\\"blake2b-80\\\": 45578,\\n  \\\"blake2b-88\\\": 45579,\\n  \\\"blake2b-96\\\": 45580,\\n  \\\"blake2b-104\\\": 45581,\\n  \\\"blake2b-112\\\": 45582,\\n  \\\"blake2b-120\\\": 45583,\\n  \\\"blake2b-128\\\": 45584,\\n  \\\"blake2b-136\\\": 45585,\\n  \\\"blake2b-144\\\": 45586,\\n  \\\"blake2b-152\\\": 45587,\\n  \\\"blake2b-160\\\": 45588,\\n  \\\"blake2b-168\\\": 45589,\\n  \\\"blake2b-176\\\": 45590,\\n  \\\"blake2b-184\\\": 45591,\\n  \\\"blake2b-192\\\": 45592,\\n  \\\"blake2b-200\\\": 45593,\\n  \\\"blake2b-208\\\": 45594,\\n  \\\"blake2b-216\\\": 45595,\\n  \\\"blake2b-224\\\": 45596,\\n  \\\"blake2b-232\\\": 45597,\\n  \\\"blake2b-240\\\": 45598,\\n  \\\"blake2b-248\\\": 45599,\\n  \\\"blake2b-256\\\": 45600,\\n  \\\"blake2b-264\\\": 45601,\\n  \\\"blake2b-272\\\": 45602,\\n  \\\"blake2b-280\\\": 45603,\\n  \\\"blake2b-288\\\": 45604,\\n  \\\"blake2b-296\\\": 45605,\\n  \\\"blake2b-304\\\": 45606,\\n  \\\"blake2b-312\\\": 45607,\\n  \\\"blake2b-320\\\": 45608,\\n  \\\"blake2b-328\\\": 45609,\\n  \\\"blake2b-336\\\": 45610,\\n  \\\"blake2b-344\\\": 45611,\\n  \\\"blake2b-352\\\": 45612,\\n  \\\"blake2b-360\\\": 45613,\\n  \\\"blake2b-368\\\": 45614,\\n  \\\"blake2b-376\\\": 45615,\\n  \\\"blake2b-384\\\": 45616,\\n  \\\"blake2b-392\\\": 45617,\\n  \\\"blake2b-400\\\": 45618,\\n  \\\"blake2b-408\\\": 45619,\\n  \\\"blake2b-416\\\": 45620,\\n  \\\"blake2b-424\\\": 45621,\\n  \\\"blake2b-432\\\": 45622,\\n  \\\"blake2b-440\\\": 45623,\\n  \\\"blake2b-448\\\": 45624,\\n  \\\"blake2b-456\\\": 45625,\\n  \\\"blake2b-464\\\": 45626,\\n  \\\"blake2b-472\\\": 45627,\\n  \\\"blake2b-480\\\": 45628,\\n  \\\"blake2b-488\\\": 45629,\\n  \\\"blake2b-496\\\": 45630,\\n  \\\"blake2b-504\\\": 45631,\\n  \\\"blake2b-512\\\": 45632,\\n  \\\"blake2s-8\\\": 45633,\\n  \\\"blake2s-16\\\": 45634,\\n  \\\"blake2s-24\\\": 45635,\\n  \\\"blake2s-32\\\": 45636,\\n  \\\"blake2s-40\\\": 45637,\\n  \\\"blake2s-48\\\": 45638,\\n  \\\"blake2s-56\\\": 45639,\\n  \\\"blake2s-64\\\": 45640,\\n  \\\"blake2s-72\\\": 45641,\\n  \\\"blake2s-80\\\": 45642,\\n  \\\"blake2s-88\\\": 45643,\\n  \\\"blake2s-96\\\": 45644,\\n  \\\"blake2s-104\\\": 45645,\\n  \\\"blake2s-112\\\": 45646,\\n  \\\"blake2s-120\\\": 45647,\\n  \\\"blake2s-128\\\": 45648,\\n  \\\"blake2s-136\\\": 45649,\\n  \\\"blake2s-144\\\": 45650,\\n  \\\"blake2s-152\\\": 45651,\\n  \\\"blake2s-160\\\": 45652,\\n  \\\"blake2s-168\\\": 45653,\\n  \\\"blake2s-176\\\": 45654,\\n  \\\"blake2s-184\\\": 45655,\\n  \\\"blake2s-192\\\": 45656,\\n  \\\"blake2s-200\\\": 45657,\\n  \\\"blake2s-208\\\": 45658,\\n  \\\"blake2s-216\\\": 45659,\\n  \\\"blake2s-224\\\": 45660,\\n  \\\"blake2s-232\\\": 45661,\\n  \\\"blake2s-240\\\": 45662,\\n  \\\"blake2s-248\\\": 45663,\\n  \\\"blake2s-256\\\": 45664,\\n  \\\"skein256-8\\\": 45825,\\n  \\\"skein256-16\\\": 45826,\\n  \\\"skein256-24\\\": 45827,\\n  \\\"skein256-32\\\": 45828,\\n  \\\"skein256-40\\\": 45829,\\n  \\\"skein256-48\\\": 45830,\\n  \\\"skein256-56\\\": 45831,\\n  \\\"skein256-64\\\": 45832,\\n  \\\"skein256-72\\\": 45833,\\n  \\\"skein256-80\\\": 45834,\\n  \\\"skein256-88\\\": 45835,\\n  \\\"skein256-96\\\": 45836,\\n  \\\"skein256-104\\\": 45837,\\n  \\\"skein256-112\\\": 45838,\\n  \\\"skein256-120\\\": 45839,\\n  \\\"skein256-128\\\": 45840,\\n  \\\"skein256-136\\\": 45841,\\n  \\\"skein256-144\\\": 45842,\\n  \\\"skein256-152\\\": 45843,\\n  \\\"skein256-160\\\": 45844,\\n  \\\"skein256-168\\\": 45845,\\n  \\\"skein256-176\\\": 45846,\\n  \\\"skein256-184\\\": 45847,\\n  \\\"skein256-192\\\": 45848,\\n  \\\"skein256-200\\\": 45849,\\n  \\\"skein256-208\\\": 45850,\\n  \\\"skein256-216\\\": 45851,\\n  \\\"skein256-224\\\": 45852,\\n  \\\"skein256-232\\\": 45853,\\n  \\\"skein256-240\\\": 45854,\\n  \\\"skein256-248\\\": 45855,\\n  \\\"skein256-256\\\": 45856,\\n  \\\"skein512-8\\\": 45857,\\n  \\\"skein512-16\\\": 45858,\\n  \\\"skein512-24\\\": 45859,\\n  \\\"skein512-32\\\": 45860,\\n  \\\"skein512-40\\\": 45861,\\n  \\\"skein512-48\\\": 45862,\\n  \\\"skein512-56\\\": 45863,\\n  \\\"skein512-64\\\": 45864,\\n  \\\"skein512-72\\\": 45865,\\n  \\\"skein512-80\\\": 45866,\\n  \\\"skein512-88\\\": 45867,\\n  \\\"skein512-96\\\": 45868,\\n  \\\"skein512-104\\\": 45869,\\n  \\\"skein512-112\\\": 45870,\\n  \\\"skein512-120\\\": 45871,\\n  \\\"skein512-128\\\": 45872,\\n  \\\"skein512-136\\\": 45873,\\n  \\\"skein512-144\\\": 45874,\\n  \\\"skein512-152\\\": 45875,\\n  \\\"skein512-160\\\": 45876,\\n  \\\"skein512-168\\\": 45877,\\n  \\\"skein512-176\\\": 45878,\\n  \\\"skein512-184\\\": 45879,\\n  \\\"skein512-192\\\": 45880,\\n  \\\"skein512-200\\\": 45881,\\n  \\\"skein512-208\\\": 45882,\\n  \\\"skein512-216\\\": 45883,\\n  \\\"skein512-224\\\": 45884,\\n  \\\"skein512-232\\\": 45885,\\n  \\\"skein512-240\\\": 45886,\\n  \\\"skein512-248\\\": 45887,\\n  \\\"skein512-256\\\": 45888,\\n  \\\"skein512-264\\\": 45889,\\n  \\\"skein512-272\\\": 45890,\\n  \\\"skein512-280\\\": 45891,\\n  \\\"skein512-288\\\": 45892,\\n  \\\"skein512-296\\\": 45893,\\n  \\\"skein512-304\\\": 45894,\\n  \\\"skein512-312\\\": 45895,\\n  \\\"skein512-320\\\": 45896,\\n  \\\"skein512-328\\\": 45897,\\n  \\\"skein512-336\\\": 45898,\\n  \\\"skein512-344\\\": 45899,\\n  \\\"skein512-352\\\": 45900,\\n  \\\"skein512-360\\\": 45901,\\n  \\\"skein512-368\\\": 45902,\\n  \\\"skein512-376\\\": 45903,\\n  \\\"skein512-384\\\": 45904,\\n  \\\"skein512-392\\\": 45905,\\n  \\\"skein512-400\\\": 45906,\\n  \\\"skein512-408\\\": 45907,\\n  \\\"skein512-416\\\": 45908,\\n  \\\"skein512-424\\\": 45909,\\n  \\\"skein512-432\\\": 45910,\\n  \\\"skein512-440\\\": 45911,\\n  \\\"skein512-448\\\": 45912,\\n  \\\"skein512-456\\\": 45913,\\n  \\\"skein512-464\\\": 45914,\\n  \\\"skein512-472\\\": 45915,\\n  \\\"skein512-480\\\": 45916,\\n  \\\"skein512-488\\\": 45917,\\n  \\\"skein512-496\\\": 45918,\\n  \\\"skein512-504\\\": 45919,\\n  \\\"skein512-512\\\": 45920,\\n  \\\"skein1024-8\\\": 45921,\\n  \\\"skein1024-16\\\": 45922,\\n  \\\"skein1024-24\\\": 45923,\\n  \\\"skein1024-32\\\": 45924,\\n  \\\"skein1024-40\\\": 45925,\\n  \\\"skein1024-48\\\": 45926,\\n  \\\"skein1024-56\\\": 45927,\\n  \\\"skein1024-64\\\": 45928,\\n  \\\"skein1024-72\\\": 45929,\\n  \\\"skein1024-80\\\": 45930,\\n  \\\"skein1024-88\\\": 45931,\\n  \\\"skein1024-96\\\": 45932,\\n  \\\"skein1024-104\\\": 45933,\\n  \\\"skein1024-112\\\": 45934,\\n  \\\"skein1024-120\\\": 45935,\\n  \\\"skein1024-128\\\": 45936,\\n  \\\"skein1024-136\\\": 45937,\\n  \\\"skein1024-144\\\": 45938,\\n  \\\"skein1024-152\\\": 45939,\\n  \\\"skein1024-160\\\": 45940,\\n  \\\"skein1024-168\\\": 45941,\\n  \\\"skein1024-176\\\": 45942,\\n  \\\"skein1024-184\\\": 45943,\\n  \\\"skein1024-192\\\": 45944,\\n  \\\"skein1024-200\\\": 45945,\\n  \\\"skein1024-208\\\": 45946,\\n  \\\"skein1024-216\\\": 45947,\\n  \\\"skein1024-224\\\": 45948,\\n  \\\"skein1024-232\\\": 45949,\\n  \\\"skein1024-240\\\": 45950,\\n  \\\"skein1024-248\\\": 45951,\\n  \\\"skein1024-256\\\": 45952,\\n  \\\"skein1024-264\\\": 45953,\\n  \\\"skein1024-272\\\": 45954,\\n  \\\"skein1024-280\\\": 45955,\\n  \\\"skein1024-288\\\": 45956,\\n  \\\"skein1024-296\\\": 45957,\\n  \\\"skein1024-304\\\": 45958,\\n  \\\"skein1024-312\\\": 45959,\\n  \\\"skein1024-320\\\": 45960,\\n  \\\"skein1024-328\\\": 45961,\\n  \\\"skein1024-336\\\": 45962,\\n  \\\"skein1024-344\\\": 45963,\\n  \\\"skein1024-352\\\": 45964,\\n  \\\"skein1024-360\\\": 45965,\\n  \\\"skein1024-368\\\": 45966,\\n  \\\"skein1024-376\\\": 45967,\\n  \\\"skein1024-384\\\": 45968,\\n  \\\"skein1024-392\\\": 45969,\\n  \\\"skein1024-400\\\": 45970,\\n  \\\"skein1024-408\\\": 45971,\\n  \\\"skein1024-416\\\": 45972,\\n  \\\"skein1024-424\\\": 45973,\\n  \\\"skein1024-432\\\": 45974,\\n  \\\"skein1024-440\\\": 45975,\\n  \\\"skein1024-448\\\": 45976,\\n  \\\"skein1024-456\\\": 45977,\\n  \\\"skein1024-464\\\": 45978,\\n  \\\"skein1024-472\\\": 45979,\\n  \\\"skein1024-480\\\": 45980,\\n  \\\"skein1024-488\\\": 45981,\\n  \\\"skein1024-496\\\": 45982,\\n  \\\"skein1024-504\\\": 45983,\\n  \\\"skein1024-512\\\": 45984,\\n  \\\"skein1024-520\\\": 45985,\\n  \\\"skein1024-528\\\": 45986,\\n  \\\"skein1024-536\\\": 45987,\\n  \\\"skein1024-544\\\": 45988,\\n  \\\"skein1024-552\\\": 45989,\\n  \\\"skein1024-560\\\": 45990,\\n  \\\"skein1024-568\\\": 45991,\\n  \\\"skein1024-576\\\": 45992,\\n  \\\"skein1024-584\\\": 45993,\\n  \\\"skein1024-592\\\": 45994,\\n  \\\"skein1024-600\\\": 45995,\\n  \\\"skein1024-608\\\": 45996,\\n  \\\"skein1024-616\\\": 45997,\\n  \\\"skein1024-624\\\": 45998,\\n  \\\"skein1024-632\\\": 45999,\\n  \\\"skein1024-640\\\": 46000,\\n  \\\"skein1024-648\\\": 46001,\\n  \\\"skein1024-656\\\": 46002,\\n  \\\"skein1024-664\\\": 46003,\\n  \\\"skein1024-672\\\": 46004,\\n  \\\"skein1024-680\\\": 46005,\\n  \\\"skein1024-688\\\": 46006,\\n  \\\"skein1024-696\\\": 46007,\\n  \\\"skein1024-704\\\": 46008,\\n  \\\"skein1024-712\\\": 46009,\\n  \\\"skein1024-720\\\": 46010,\\n  \\\"skein1024-728\\\": 46011,\\n  \\\"skein1024-736\\\": 46012,\\n  \\\"skein1024-744\\\": 46013,\\n  \\\"skein1024-752\\\": 46014,\\n  \\\"skein1024-760\\\": 46015,\\n  \\\"skein1024-768\\\": 46016,\\n  \\\"skein1024-776\\\": 46017,\\n  \\\"skein1024-784\\\": 46018,\\n  \\\"skein1024-792\\\": 46019,\\n  \\\"skein1024-800\\\": 46020,\\n  \\\"skein1024-808\\\": 46021,\\n  \\\"skein1024-816\\\": 46022,\\n  \\\"skein1024-824\\\": 46023,\\n  \\\"skein1024-832\\\": 46024,\\n  \\\"skein1024-840\\\": 46025,\\n  \\\"skein1024-848\\\": 46026,\\n  \\\"skein1024-856\\\": 46027,\\n  \\\"skein1024-864\\\": 46028,\\n  \\\"skein1024-872\\\": 46029,\\n  \\\"skein1024-880\\\": 46030,\\n  \\\"skein1024-888\\\": 46031,\\n  \\\"skein1024-896\\\": 46032,\\n  \\\"skein1024-904\\\": 46033,\\n  \\\"skein1024-912\\\": 46034,\\n  \\\"skein1024-920\\\": 46035,\\n  \\\"skein1024-928\\\": 46036,\\n  \\\"skein1024-936\\\": 46037,\\n  \\\"skein1024-944\\\": 46038,\\n  \\\"skein1024-952\\\": 46039,\\n  \\\"skein1024-960\\\": 46040,\\n  \\\"skein1024-968\\\": 46041,\\n  \\\"skein1024-976\\\": 46042,\\n  \\\"skein1024-984\\\": 46043,\\n  \\\"skein1024-992\\\": 46044,\\n  \\\"skein1024-1000\\\": 46045,\\n  \\\"skein1024-1008\\\": 46046,\\n  \\\"skein1024-1016\\\": 46047,\\n  \\\"skein1024-1024\\\": 46048,\\n  \\\"holochain-adr-v0\\\": 8417572,\\n  \\\"holochain-adr-v1\\\": 8483108,\\n  \\\"holochain-key-v0\\\": 9728292,\\n  \\\"holochain-key-v1\\\": 9793828,\\n  \\\"holochain-sig-v0\\\": 10645796,\\n  \\\"holochain-sig-v1\\\": 10711332\\n}\\n},{}],12:[function(require,module,exports){\\n'use strict'\\n\\nconst table = require('./base-table.json')\\n\\n// map for codecConstant -> code\\nconst constants = {}\\n\\nfor (const [name, code] of Object.entries(table)) {\\n  constants[name.toUpperCase().replace(/-/g, '_')] = code\\n}\\n\\nmodule.exports = Object.freeze(constants)\\n\\n},{\\\"./base-table.json\\\":11}],13:[function(require,module,exports){\\n/**\\n * Implementation of the multicodec specification.\\n *\\n * @module multicodec\\n * @example\\n * const multicodec = require('multicodec')\\n *\\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\\n * // prefixedProtobuf 0x50...\\n *\\n */\\n'use strict'\\n\\nconst { Buffer } = require('buffer')\\nconst varint = require('varint')\\nconst intTable = require('./int-table')\\nconst codecNameToCodeVarint = require('./varint-table')\\nconst util = require('./util')\\n\\nexports = module.exports\\n\\n/**\\n * Prefix a buffer with a multicodec-packed.\\n *\\n * @param {string|number} multicodecStrOrCode\\n * @param {Buffer} data\\n * @returns {Buffer}\\n */\\nexports.addPrefix = (multicodecStrOrCode, data) => {\\n  let prefix\\n\\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\\n    prefix = util.varintBufferEncode(multicodecStrOrCode)\\n  } else {\\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\\n    } else {\\n      throw new Error('multicodec not recognized')\\n    }\\n  }\\n  return Buffer.concat([prefix, data])\\n}\\n\\n/**\\n * Decapsulate the multicodec-packed prefix from the data.\\n *\\n * @param {Buffer} data\\n * @returns {Buffer}\\n */\\nexports.rmPrefix = (data) => {\\n  varint.decode(data)\\n  return data.slice(varint.decode.bytes)\\n}\\n\\n/**\\n * Get the codec of the prefixed data.\\n * @param {Buffer} prefixedData\\n * @returns {string}\\n */\\nexports.getCodec = (prefixedData) => {\\n  const code = varint.decode(prefixedData)\\n  const codecName = intTable.get(code)\\n  if (codecName === undefined) {\\n    throw new Error(`Code ${code} not found`)\\n  }\\n  return codecName\\n}\\n\\n/**\\n * Get the name of the codec.\\n * @param {number} codec\\n * @returns {string}\\n */\\nexports.getName = (codec) => {\\n  return intTable.get(codec)\\n}\\n\\n/**\\n * Get the code of the codec\\n * @param {string} name\\n * @returns {number}\\n */\\nexports.getNumber = (name) => {\\n  const code = codecNameToCodeVarint[name]\\n  if (code === undefined) {\\n    throw new Error('Codec `' + name + '` not found')\\n  }\\n  return util.varintBufferDecode(code)[0]\\n}\\n\\n/**\\n * Get the code of the prefixed data.\\n * @param {Buffer} prefixedData\\n * @returns {number}\\n */\\nexports.getCode = (prefixedData) => {\\n  return varint.decode(prefixedData)\\n}\\n\\n/**\\n * Get the code as varint of a codec name.\\n * @param {string} codecName\\n * @returns {Buffer}\\n */\\nexports.getCodeVarint = (codecName) => {\\n  const code = codecNameToCodeVarint[codecName]\\n  if (code === undefined) {\\n    throw new Error('Codec `' + codecName + '` not found')\\n  }\\n  return code\\n}\\n\\n/**\\n * Get the varint of a code.\\n * @param {Number} code\\n * @returns {Array.<number>}\\n */\\nexports.getVarint = (code) => {\\n  return varint.encode(code)\\n}\\n\\n// Make the constants top-level constants\\nconst constants = require('./constants')\\nObject.assign(exports, constants)\\n\\n// Human friendly names for printing, e.g. in error messages\\nexports.print = require('./print')\\n\\n},{\\\"./constants\\\":12,\\\"./int-table\\\":14,\\\"./print\\\":15,\\\"./util\\\":16,\\\"./varint-table\\\":17,\\\"buffer\\\":7,\\\"varint\\\":86}],14:[function(require,module,exports){\\n'use strict'\\nconst baseTable = require('./base-table.json')\\n\\n// map for hexString -> codecName\\nconst nameTable = new Map()\\n\\nfor (const encodingName in baseTable) {\\n  const code = baseTable[encodingName]\\n  nameTable.set(code, encodingName)\\n}\\n\\nmodule.exports = Object.freeze(nameTable)\\n\\n},{\\\"./base-table.json\\\":11}],15:[function(require,module,exports){\\n'use strict'\\n\\nconst table = require('./base-table.json')\\n\\n// map for code -> print friendly name\\nconst tableByCode = {}\\n\\nfor (const [name, code] of Object.entries(table)) {\\n  if (tableByCode[code] === undefined) tableByCode[code] = name\\n}\\n\\nmodule.exports = Object.freeze(tableByCode)\\n\\n},{\\\"./base-table.json\\\":11}],16:[function(require,module,exports){\\n'use strict'\\nconst varint = require('varint')\\nconst { Buffer } = require('buffer')\\n\\nmodule.exports = {\\n  numberToBuffer,\\n  bufferToNumber,\\n  varintBufferEncode,\\n  varintBufferDecode,\\n  varintEncode\\n}\\n\\nfunction bufferToNumber (buf) {\\n  return parseInt(buf.toString('hex'), 16)\\n}\\n\\nfunction numberToBuffer (num) {\\n  let hexString = num.toString(16)\\n  if (hexString.length % 2 === 1) {\\n    hexString = '0' + hexString\\n  }\\n  return Buffer.from(hexString, 'hex')\\n}\\n\\nfunction varintBufferEncode (input) {\\n  return Buffer.from(varint.encode(bufferToNumber(input)))\\n}\\n\\nfunction varintBufferDecode (input) {\\n  return numberToBuffer(varint.decode(input))\\n}\\n\\nfunction varintEncode (num) {\\n  return Buffer.from(varint.encode(num))\\n}\\n\\n},{\\\"buffer\\\":7,\\\"varint\\\":86}],17:[function(require,module,exports){\\n'use strict'\\n\\nconst baseTable = require('./base-table.json')\\nconst varintEncode = require('./util').varintEncode\\n\\n// map for codecName -> codeVarintBuffer\\nconst varintTable = {}\\n\\nfor (const encodingName in baseTable) {\\n  const code = baseTable[encodingName]\\n  varintTable[encodingName] = varintEncode(code)\\n}\\n\\nmodule.exports = Object.freeze(varintTable)\\n\\n},{\\\"./base-table.json\\\":11,\\\"./util\\\":16}],18:[function(require,module,exports){\\narguments[4][8][0].apply(exports,arguments)\\n},{\\\"buffer\\\":7,\\\"dup\\\":8,\\\"multihashes\\\":64}],19:[function(require,module,exports){\\narguments[4][9][0].apply(exports,arguments)\\n},{\\\"./cid-util\\\":18,\\\"buffer\\\":7,\\\"class-is\\\":10,\\\"dup\\\":9,\\\"multibase\\\":25,\\\"multicodec\\\":13,\\\"multicodec/src/base-table.json\\\":11,\\\"multihashes\\\":64}],20:[function(require,module,exports){\\n'use strict'\\n\\nclass Base {\\n  constructor (name, code, implementation, alphabet) {\\n    this.name = name\\n    this.code = code\\n    this.alphabet = alphabet\\n    if (implementation && alphabet) {\\n      this.engine = implementation(alphabet)\\n    }\\n  }\\n\\n  encode (stringOrBuffer) {\\n    return this.engine.encode(stringOrBuffer)\\n  }\\n\\n  decode (stringOrBuffer) {\\n    return this.engine.decode(stringOrBuffer)\\n  }\\n\\n  isImplemented () {\\n    return this.engine\\n  }\\n}\\n\\nmodule.exports = Base\\n\\n},{}],21:[function(require,module,exports){\\n'use strict'\\nconst { Buffer } = require('buffer')\\n\\nmodule.exports = function base16 (alphabet) {\\n  return {\\n    encode (input) {\\n      if (typeof input === 'string') {\\n        return Buffer.from(input).toString('hex')\\n      }\\n      return input.toString('hex')\\n    },\\n    decode (input) {\\n      for (const char of input) {\\n        if (alphabet.indexOf(char) < 0) {\\n          throw new Error('invalid base16 character')\\n        }\\n      }\\n      return Buffer.from(input, 'hex')\\n    }\\n  }\\n}\\n\\n},{\\\"buffer\\\":7}],22:[function(require,module,exports){\\n'use strict'\\n\\nfunction decode (input, alphabet) {\\n  input = input.replace(new RegExp('=', 'g'), '')\\n  const length = input.length\\n\\n  let bits = 0\\n  let value = 0\\n\\n  let index = 0\\n  const output = new Uint8Array((length * 5 / 8) | 0)\\n\\n  for (let i = 0; i < length; i++) {\\n    value = (value << 5) | alphabet.indexOf(input[i])\\n    bits += 5\\n\\n    if (bits >= 8) {\\n      output[index++] = (value >>> (bits - 8)) & 255\\n      bits -= 8\\n    }\\n  }\\n\\n  return output.buffer\\n}\\n\\nfunction encode (buffer, alphabet) {\\n  const length = buffer.byteLength\\n  const view = new Uint8Array(buffer)\\n  const padding = alphabet.indexOf('=') === alphabet.length - 1\\n\\n  if (padding) {\\n    alphabet = alphabet.substring(0, alphabet.length - 1)\\n  }\\n\\n  let bits = 0\\n  let value = 0\\n  let output = ''\\n\\n  for (let i = 0; i < length; i++) {\\n    value = (value << 8) | view[i]\\n    bits += 8\\n\\n    while (bits >= 5) {\\n      output += alphabet[(value >>> (bits - 5)) & 31]\\n      bits -= 5\\n    }\\n  }\\n\\n  if (bits > 0) {\\n    output += alphabet[(value << (5 - bits)) & 31]\\n  }\\n\\n  if (padding) {\\n    while ((output.length % 8) !== 0) {\\n      output += '='\\n    }\\n  }\\n\\n  return output\\n}\\n\\nmodule.exports = function base32 (alphabet) {\\n  return {\\n    encode (input) {\\n      if (typeof input === 'string') {\\n        return encode(Uint8Array.from(input), alphabet)\\n      }\\n\\n      return encode(input, alphabet)\\n    },\\n    decode (input) {\\n      for (const char of input) {\\n        if (alphabet.indexOf(char) < 0) {\\n          throw new Error('invalid base32 character')\\n        }\\n      }\\n\\n      return decode(input, alphabet)\\n    }\\n  }\\n}\\n\\n},{}],23:[function(require,module,exports){\\n'use strict'\\nconst { Buffer } = require('buffer')\\n\\nmodule.exports = function base64 (alphabet) {\\n  // The alphabet is only used to know:\\n  //   1. If padding is enabled (must contain '=')\\n  //   2. If the output must be url-safe (must contain '-' and '_')\\n  //   3. If the input of the output function is valid\\n  // The alphabets from RFC 4648 are always used.\\n  const padding = alphabet.indexOf('=') > -1\\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\\n\\n  return {\\n    encode (input) {\\n      let output = ''\\n\\n      if (typeof input === 'string') {\\n        output = Buffer.from(input).toString('base64')\\n      } else {\\n        output = input.toString('base64')\\n      }\\n\\n      if (url) {\\n        output = output.replace(/\\\\+/g, '-').replace(/\\\\//g, '_')\\n      }\\n\\n      const pad = output.indexOf('=')\\n      if (pad > 0 && !padding) {\\n        output = output.substring(0, pad)\\n      }\\n\\n      return output\\n    },\\n    decode (input) {\\n      for (const char of input) {\\n        if (alphabet.indexOf(char) < 0) {\\n          throw new Error('invalid base64 character')\\n        }\\n      }\\n\\n      return Buffer.from(input, 'base64')\\n    }\\n  }\\n}\\n\\n},{\\\"buffer\\\":7}],24:[function(require,module,exports){\\n'use strict'\\n\\nconst Base = require('./base.js')\\nconst baseX = require('base-x')\\nconst base16 = require('./base16')\\nconst base32 = require('./base32')\\nconst base64 = require('./base64')\\n\\n// name, code, implementation, alphabet\\nconst constants = [\\n  ['base1', '1', '', '1'],\\n  ['base2', '0', baseX, '01'],\\n  ['base8', '7', baseX, '01234567'],\\n  ['base10', '9', baseX, '0123456789'],\\n  ['base16', 'f', base16, '0123456789abcdef'],\\n  ['base32', 'b', base32, 'abcdefghijklmnopqrstuvwxyz234567'],\\n  ['base32pad', 'c', base32, 'abcdefghijklmnopqrstuvwxyz234567='],\\n  ['base32hex', 'v', base32, '0123456789abcdefghijklmnopqrstuv'],\\n  ['base32hexpad', 't', base32, '0123456789abcdefghijklmnopqrstuv='],\\n  ['base32z', 'h', base32, 'ybndrfg8ejkmcpqxot1uwisza345h769'],\\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\\n  ['base64', 'm', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\\n  ['base64pad', 'M', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\\n  ['base64url', 'u', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\\n  ['base64urlpad', 'U', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\\n]\\n\\nconst names = constants.reduce((prev, tupple) => {\\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\\n  return prev\\n}, {})\\n\\nconst codes = constants.reduce((prev, tupple) => {\\n  prev[tupple[1]] = names[tupple[0]]\\n  return prev\\n}, {})\\n\\nmodule.exports = {\\n  names: names,\\n  codes: codes\\n}\\n\\n},{\\\"./base.js\\\":20,\\\"./base16\\\":21,\\\"./base32\\\":22,\\\"./base64\\\":23,\\\"base-x\\\":5}],25:[function(require,module,exports){\\n/**\\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\\n * @module Multibase\\n */\\n'use strict'\\n\\nconst { Buffer } = require('buffer')\\nconst constants = require('./constants')\\n\\nexports = module.exports = multibase\\nexports.encode = encode\\nexports.decode = decode\\nexports.isEncoded = isEncoded\\nexports.names = Object.freeze(Object.keys(constants.names))\\nexports.codes = Object.freeze(Object.keys(constants.codes))\\n\\nconst errNotSupported = new Error('Unsupported encoding')\\n\\n/**\\n * Create a new buffer with the multibase varint+code.\\n *\\n * @param {string|number} nameOrCode - The multibase name or code number.\\n * @param {Buffer} buf - The data to be prefixed with multibase.\\n * @memberof Multibase\\n * @returns {Buffer}\\n */\\nfunction multibase (nameOrCode, buf) {\\n  if (!buf) {\\n    throw new Error('requires an encoded buffer')\\n  }\\n  const base = getBase(nameOrCode)\\n  const codeBuf = Buffer.from(base.code)\\n\\n  const name = base.name\\n  validEncode(name, buf)\\n  return Buffer.concat([codeBuf, buf])\\n}\\n\\n/**\\n * Encode data with the specified base and add the multibase prefix.\\n *\\n * @param {string|number} nameOrCode - The multibase name or code number.\\n * @param {Buffer} buf - The data to be encoded.\\n * @returns {Buffer}\\n * @memberof Multibase\\n */\\nfunction encode (nameOrCode, buf) {\\n  const base = getBase(nameOrCode)\\n  const name = base.name\\n\\n  return multibase(name, Buffer.from(base.encode(buf)))\\n}\\n\\n/**\\n * Takes a buffer or string encoded with multibase header, decodes it and\\n * returns the decoded buffer\\n *\\n * @param {Buffer|string} bufOrString\\n * @returns {Buffer}\\n * @memberof Multibase\\n *\\n */\\nfunction decode (bufOrString) {\\n  if (Buffer.isBuffer(bufOrString)) {\\n    bufOrString = bufOrString.toString()\\n  }\\n\\n  const code = bufOrString.substring(0, 1)\\n  bufOrString = bufOrString.substring(1, bufOrString.length)\\n\\n  if (typeof bufOrString === 'string') {\\n    bufOrString = Buffer.from(bufOrString)\\n  }\\n\\n  const base = getBase(code)\\n  return Buffer.from(base.decode(bufOrString.toString()))\\n}\\n\\n/**\\n * Is the given data multibase encoded?\\n *\\n * @param {Buffer|string} bufOrString\\n * @returns {boolean}\\n * @memberof Multibase\\n */\\nfunction isEncoded (bufOrString) {\\n  if (Buffer.isBuffer(bufOrString)) {\\n    bufOrString = bufOrString.toString()\\n  }\\n\\n  // Ensure bufOrString is a string\\n  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {\\n    return false\\n  }\\n\\n  const code = bufOrString.substring(0, 1)\\n  try {\\n    const base = getBase(code)\\n    return base.name\\n  } catch (err) {\\n    return false\\n  }\\n}\\n\\n/**\\n * @param {string} name\\n * @param {Buffer} buf\\n * @private\\n * @returns {undefined}\\n */\\nfunction validEncode (name, buf) {\\n  const base = getBase(name)\\n  base.decode(buf.toString())\\n}\\n\\nfunction getBase (nameOrCode) {\\n  let base\\n\\n  if (constants.names[nameOrCode]) {\\n    base = constants.names[nameOrCode]\\n  } else if (constants.codes[nameOrCode]) {\\n    base = constants.codes[nameOrCode]\\n  } else {\\n    throw errNotSupported\\n  }\\n\\n  if (!base.isImplemented()) {\\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet')\\n  }\\n\\n  return base\\n}\\n\\n},{\\\"./constants\\\":24,\\\"buffer\\\":7}],26:[function(require,module,exports){\\narguments[4][11][0].apply(exports,arguments)\\n},{\\\"dup\\\":11}],27:[function(require,module,exports){\\narguments[4][12][0].apply(exports,arguments)\\n},{\\\"./base-table.json\\\":26,\\\"dup\\\":12}],28:[function(require,module,exports){\\n(function (Buffer){\\n/**\\n * Implementation of the multicodec specification.\\n *\\n * @module multicodec\\n * @example\\n * const multicodec = require('multicodec')\\n *\\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\\n * // prefixedProtobuf 0x50...\\n *\\n */\\n'use strict'\\n\\nconst varint = require('varint')\\nconst intTable = require('./int-table')\\nconst codecNameToCodeVarint = require('./varint-table')\\nconst util = require('./util')\\n\\nexports = module.exports\\n\\n/**\\n * Prefix a buffer with a multicodec-packed.\\n *\\n * @param {string|number} multicodecStrOrCode\\n * @param {Buffer} data\\n * @returns {Buffer}\\n */\\nexports.addPrefix = (multicodecStrOrCode, data) => {\\n  let prefix\\n\\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\\n    prefix = util.varintBufferEncode(multicodecStrOrCode)\\n  } else {\\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\\n    } else {\\n      throw new Error('multicodec not recognized')\\n    }\\n  }\\n  return Buffer.concat([prefix, data])\\n}\\n\\n/**\\n * Decapsulate the multicodec-packed prefix from the data.\\n *\\n * @param {Buffer} data\\n * @returns {Buffer}\\n */\\nexports.rmPrefix = (data) => {\\n  varint.decode(data)\\n  return data.slice(varint.decode.bytes)\\n}\\n\\n/**\\n * Get the codec of the prefixed data.\\n * @param {Buffer} prefixedData\\n * @returns {string}\\n */\\nexports.getCodec = (prefixedData) => {\\n  const code = varint.decode(prefixedData)\\n  const codecName = intTable.get(code)\\n  if (codecName === undefined) {\\n    throw new Error(`Code ${code} not found`)\\n  }\\n  return codecName\\n}\\n\\n/**\\n * Get the name of the codec.\\n * @param {number} codec\\n * @returns {string}\\n */\\nexports.getName = (codec) => {\\n  return intTable.get(codec)\\n}\\n\\n/**\\n * Get the code of the codec\\n * @param {string} name\\n * @returns {number}\\n */\\nexports.getNumber = (name) => {\\n  const code = codecNameToCodeVarint[name]\\n  if (code === undefined) {\\n    throw new Error('Codec `' + name + '` not found')\\n  }\\n  return util.varintBufferDecode(code)[0]\\n}\\n\\n/**\\n * Get the code of the prefixed data.\\n * @param {Buffer} prefixedData\\n * @returns {number}\\n */\\nexports.getCode = (prefixedData) => {\\n  return varint.decode(prefixedData)\\n}\\n\\n/**\\n * Get the code as varint of a codec name.\\n * @param {string} codecName\\n * @returns {Buffer}\\n */\\nexports.getCodeVarint = (codecName) => {\\n  const code = codecNameToCodeVarint[codecName]\\n  if (code === undefined) {\\n    throw new Error('Codec `' + codecName + '` not found')\\n  }\\n  return code\\n}\\n\\n/**\\n * Get the varint of a code.\\n * @param {Number} code\\n * @returns {Array.<number>}\\n */\\nexports.getVarint = (code) => {\\n  return varint.encode(code)\\n}\\n\\n// Make the constants top-level constants\\nconst constants = require('./constants')\\nObject.assign(exports, constants)\\n\\n// Human friendly names for printing, e.g. in error messages\\nexports.print = require('./print')\\n\\n}).call(this,require(\\\"buffer\\\").Buffer)\\n},{\\\"./constants\\\":27,\\\"./int-table\\\":29,\\\"./print\\\":30,\\\"./util\\\":31,\\\"./varint-table\\\":32,\\\"buffer\\\":7,\\\"varint\\\":86}],29:[function(require,module,exports){\\narguments[4][14][0].apply(exports,arguments)\\n},{\\\"./base-table.json\\\":26,\\\"dup\\\":14}],30:[function(require,module,exports){\\narguments[4][15][0].apply(exports,arguments)\\n},{\\\"./base-table.json\\\":26,\\\"dup\\\":15}],31:[function(require,module,exports){\\n(function (Buffer){\\n'use strict'\\nconst varint = require('varint')\\n\\nmodule.exports = {\\n  numberToBuffer,\\n  bufferToNumber,\\n  varintBufferEncode,\\n  varintBufferDecode,\\n  varintEncode\\n}\\n\\nfunction bufferToNumber (buf) {\\n  return parseInt(buf.toString('hex'), 16)\\n}\\n\\nfunction numberToBuffer (num) {\\n  let hexString = num.toString(16)\\n  if (hexString.length % 2 === 1) {\\n    hexString = '0' + hexString\\n  }\\n  return Buffer.from(hexString, 'hex')\\n}\\n\\nfunction varintBufferEncode (input) {\\n  return Buffer.from(varint.encode(bufferToNumber(input)))\\n}\\n\\nfunction varintBufferDecode (input) {\\n  return numberToBuffer(varint.decode(input))\\n}\\n\\nfunction varintEncode (num) {\\n  return Buffer.from(varint.encode(num))\\n}\\n\\n}).call(this,require(\\\"buffer\\\").Buffer)\\n},{\\\"buffer\\\":7,\\\"varint\\\":86}],32:[function(require,module,exports){\\narguments[4][17][0].apply(exports,arguments)\\n},{\\\"./base-table.json\\\":26,\\\"./util\\\":31,\\\"dup\\\":17}],33:[function(require,module,exports){\\n/*\\r\\n\\tISC License\\r\\n\\r\\n\\tCopyright (c) 2019, Pierre-Louis Despaigne\\r\\n\\r\\n\\tPermission to use, copy, modify, and/or distribute this software for any\\r\\n\\tpurpose with or without fee is hereby granted, provided that the above\\r\\n\\tcopyright notice and this permission notice appear in all copies.\\r\\n\\r\\n\\tTHE SOFTWARE IS PROVIDED \\\"AS IS\\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\r\\n\\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\r\\n\\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\r\\n\\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\r\\n\\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\r\\n\\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\r\\n\\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\r\\n*/\\r\\n\\r\\nconst CID = require('cids');\\r\\n\\r\\n/**\\r\\n * Take any ipfsHash and convert it to a CID v1 encoded in base32.\\r\\n * @param {string} ipfsHash a regular ipfs hash either a cid v0 or v1 (v1 will remain unchanged)\\r\\n * @return {string} the resulting ipfs hash as a cid v1\\r\\n */\\r\\nconst cidV0ToV1Base32 = (ipfsHash) => {\\r\\n\\tlet cid = new CID(ipfsHash);\\r\\n\\tif (cid.version === 0) {\\r\\n\\t\\tcid = cid.toV1();\\r\\n\\t}\\r\\n\\treturn cid.toString('base32');\\r\\n}\\r\\n\\r\\nexports.cidV0ToV1Base32 = cidV0ToV1Base32;\\r\\n\\n},{\\\"cids\\\":19}],34:[function(require,module,exports){\\n/*\\r\\n\\tISC License\\r\\n\\r\\n\\tCopyright (c) 2019, Pierre-Louis Despaigne\\r\\n\\r\\n\\tPermission to use, copy, modify, and/or distribute this software for any\\r\\n\\tpurpose with or without fee is hereby granted, provided that the above\\r\\n\\tcopyright notice and this permission notice appear in all copies.\\r\\n\\r\\n\\tTHE SOFTWARE IS PROVIDED \\\"AS IS\\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\r\\n\\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\r\\n\\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\r\\n\\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\r\\n\\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\r\\n\\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\r\\n\\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\r\\n*/\\r\\n\\r\\nconst multiC = require('multicodec');\\r\\n\\r\\nconst { hexStringToBuffer, profiles } = require('./profiles');\\r\\nconst { cidV0ToV1Base32 } = require('./helpers');\\r\\n\\r\\nmodule.exports = {\\r\\n\\r\\n\\t//export some helpers functions\\r\\n\\thelpers: {\\r\\n\\t\\tcidV0ToV1Base32,\\r\\n\\t},\\r\\n\\r\\n\\t/**\\r\\n\\t* Decode a Content Hash.\\r\\n\\t* @param {string} hash an hex string containing a content hash\\r\\n\\t* @return {string} the decoded content\\r\\n\\t*/\\r\\n\\tdecode: function (contentHash) {\\r\\n\\t\\tconst buffer = hexStringToBuffer(contentHash);\\r\\n\\t\\tconst codec = multiC.getCodec(buffer);\\r\\n\\t\\tconst value = multiC.rmPrefix(buffer);\\r\\n\\t\\tlet profile = profiles[codec];\\r\\n\\t\\tif (!profile) profile = profiles['default'];\\r\\n\\t\\treturn profile.decode(value);\\r\\n\\t},\\r\\n\\r\\n\\t/**\\r\\n\\t* Encode an IPFS address into a content hash\\r\\n\\t* @param {string} ipfsHash string containing an IPFS address\\r\\n\\t* @return {string} the resulting content hash\\r\\n\\t*/\\r\\n\\tfromIpfs: function (ipfsHash) {\\r\\n\\t\\treturn this.encode('ipfs-ns', ipfsHash);\\r\\n\\t},\\r\\n\\r\\n\\t/**\\r\\n\\t* Encode a Swarm address into a content hash\\r\\n\\t* @param {string} swarmHash string containing a Swarm address\\r\\n\\t* @return {string} the resulting content hash\\r\\n\\t*/\\r\\n\\tfromSwarm: function (swarmHash) {\\r\\n\\t\\treturn this.encode('swarm-ns', swarmHash);\\r\\n\\t},\\r\\n\\r\\n\\t/**\\r\\n\\t* General purpose encoding function\\r\\n  * @param {string} codec \\r\\n  * @param {string} value \\r\\n  */\\r\\n\\tencode: function (codec, value) {\\r\\n\\t\\tlet profile = profiles[codec];\\r\\n\\t\\tif (!profile) profile = profiles['default'];\\r\\n\\t\\tconst encodedValue = profile.encode(value);\\r\\n\\t\\treturn multiC.addPrefix(codec, encodedValue).toString('hex');\\r\\n\\t},\\r\\n\\r\\n\\t/**\\r\\n\\t* Extract the codec of a content hash\\r\\n\\t* @param {string} hash hex string containing a content hash\\r\\n\\t* @return {string} the extracted codec\\r\\n\\t*/\\r\\n\\tgetCodec: function (hash) {\\r\\n\\t\\tlet buffer = hexStringToBuffer(hash);\\r\\n\\t\\treturn multiC.getCodec(buffer);\\r\\n\\t},\\r\\n}\\r\\n\\n},{\\\"./helpers\\\":33,\\\"./profiles\\\":35,\\\"multicodec\\\":28}],35:[function(require,module,exports){\\n(function (Buffer){\\n/*\\r\\n\\tISC License\\r\\n\\r\\n\\tCopyright (c) 2019, Pierre-Louis Despaigne\\r\\n\\r\\n\\tPermission to use, copy, modify, and/or distribute this software for any\\r\\n\\tpurpose with or without fee is hereby granted, provided that the above\\r\\n\\tcopyright notice and this permission notice appear in all copies.\\r\\n\\r\\n\\tTHE SOFTWARE IS PROVIDED \\\"AS IS\\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\r\\n\\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\r\\n\\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\r\\n\\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\r\\n\\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\r\\n\\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\r\\n\\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\r\\n*/\\r\\n\\r\\nconst CID = require('cids');\\r\\nconst multiH = require('multihashes');\\r\\n\\r\\n/**\\r\\n * Convert an hexadecimal string to a Buffer, the string can start with or without '0x'\\r\\n * @param {string} hex an hexadecimal value\\r\\n * @return {Buffer} the resulting Buffer\\r\\n */\\r\\nconst hexStringToBuffer = (hex) => {\\r\\n\\tlet prefix = hex.slice(0, 2);\\r\\n\\tlet value = hex.slice(2);\\r\\n\\tlet res = '';\\r\\n\\tif (prefix === '0x') res = value;\\r\\n\\telse res = hex;\\r\\n\\treturn multiH.fromHexString(res);\\r\\n}\\r\\n\\r\\n/**\\r\\n* list of known encoding,\\r\\n* encoding should be a function that takes a `string` input,\\r\\n* and return a `Buffer` result\\r\\n*/\\r\\nconst encodes = {\\r\\n  /**\\r\\n  * @param {string} value\\r\\n  * @return {Buffer}\\r\\n  */\\r\\n  swarm: (value) => {\\r\\n    const multihash = multiH.encode(hexStringToBuffer(value), 'keccak-256');\\r\\n\\t\\treturn new CID(1, 'swarm-manifest', multihash).buffer;\\r\\n  },\\r\\n  /**\\r\\n  * @param {string} value\\r\\n  * @return {Buffer}\\r\\n  */\\r\\n  ipfs: (value) => {\\r\\n    const multihash = multiH.fromB58String(value);\\r\\n    return new CID(1, 'dag-pb', multihash).buffer;\\r\\n  },\\r\\n  /**\\r\\n  * @param {string} value\\r\\n  * @return {Buffer}\\r\\n  */\\r\\n  utf8: (value) => {\\r\\n    return Buffer.from(value, 'utf8');\\r\\n  },\\r\\n};\\r\\n\\r\\n/** \\r\\n* list of known decoding,\\r\\n* decoding should be a function that takes a `Buffer` input,\\r\\n* and return a `string` result\\r\\n*/\\r\\nconst decodes = {\\r\\n  /**\\r\\n  * @param {Buffer} value \\r\\n  */\\r\\n  hexMultiHash: (value) => {\\r\\n    const cid = new CID(value);\\r\\n    return multiH.decode(cid.multihash).digest.toString('hex');\\r\\n  },\\r\\n  /**\\r\\n  * @param {Buffer} value \\r\\n  */\\r\\n  b58MultiHash: (value) => {\\r\\n    const cid = new CID(value);\\r\\n    return multiH.toB58String(cid.multihash);\\r\\n  },\\r\\n  /**\\r\\n  * @param {Buffer} value \\r\\n  */\\r\\n  utf8: (value) => {\\r\\n    return value.toString('utf8');\\r\\n  },\\r\\n};\\r\\n\\r\\n/**\\r\\n* list of known encoding/decoding for a given codec,\\r\\n* `encode` should be chosen among the `encodes` functions\\r\\n* `decode` should be chosen among the `decodes` functions\\r\\n*/\\r\\nconst profiles = {\\r\\n  'swarm-ns': {\\r\\n    encode: encodes.swarm,\\r\\n    decode: decodes.hexMultiHash,\\r\\n  },\\r\\n  'ipfs-ns': {\\r\\n    encode: encodes.ipfs,\\r\\n    decode: decodes.b58MultiHash,\\r\\n  },\\r\\n  'ipns-ns': {\\r\\n    encode: encodes.ipfs,\\r\\n    decode: decodes.b58MultiHash,\\r\\n  },\\r\\n  'default': {\\r\\n    encode: encodes.utf8,\\r\\n    decode: decodes.utf8,\\r\\n  },\\r\\n};\\r\\n\\r\\nexports.hexStringToBuffer = hexStringToBuffer;\\r\\nexports.profiles = profiles;\\n}).call(this,require(\\\"buffer\\\").Buffer)\\n},{\\\"buffer\\\":7,\\\"cids\\\":19,\\\"multihashes\\\":64}],36:[function(require,module,exports){\\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\\n  var e, m\\n  var eLen = (nBytes * 8) - mLen - 1\\n  var eMax = (1 << eLen) - 1\\n  var eBias = eMax >> 1\\n  var nBits = -7\\n  var i = isLE ? (nBytes - 1) : 0\\n  var d = isLE ? -1 : 1\\n  var s = buffer[offset + i]\\n\\n  i += d\\n\\n  e = s & ((1 << (-nBits)) - 1)\\n  s >>= (-nBits)\\n  nBits += eLen\\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\\n\\n  m = e & ((1 << (-nBits)) - 1)\\n  e >>= (-nBits)\\n  nBits += mLen\\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\\n\\n  if (e === 0) {\\n    e = 1 - eBias\\n  } else if (e === eMax) {\\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\\n  } else {\\n    m = m + Math.pow(2, mLen)\\n    e = e - eBias\\n  }\\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\\n}\\n\\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\\n  var e, m, c\\n  var eLen = (nBytes * 8) - mLen - 1\\n  var eMax = (1 << eLen) - 1\\n  var eBias = eMax >> 1\\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\\n  var i = isLE ? 0 : (nBytes - 1)\\n  var d = isLE ? 1 : -1\\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\\n\\n  value = Math.abs(value)\\n\\n  if (isNaN(value) || value === Infinity) {\\n    m = isNaN(value) ? 1 : 0\\n    e = eMax\\n  } else {\\n    e = Math.floor(Math.log(value) / Math.LN2)\\n    if (value * (c = Math.pow(2, -e)) < 1) {\\n      e--\\n      c *= 2\\n    }\\n    if (e + eBias >= 1) {\\n      value += rt / c\\n    } else {\\n      value += rt * Math.pow(2, 1 - eBias)\\n    }\\n    if (value * c >= 2) {\\n      e++\\n      c /= 2\\n    }\\n\\n    if (e + eBias >= eMax) {\\n      m = 0\\n      e = eMax\\n    } else if (e + eBias >= 1) {\\n      m = ((value * c) - 1) * Math.pow(2, mLen)\\n      e = e + eBias\\n    } else {\\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\\n      e = 0\\n    }\\n  }\\n\\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\\n\\n  e = (e << mLen) | m\\n  eLen += mLen\\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\\n\\n  buffer[offset + i - d] |= s * 128\\n}\\n\\n},{}],37:[function(require,module,exports){\\n'use strict'\\n\\nmodule.exports = {\\n  DEFAULT_HTTP_API: '/ip4/127.0.0.1/tcp/5001'\\n}\\n\\n},{}],38:[function(require,module,exports){\\n'use strict'\\n\\nmodule.exports = {\\n  httpClient: 'httpClient',\\n  windowIpfs: 'windowIpfs',\\n  jsIpfs: 'jsIpfs',\\n  webExt: 'webExt'\\n}\\n\\n},{}],39:[function(require,module,exports){\\n(function (global){\\n'use strict'\\n/* global self */\\n\\n// Establish the root object, `window` in the browser, `self` in Service Worker. or `global` on the server.\\n// Credit: https://github.com/megawac/underscore/commit/365311c9a440438531ca1c6bfd49e3c7c5f46079\\nmodule.exports = (typeof self === 'object' && self.self === self && self) ||\\n  (typeof global === 'object' && global.global === global && global) ||\\n  this\\n\\n}).call(this,typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {})\\n},{}],40:[function(require,module,exports){\\n'use strict'\\n\\nconst root = require('./constants/root')\\nconst mergeOptions = require('merge-options')\\nconst tryWebExt = require('./providers/webext')\\nconst tryWindow = require('./providers/window-ipfs')\\nconst tryHttpClient = require('./providers/http-client')\\nconst tryJsIpfs = require('./providers/js-ipfs')\\n\\nconst defaultGlobalOpts = {\\n  connectionTest: async (ipfs) => {\\n    // ipfs connection is working if we can fetch data via async iterator API\\n    const cid = 'QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn'\\n    for await (const file of ipfs.get(cid)) {\\n      return file.type === 'dir' && file.name === cid\\n    }\\n  }\\n}\\n\\nconst makeProvider = (fn, defaults = {}) => {\\n  return (options = {}) => {\\n    return (globalOpts) => {\\n      options = mergeOptions(defaultGlobalOpts, defaults, globalOpts, options)\\n      return fn(options)\\n    }\\n  }\\n}\\n\\nconst providers = {\\n  httpClient: makeProvider((options) => {\\n    return tryHttpClient({ root, ...options })\\n  }),\\n  windowIpfs: makeProvider(options => {\\n    return tryWindow({ root, ...options })\\n  }),\\n  jsIpfs: makeProvider(options => {\\n    return tryJsIpfs(options)\\n  }),\\n  webExt: makeProvider(options => {\\n    return tryWebExt({ root, ...options })\\n  })\\n}\\n\\nconst defaultProviders = [\\n  providers.windowIpfs(),\\n  providers.httpClient()\\n]\\n\\nasync function getIpfs ({ providers = defaultProviders, ...options } = {}) {\\n  for (const provider of providers) {\\n    try {\\n      const res = await provider(options)\\n      if (res) return res\\n    } catch (err) {\\n      // provider failed unexpectedly, log error and move to the next one\\n      console.error('[ipfs-provider]', err) // eslint-disable-line no-console\\n    }\\n  }\\n}\\n\\nmodule.exports = {\\n  getIpfs,\\n  providers,\\n  makeProvider\\n}\\n\\n},{\\\"./constants/root\\\":39,\\\"./providers/http-client\\\":41,\\\"./providers/js-ipfs\\\":42,\\\"./providers/webext\\\":43,\\\"./providers/window-ipfs\\\":44,\\\"merge-options\\\":49}],41:[function(require,module,exports){\\n'use strict'\\n\\nconst { URL } = require('iso-url')\\nconst PROVIDERS = require('../constants/providers')\\nconst { DEFAULT_HTTP_API } = require('../constants/defaults')\\n\\n/*\\n * This provider lazy-loads https://github.com/ipfs/js-ipfs-http-client\\n * so it is not included as a dependency if not used.\\n *\\n * HTTP Client init fallback:\\n * 1. Use constructor returned by loadHttpClientModule function\\n * 2. Fallback to window.IpfsHttpClient\\n *\\n * API URL fallback order:\\n * 1. Try user specified API address\\n * 2. Try current origin\\n * 3. Try DEFAULT_HTTP_API\\n*/\\nasync function tryHttpClient ({ loadHttpClientModule, apiAddress, root, connectionTest }) {\\n  // Find HTTP client\\n  let httpClient\\n  if (loadHttpClientModule) httpClient = await loadHttpClientModule()\\n\\n  // Final fallback to window.IpfsHttpClient or error\\n  if (!httpClient) {\\n    if (root.IpfsHttpClient) {\\n      httpClient = root.IpfsHttpClient\\n    } else {\\n      throw new Error('ipfs-provider could not initialize js-ipfs-http-client: make sure its constructor is returned by loadHttpClientModule function or exposed at window.IpfsHttpClient')\\n    }\\n  }\\n\\n  // Allow the use of `import` or `require` on `loadHttpClientModule` fn\\n  httpClient = httpClient.default || httpClient // TODO: create 'import' demo in examples/\\n\\n  // Explicit custom apiAddress provided. Only try that.\\n  if (apiAddress) {\\n    return maybeApi({ apiAddress, connectionTest, httpClient })\\n  }\\n\\n  // Current origin is not localhost:5001 so try with current origin info\\n  const { location } = root\\n  if (location && !(location.port === '5001' && location.hostname.match(/^127.0.0.1$|^localhost$/))) {\\n    const origin = new URL(location.origin)\\n    origin.pathname = '/'\\n    const res = await maybeApi({\\n      apiAddress: origin.toString(),\\n      connectionTest,\\n      httpClient\\n    })\\n    if (res) return res\\n  }\\n\\n  // ...otherwise try /ip4/127.0.0.1/tcp/5001\\n  return maybeApi({ apiAddress: DEFAULT_HTTP_API, connectionTest, httpClient })\\n}\\n\\n// Init and test an api client against provded API address.\\n// Returns js-ipfs-http-client instance or null\\nasync function maybeApi ({ apiAddress, connectionTest, httpClient }) {\\n  try {\\n    const ipfs = httpClient(apiAddress)\\n    await connectionTest(ipfs)\\n    return { ipfs, provider: PROVIDERS.httpClient, apiAddress }\\n  } catch (error) {\\n    // Failed to connect to ipfs-api in `apiAddress`\\n    // console.error('[ipfs-provider:httpClient]', error)\\n    return null\\n  }\\n}\\n\\nmodule.exports = tryHttpClient\\n\\n},{\\\"../constants/defaults\\\":37,\\\"../constants/providers\\\":38,\\\"iso-url\\\":46}],42:[function(require,module,exports){\\n'use strict'\\n\\nconst PROVIDERS = require('../constants/providers')\\n\\nfunction createIpfs (ipfsModule, opts) {\\n  // Allow the use of `import` or `require` on `getJsIpfs` fn\\n  ipfsModule = ipfsModule.default || ipfsModule\\n  return ipfsModule.create(opts)\\n}\\n\\nasync function tryJsIpfs ({ connectionTest, loadJsIpfsModule, options, init = createIpfs }) {\\n  const ipfsModule = await loadJsIpfsModule()\\n  const ipfs = await init(ipfsModule, options)\\n  await connectionTest(ipfs)\\n  return { ipfs, provider: PROVIDERS.jsIpfs }\\n}\\n\\nmodule.exports = tryJsIpfs\\n\\n},{\\\"../constants/providers\\\":38}],43:[function(require,module,exports){\\n'use strict'\\n\\nconst PROVIDERS = require('../constants/providers')\\n\\nasync function tryWebExt ({ root, connectionTest }) {\\n  // Opportunistic optimizations when running inside of web extension (eg. ipfs-companion)\\n  if (typeof root.chrome === 'object' && root.chrome.extension && root.chrome.extension.getBackgroundPage) {\\n    // Note: under some vendors getBackgroundPage() will return null if window is in incognito mode\\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1329304\\n    let bg = null\\n    try {\\n      bg = root.chrome.extension.getBackgroundPage()\\n    } catch (err) {\\n      // not in browser extension\\n      return null\\n    }\\n    // If extension is exposing IPFS API as `ipfs` on the background page\\n    // it can be used directly for the best performance\\n    if (bg && bg.ipfs) {\\n      const { ipfs } = bg\\n      await connectionTest(ipfs)\\n      return { ipfs, provider: PROVIDERS.webExt }\\n    }\\n    /*  Other endpoints can be added here in the future.\\n        For example, Companion could provide API for other browser extensions:\\n        https://github.com/ipfs-shipyard/ipfs-companion/issues/307 */\\n  }\\n}\\n\\nmodule.exports = tryWebExt\\n\\n},{\\\"../constants/providers\\\":38}],44:[function(require,module,exports){\\n'use strict'\\n\\nconst PROVIDERS = require('../constants/providers')\\n\\nasync function tryWindow ({ root, permissions, connectionTest }) {\\n  if (root.ipfs) {\\n    // files.get is required for testing if API works, ensure we request it\\n    if (!(permissions && permissions.commands && permissions.commands.includes('files.get'))) {\\n      permissions = permissions || {}\\n      permissions = JSON.parse(JSON.stringify(permissions)) // deep copy to work with freezed objects\\n      permissions.commands = permissions.commands || []\\n      permissions.commands.push('files.get')\\n    }\\n    // try window.ipfs.enable first: https://github.com/ipfs-shipyard/ipfs-companion/issues/589\\n    const ipfs = typeof root.ipfs.enable === 'function'\\n      ? await root.ipfs.enable(permissions)\\n      : root.ipfs\\n    await connectionTest(ipfs)\\n    return { ipfs, provider: PROVIDERS.windowIpfs }\\n  }\\n}\\n\\nmodule.exports = tryWindow\\n\\n},{\\\"../constants/providers\\\":38}],45:[function(require,module,exports){\\n'use strict';\\n\\nmodule.exports = value => {\\n\\tif (Object.prototype.toString.call(value) !== '[object Object]') {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tconst prototype = Object.getPrototypeOf(value);\\n\\treturn prototype === null || prototype === Object.prototype;\\n};\\n\\n},{}],46:[function(require,module,exports){\\n'use strict';\\n\\nconst {\\n    URLWithLegacySupport,\\n    format,\\n    URLSearchParams,\\n    defaultBase\\n} = require('./src/url');\\nconst relative = require('./src/relative');\\n\\nmodule.exports = {\\n    URL: URLWithLegacySupport,\\n    URLSearchParams,\\n    format,\\n    relative,\\n    defaultBase\\n};\\n\\n},{\\\"./src/relative\\\":47,\\\"./src/url\\\":48}],47:[function(require,module,exports){\\n'use strict';\\n\\nconst { URLWithLegacySupport, format } = require('./url');\\n\\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\\n    let protocol = location.protocol ?\\n        location.protocol.replace(':', '') :\\n        'http';\\n\\n    // Check protocol map\\n    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\\n    let urlParsed;\\n\\n    try {\\n        urlParsed = new URLWithLegacySupport(url);\\n    } catch (err) {\\n        urlParsed = {};\\n    }\\n\\n    const base = Object.assign({}, location, {\\n        protocol: protocol || urlParsed.protocol,\\n        host: location.host || urlParsed.host\\n    });\\n\\n    return new URLWithLegacySupport(url, format(base)).toString();\\n};\\n\\n},{\\\"./url\\\":48}],48:[function(require,module,exports){\\n'use strict';\\n\\nconst defaultBase = self.location ?\\n    self.location.protocol + '//' + self.location.host :\\n    '';\\nconst URL = self.URL;\\n\\nclass URLWithLegacySupport {\\n    constructor(url = '', base = defaultBase) {\\n        this.super = new URL(url, base);\\n        this.path = this.pathname + this.search;\\n        this.auth =\\n            this.username && this.password ?\\n                this.username + ':' + this.password :\\n                null;\\n\\n        this.query =\\n            this.search && this.search.startsWith('?') ?\\n                this.search.slice(1) :\\n                null;\\n    }\\n\\n    get hash() {\\n        return this.super.hash;\\n    }\\n    get host() {\\n        return this.super.host;\\n    }\\n    get hostname() {\\n        return this.super.hostname;\\n    }\\n    get href() {\\n        return this.super.href;\\n    }\\n    get origin() {\\n        return this.super.origin;\\n    }\\n    get password() {\\n        return this.super.password;\\n    }\\n    get pathname() {\\n        return this.super.pathname;\\n    }\\n    get port() {\\n        return this.super.port;\\n    }\\n    get protocol() {\\n        return this.super.protocol;\\n    }\\n    get search() {\\n        return this.super.search;\\n    }\\n    get searchParams() {\\n        return this.super.searchParams;\\n    }\\n    get username() {\\n        return this.super.username;\\n    }\\n\\n    set hash(hash) {\\n        this.super.hash = hash;\\n    }\\n    set host(host) {\\n        this.super.host = host;\\n    }\\n    set hostname(hostname) {\\n        this.super.hostname = hostname;\\n    }\\n    set href(href) {\\n        this.super.href = href;\\n    }\\n    set origin(origin) {\\n        this.super.origin = origin;\\n    }\\n    set password(password) {\\n        this.super.password = password;\\n    }\\n    set pathname(pathname) {\\n        this.super.pathname = pathname;\\n    }\\n    set port(port) {\\n        this.super.port = port;\\n    }\\n    set protocol(protocol) {\\n        this.super.protocol = protocol;\\n    }\\n    set search(search) {\\n        this.super.search = search;\\n    }\\n    set searchParams(searchParams) {\\n        this.super.searchParams = searchParams;\\n    }\\n    set username(username) {\\n        this.super.username = username;\\n    }\\n\\n    createObjectURL(o) {\\n        return this.super.createObjectURL(o);\\n    }\\n    revokeObjectURL(o) {\\n        this.super.revokeObjectURL(o);\\n    }\\n    toJSON() {\\n        return this.super.toJSON();\\n    }\\n    toString() {\\n        return this.super.toString();\\n    }\\n    format() {\\n        return this.toString();\\n    }\\n}\\n\\nfunction format(obj) {\\n    if (typeof obj === 'string') {\\n        const url = new URL(obj);\\n\\n        return url.toString();\\n    }\\n\\n    if (!(obj instanceof URL)) {\\n        const userPass =\\n            obj.username && obj.password ?\\n                `${obj.username}:${obj.password}@` :\\n                '';\\n        const auth = obj.auth ? obj.auth + '@' : '';\\n        const port = obj.port ? ':' + obj.port : '';\\n        const protocol = obj.protocol ? obj.protocol + '//' : '';\\n        const host = obj.host || '';\\n        const hostname = obj.hostname || '';\\n        const search = obj.search || (obj.query ? '?' + obj.query : '');\\n        const hash = obj.hash || '';\\n        const pathname = obj.pathname || '';\\n        const path = obj.path || pathname + search;\\n\\n        return `${protocol}${userPass || auth}${host ||\\n            hostname + port}${path}${hash}`;\\n    }\\n}\\n\\nmodule.exports = {\\n    URLWithLegacySupport,\\n    URLSearchParams: self.URLSearchParams,\\n    defaultBase,\\n    format\\n};\\n\\n},{}],49:[function(require,module,exports){\\n'use strict';\\nconst isOptionObject = require('is-plain-obj');\\n\\nconst {hasOwnProperty} = Object.prototype;\\nconst {propertyIsEnumerable} = Object;\\nconst defineProperty = (obj, name, value) => Object.defineProperty(obj, name, {\\n\\tvalue,\\n\\twritable: true,\\n\\tenumerable: true,\\n\\tconfigurable: true\\n});\\n\\nconst globalThis = this;\\nconst defaultMergeOpts = {\\n\\tconcatArrays: false,\\n\\tignoreUndefined: false\\n};\\n\\nconst getEnumerableOwnPropertyKeys = value => {\\n\\tconst keys = [];\\n\\n\\tfor (const key in value) {\\n\\t\\tif (hasOwnProperty.call(value, key)) {\\n\\t\\t\\tkeys.push(key);\\n\\t\\t}\\n\\t}\\n\\n\\t/* istanbul ignore else  */\\n\\tif (Object.getOwnPropertySymbols) {\\n\\t\\tconst symbols = Object.getOwnPropertySymbols(value);\\n\\n\\t\\tfor (const symbol of symbols) {\\n\\t\\t\\tif (propertyIsEnumerable.call(value, symbol)) {\\n\\t\\t\\t\\tkeys.push(symbol);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn keys;\\n};\\n\\nfunction clone(value) {\\n\\tif (Array.isArray(value)) {\\n\\t\\treturn cloneArray(value);\\n\\t}\\n\\n\\tif (isOptionObject(value)) {\\n\\t\\treturn cloneOptionObject(value);\\n\\t}\\n\\n\\treturn value;\\n}\\n\\nfunction cloneArray(array) {\\n\\tconst result = array.slice(0, 0);\\n\\n\\tgetEnumerableOwnPropertyKeys(array).forEach(key => {\\n\\t\\tdefineProperty(result, key, clone(array[key]));\\n\\t});\\n\\n\\treturn result;\\n}\\n\\nfunction cloneOptionObject(obj) {\\n\\tconst result = Object.getPrototypeOf(obj) === null ? Object.create(null) : {};\\n\\n\\tgetEnumerableOwnPropertyKeys(obj).forEach(key => {\\n\\t\\tdefineProperty(result, key, clone(obj[key]));\\n\\t});\\n\\n\\treturn result;\\n}\\n\\n/**\\n * @param {*} merged already cloned\\n * @param {*} source something to merge\\n * @param {string[]} keys keys to merge\\n * @param {Object} config Config Object\\n * @returns {*} cloned Object\\n */\\nconst mergeKeys = (merged, source, keys, config) => {\\n\\tkeys.forEach(key => {\\n\\t\\tif (typeof source[key] === 'undefined' && config.ignoreUndefined) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Do not recurse into prototype chain of merged\\n\\t\\tif (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\\n\\t\\t\\tdefineProperty(merged, key, merge(merged[key], source[key], config));\\n\\t\\t} else {\\n\\t\\t\\tdefineProperty(merged, key, clone(source[key]));\\n\\t\\t}\\n\\t});\\n\\n\\treturn merged;\\n};\\n\\n/**\\n * @param {*} merged already cloned\\n * @param {*} source something to merge\\n * @param {Object} config Config Object\\n * @returns {*} cloned Object\\n *\\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\\n */\\nconst concatArrays = (merged, source, config) => {\\n\\tlet result = merged.slice(0, 0);\\n\\tlet resultIndex = 0;\\n\\n\\t[merged, source].forEach(array => {\\n\\t\\tconst indices = [];\\n\\n\\t\\t// `result.concat(array)` with cloning\\n\\t\\tfor (let k = 0; k < array.length; k++) {\\n\\t\\t\\tif (!hasOwnProperty.call(array, k)) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tindices.push(String(k));\\n\\n\\t\\t\\tif (array === merged) {\\n\\t\\t\\t\\t// Already cloned\\n\\t\\t\\t\\tdefineProperty(result, resultIndex++, array[k]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdefineProperty(result, resultIndex++, clone(array[k]));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Merge non-index keys\\n\\t\\tresult = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);\\n\\t});\\n\\n\\treturn result;\\n};\\n\\n/**\\n * @param {*} merged already cloned\\n * @param {*} source something to merge\\n * @param {Object} config Config Object\\n * @returns {*} cloned Object\\n */\\nfunction merge(merged, source, config) {\\n\\tif (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\\n\\t\\treturn concatArrays(merged, source, config);\\n\\t}\\n\\n\\tif (!isOptionObject(source) || !isOptionObject(merged)) {\\n\\t\\treturn clone(source);\\n\\t}\\n\\n\\treturn mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);\\n}\\n\\nmodule.exports = function (...options) {\\n\\tconst config = merge(clone(defaultMergeOpts), (this !== globalThis && this) || {}, defaultMergeOpts);\\n\\tlet merged = {_: {}};\\n\\n\\tfor (const option of options) {\\n\\t\\tif (option === undefined) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!isOptionObject(option)) {\\n\\t\\t\\tthrow new TypeError('`' + option + '` is not an Option Object');\\n\\t\\t}\\n\\n\\t\\tmerged = merge(merged, {_: option}, config);\\n\\t}\\n\\n\\treturn merged._;\\n};\\n\\n},{\\\"is-plain-obj\\\":45}],50:[function(require,module,exports){\\narguments[4][20][0].apply(exports,arguments)\\n},{\\\"dup\\\":20}],51:[function(require,module,exports){\\narguments[4][21][0].apply(exports,arguments)\\n},{\\\"buffer\\\":7,\\\"dup\\\":21}],52:[function(require,module,exports){\\narguments[4][22][0].apply(exports,arguments)\\n},{\\\"dup\\\":22}],53:[function(require,module,exports){\\narguments[4][23][0].apply(exports,arguments)\\n},{\\\"buffer\\\":7,\\\"dup\\\":23}],54:[function(require,module,exports){\\narguments[4][24][0].apply(exports,arguments)\\n},{\\\"./base.js\\\":50,\\\"./base16\\\":51,\\\"./base32\\\":52,\\\"./base64\\\":53,\\\"base-x\\\":5,\\\"dup\\\":24}],55:[function(require,module,exports){\\n/**\\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\\n * @module Multibase\\n */\\n'use strict'\\n\\nconst { Buffer } = require('buffer')\\nconst constants = require('./constants')\\n\\nexports = module.exports = multibase\\nexports.encode = encode\\nexports.decode = decode\\nexports.isEncoded = isEncoded\\nexports.names = Object.freeze(Object.keys(constants.names))\\nexports.codes = Object.freeze(Object.keys(constants.codes))\\n\\n/**\\n * Create a new buffer with the multibase varint+code.\\n *\\n * @param {string|number} nameOrCode - The multibase name or code number.\\n * @param {Buffer} buf - The data to be prefixed with multibase.\\n * @memberof Multibase\\n * @returns {Buffer}\\n */\\nfunction multibase (nameOrCode, buf) {\\n  if (!buf) {\\n    throw new Error('requires an encoded buffer')\\n  }\\n  const base = getBase(nameOrCode)\\n  const codeBuf = Buffer.from(base.code)\\n\\n  const name = base.name\\n  validEncode(name, buf)\\n  return Buffer.concat([codeBuf, buf])\\n}\\n\\n/**\\n * Encode data with the specified base and add the multibase prefix.\\n *\\n * @param {string|number} nameOrCode - The multibase name or code number.\\n * @param {Buffer} buf - The data to be encoded.\\n * @returns {Buffer}\\n * @memberof Multibase\\n */\\nfunction encode (nameOrCode, buf) {\\n  const base = getBase(nameOrCode)\\n  const name = base.name\\n\\n  return multibase(name, Buffer.from(base.encode(buf)))\\n}\\n\\n/**\\n * Takes a buffer or string encoded with multibase header, decodes it and\\n * returns the decoded buffer\\n *\\n * @param {Buffer|string} bufOrString\\n * @returns {Buffer}\\n * @memberof Multibase\\n *\\n */\\nfunction decode (bufOrString) {\\n  if (Buffer.isBuffer(bufOrString)) {\\n    bufOrString = bufOrString.toString()\\n  }\\n\\n  const code = bufOrString.substring(0, 1)\\n  bufOrString = bufOrString.substring(1, bufOrString.length)\\n\\n  if (typeof bufOrString === 'string') {\\n    bufOrString = Buffer.from(bufOrString)\\n  }\\n\\n  const base = getBase(code)\\n  return Buffer.from(base.decode(bufOrString.toString()))\\n}\\n\\n/**\\n * Is the given data multibase encoded?\\n *\\n * @param {Buffer|string} bufOrString\\n * @returns {boolean}\\n * @memberof Multibase\\n */\\nfunction isEncoded (bufOrString) {\\n  if (Buffer.isBuffer(bufOrString)) {\\n    bufOrString = bufOrString.toString()\\n  }\\n\\n  // Ensure bufOrString is a string\\n  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {\\n    return false\\n  }\\n\\n  const code = bufOrString.substring(0, 1)\\n  try {\\n    const base = getBase(code)\\n    return base.name\\n  } catch (err) {\\n    return false\\n  }\\n}\\n\\n/**\\n * @param {string} name\\n * @param {Buffer} buf\\n * @private\\n * @returns {undefined}\\n */\\nfunction validEncode (name, buf) {\\n  const base = getBase(name)\\n  base.decode(buf.toString())\\n}\\n\\nfunction getBase (nameOrCode) {\\n  let base\\n\\n  if (constants.names[nameOrCode]) {\\n    base = constants.names[nameOrCode]\\n  } else if (constants.codes[nameOrCode]) {\\n    base = constants.codes[nameOrCode]\\n  } else {\\n    throw new Error('Unsupported encoding')\\n  }\\n\\n  if (!base.isImplemented()) {\\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet')\\n  }\\n\\n  return base\\n}\\n\\n},{\\\"./constants\\\":54,\\\"buffer\\\":7}],56:[function(require,module,exports){\\narguments[4][11][0].apply(exports,arguments)\\n},{\\\"dup\\\":11}],57:[function(require,module,exports){\\narguments[4][12][0].apply(exports,arguments)\\n},{\\\"./base-table.json\\\":56,\\\"dup\\\":12}],58:[function(require,module,exports){\\narguments[4][13][0].apply(exports,arguments)\\n},{\\\"./constants\\\":57,\\\"./int-table\\\":59,\\\"./print\\\":60,\\\"./util\\\":61,\\\"./varint-table\\\":62,\\\"buffer\\\":7,\\\"dup\\\":13,\\\"varint\\\":86}],59:[function(require,module,exports){\\narguments[4][14][0].apply(exports,arguments)\\n},{\\\"./base-table.json\\\":56,\\\"dup\\\":14}],60:[function(require,module,exports){\\narguments[4][15][0].apply(exports,arguments)\\n},{\\\"./base-table.json\\\":56,\\\"dup\\\":15}],61:[function(require,module,exports){\\narguments[4][16][0].apply(exports,arguments)\\n},{\\\"buffer\\\":7,\\\"dup\\\":16,\\\"varint\\\":86}],62:[function(require,module,exports){\\narguments[4][17][0].apply(exports,arguments)\\n},{\\\"./base-table.json\\\":56,\\\"./util\\\":61,\\\"dup\\\":17}],63:[function(require,module,exports){\\n/* eslint quote-props: off */\\n/* eslint key-spacing: off */\\n'use strict'\\n\\nexports.names = Object.freeze({\\n  'identity':   0x0,\\n  'sha1':       0x11,\\n  'sha2-256':   0x12,\\n  'sha2-512':   0x13,\\n  'dbl-sha2-256': 0x56,\\n  'sha3-224':   0x17,\\n  'sha3-256':   0x16,\\n  'sha3-384':   0x15,\\n  'sha3-512':   0x14,\\n  'shake-128':  0x18,\\n  'shake-256':  0x19,\\n  'keccak-224': 0x1A,\\n  'keccak-256': 0x1B,\\n  'keccak-384': 0x1C,\\n  'keccak-512': 0x1D,\\n  'murmur3-128': 0x22,\\n  'murmur3-32':  0x23,\\n  'md4':         0xd4,\\n  'md5':         0xd5,\\n  'blake2b-8':   0xb201,\\n  'blake2b-16':  0xb202,\\n  'blake2b-24':  0xb203,\\n  'blake2b-32':  0xb204,\\n  'blake2b-40':  0xb205,\\n  'blake2b-48':  0xb206,\\n  'blake2b-56':  0xb207,\\n  'blake2b-64':  0xb208,\\n  'blake2b-72':  0xb209,\\n  'blake2b-80':  0xb20a,\\n  'blake2b-88':  0xb20b,\\n  'blake2b-96':  0xb20c,\\n  'blake2b-104': 0xb20d,\\n  'blake2b-112': 0xb20e,\\n  'blake2b-120': 0xb20f,\\n  'blake2b-128': 0xb210,\\n  'blake2b-136': 0xb211,\\n  'blake2b-144': 0xb212,\\n  'blake2b-152': 0xb213,\\n  'blake2b-160': 0xb214,\\n  'blake2b-168': 0xb215,\\n  'blake2b-176': 0xb216,\\n  'blake2b-184': 0xb217,\\n  'blake2b-192': 0xb218,\\n  'blake2b-200': 0xb219,\\n  'blake2b-208': 0xb21a,\\n  'blake2b-216': 0xb21b,\\n  'blake2b-224': 0xb21c,\\n  'blake2b-232': 0xb21d,\\n  'blake2b-240': 0xb21e,\\n  'blake2b-248': 0xb21f,\\n  'blake2b-256': 0xb220,\\n  'blake2b-264': 0xb221,\\n  'blake2b-272': 0xb222,\\n  'blake2b-280': 0xb223,\\n  'blake2b-288': 0xb224,\\n  'blake2b-296': 0xb225,\\n  'blake2b-304': 0xb226,\\n  'blake2b-312': 0xb227,\\n  'blake2b-320': 0xb228,\\n  'blake2b-328': 0xb229,\\n  'blake2b-336': 0xb22a,\\n  'blake2b-344': 0xb22b,\\n  'blake2b-352': 0xb22c,\\n  'blake2b-360': 0xb22d,\\n  'blake2b-368': 0xb22e,\\n  'blake2b-376': 0xb22f,\\n  'blake2b-384': 0xb230,\\n  'blake2b-392': 0xb231,\\n  'blake2b-400': 0xb232,\\n  'blake2b-408': 0xb233,\\n  'blake2b-416': 0xb234,\\n  'blake2b-424': 0xb235,\\n  'blake2b-432': 0xb236,\\n  'blake2b-440': 0xb237,\\n  'blake2b-448': 0xb238,\\n  'blake2b-456': 0xb239,\\n  'blake2b-464': 0xb23a,\\n  'blake2b-472': 0xb23b,\\n  'blake2b-480': 0xb23c,\\n  'blake2b-488': 0xb23d,\\n  'blake2b-496': 0xb23e,\\n  'blake2b-504': 0xb23f,\\n  'blake2b-512': 0xb240,\\n  'blake2s-8':   0xb241,\\n  'blake2s-16':  0xb242,\\n  'blake2s-24':  0xb243,\\n  'blake2s-32':  0xb244,\\n  'blake2s-40':  0xb245,\\n  'blake2s-48':  0xb246,\\n  'blake2s-56':  0xb247,\\n  'blake2s-64':  0xb248,\\n  'blake2s-72':  0xb249,\\n  'blake2s-80':  0xb24a,\\n  'blake2s-88':  0xb24b,\\n  'blake2s-96':  0xb24c,\\n  'blake2s-104': 0xb24d,\\n  'blake2s-112': 0xb24e,\\n  'blake2s-120': 0xb24f,\\n  'blake2s-128': 0xb250,\\n  'blake2s-136': 0xb251,\\n  'blake2s-144': 0xb252,\\n  'blake2s-152': 0xb253,\\n  'blake2s-160': 0xb254,\\n  'blake2s-168': 0xb255,\\n  'blake2s-176': 0xb256,\\n  'blake2s-184': 0xb257,\\n  'blake2s-192': 0xb258,\\n  'blake2s-200': 0xb259,\\n  'blake2s-208': 0xb25a,\\n  'blake2s-216': 0xb25b,\\n  'blake2s-224': 0xb25c,\\n  'blake2s-232': 0xb25d,\\n  'blake2s-240': 0xb25e,\\n  'blake2s-248': 0xb25f,\\n  'blake2s-256': 0xb260,\\n  'Skein256-8': 0xb301,\\n  'Skein256-16': 0xb302,\\n  'Skein256-24': 0xb303,\\n  'Skein256-32': 0xb304,\\n  'Skein256-40': 0xb305,\\n  'Skein256-48': 0xb306,\\n  'Skein256-56': 0xb307,\\n  'Skein256-64': 0xb308,\\n  'Skein256-72': 0xb309,\\n  'Skein256-80': 0xb30a,\\n  'Skein256-88': 0xb30b,\\n  'Skein256-96': 0xb30c,\\n  'Skein256-104': 0xb30d,\\n  'Skein256-112': 0xb30e,\\n  'Skein256-120': 0xb30f,\\n  'Skein256-128': 0xb310,\\n  'Skein256-136': 0xb311,\\n  'Skein256-144': 0xb312,\\n  'Skein256-152': 0xb313,\\n  'Skein256-160': 0xb314,\\n  'Skein256-168': 0xb315,\\n  'Skein256-176': 0xb316,\\n  'Skein256-184': 0xb317,\\n  'Skein256-192': 0xb318,\\n  'Skein256-200': 0xb319,\\n  'Skein256-208': 0xb31a,\\n  'Skein256-216': 0xb31b,\\n  'Skein256-224': 0xb31c,\\n  'Skein256-232': 0xb31d,\\n  'Skein256-240': 0xb31e,\\n  'Skein256-248': 0xb31f,\\n  'Skein256-256': 0xb320,\\n  'Skein512-8': 0xb321,\\n  'Skein512-16': 0xb322,\\n  'Skein512-24': 0xb323,\\n  'Skein512-32': 0xb324,\\n  'Skein512-40': 0xb325,\\n  'Skein512-48': 0xb326,\\n  'Skein512-56': 0xb327,\\n  'Skein512-64': 0xb328,\\n  'Skein512-72': 0xb329,\\n  'Skein512-80': 0xb32a,\\n  'Skein512-88': 0xb32b,\\n  'Skein512-96': 0xb32c,\\n  'Skein512-104': 0xb32d,\\n  'Skein512-112': 0xb32e,\\n  'Skein512-120': 0xb32f,\\n  'Skein512-128': 0xb330,\\n  'Skein512-136': 0xb331,\\n  'Skein512-144': 0xb332,\\n  'Skein512-152': 0xb333,\\n  'Skein512-160': 0xb334,\\n  'Skein512-168': 0xb335,\\n  'Skein512-176': 0xb336,\\n  'Skein512-184': 0xb337,\\n  'Skein512-192': 0xb338,\\n  'Skein512-200': 0xb339,\\n  'Skein512-208': 0xb33a,\\n  'Skein512-216': 0xb33b,\\n  'Skein512-224': 0xb33c,\\n  'Skein512-232': 0xb33d,\\n  'Skein512-240': 0xb33e,\\n  'Skein512-248': 0xb33f,\\n  'Skein512-256': 0xb340,\\n  'Skein512-264': 0xb341,\\n  'Skein512-272': 0xb342,\\n  'Skein512-280': 0xb343,\\n  'Skein512-288': 0xb344,\\n  'Skein512-296': 0xb345,\\n  'Skein512-304': 0xb346,\\n  'Skein512-312': 0xb347,\\n  'Skein512-320': 0xb348,\\n  'Skein512-328': 0xb349,\\n  'Skein512-336': 0xb34a,\\n  'Skein512-344': 0xb34b,\\n  'Skein512-352': 0xb34c,\\n  'Skein512-360': 0xb34d,\\n  'Skein512-368': 0xb34e,\\n  'Skein512-376': 0xb34f,\\n  'Skein512-384': 0xb350,\\n  'Skein512-392': 0xb351,\\n  'Skein512-400': 0xb352,\\n  'Skein512-408': 0xb353,\\n  'Skein512-416': 0xb354,\\n  'Skein512-424': 0xb355,\\n  'Skein512-432': 0xb356,\\n  'Skein512-440': 0xb357,\\n  'Skein512-448': 0xb358,\\n  'Skein512-456': 0xb359,\\n  'Skein512-464': 0xb35a,\\n  'Skein512-472': 0xb35b,\\n  'Skein512-480': 0xb35c,\\n  'Skein512-488': 0xb35d,\\n  'Skein512-496': 0xb35e,\\n  'Skein512-504': 0xb35f,\\n  'Skein512-512': 0xb360,\\n  'Skein1024-8': 0xb361,\\n  'Skein1024-16': 0xb362,\\n  'Skein1024-24': 0xb363,\\n  'Skein1024-32': 0xb364,\\n  'Skein1024-40': 0xb365,\\n  'Skein1024-48': 0xb366,\\n  'Skein1024-56': 0xb367,\\n  'Skein1024-64': 0xb368,\\n  'Skein1024-72': 0xb369,\\n  'Skein1024-80': 0xb36a,\\n  'Skein1024-88': 0xb36b,\\n  'Skein1024-96': 0xb36c,\\n  'Skein1024-104': 0xb36d,\\n  'Skein1024-112': 0xb36e,\\n  'Skein1024-120': 0xb36f,\\n  'Skein1024-128': 0xb370,\\n  'Skein1024-136': 0xb371,\\n  'Skein1024-144': 0xb372,\\n  'Skein1024-152': 0xb373,\\n  'Skein1024-160': 0xb374,\\n  'Skein1024-168': 0xb375,\\n  'Skein1024-176': 0xb376,\\n  'Skein1024-184': 0xb377,\\n  'Skein1024-192': 0xb378,\\n  'Skein1024-200': 0xb379,\\n  'Skein1024-208': 0xb37a,\\n  'Skein1024-216': 0xb37b,\\n  'Skein1024-224': 0xb37c,\\n  'Skein1024-232': 0xb37d,\\n  'Skein1024-240': 0xb37e,\\n  'Skein1024-248': 0xb37f,\\n  'Skein1024-256': 0xb380,\\n  'Skein1024-264': 0xb381,\\n  'Skein1024-272': 0xb382,\\n  'Skein1024-280': 0xb383,\\n  'Skein1024-288': 0xb384,\\n  'Skein1024-296': 0xb385,\\n  'Skein1024-304': 0xb386,\\n  'Skein1024-312': 0xb387,\\n  'Skein1024-320': 0xb388,\\n  'Skein1024-328': 0xb389,\\n  'Skein1024-336': 0xb38a,\\n  'Skein1024-344': 0xb38b,\\n  'Skein1024-352': 0xb38c,\\n  'Skein1024-360': 0xb38d,\\n  'Skein1024-368': 0xb38e,\\n  'Skein1024-376': 0xb38f,\\n  'Skein1024-384': 0xb390,\\n  'Skein1024-392': 0xb391,\\n  'Skein1024-400': 0xb392,\\n  'Skein1024-408': 0xb393,\\n  'Skein1024-416': 0xb394,\\n  'Skein1024-424': 0xb395,\\n  'Skein1024-432': 0xb396,\\n  'Skein1024-440': 0xb397,\\n  'Skein1024-448': 0xb398,\\n  'Skein1024-456': 0xb399,\\n  'Skein1024-464': 0xb39a,\\n  'Skein1024-472': 0xb39b,\\n  'Skein1024-480': 0xb39c,\\n  'Skein1024-488': 0xb39d,\\n  'Skein1024-496': 0xb39e,\\n  'Skein1024-504': 0xb39f,\\n  'Skein1024-512': 0xb3a0,\\n  'Skein1024-520': 0xb3a1,\\n  'Skein1024-528': 0xb3a2,\\n  'Skein1024-536': 0xb3a3,\\n  'Skein1024-544': 0xb3a4,\\n  'Skein1024-552': 0xb3a5,\\n  'Skein1024-560': 0xb3a6,\\n  'Skein1024-568': 0xb3a7,\\n  'Skein1024-576': 0xb3a8,\\n  'Skein1024-584': 0xb3a9,\\n  'Skein1024-592': 0xb3aa,\\n  'Skein1024-600': 0xb3ab,\\n  'Skein1024-608': 0xb3ac,\\n  'Skein1024-616': 0xb3ad,\\n  'Skein1024-624': 0xb3ae,\\n  'Skein1024-632': 0xb3af,\\n  'Skein1024-640': 0xb3b0,\\n  'Skein1024-648': 0xb3b1,\\n  'Skein1024-656': 0xb3b2,\\n  'Skein1024-664': 0xb3b3,\\n  'Skein1024-672': 0xb3b4,\\n  'Skein1024-680': 0xb3b5,\\n  'Skein1024-688': 0xb3b6,\\n  'Skein1024-696': 0xb3b7,\\n  'Skein1024-704': 0xb3b8,\\n  'Skein1024-712': 0xb3b9,\\n  'Skein1024-720': 0xb3ba,\\n  'Skein1024-728': 0xb3bb,\\n  'Skein1024-736': 0xb3bc,\\n  'Skein1024-744': 0xb3bd,\\n  'Skein1024-752': 0xb3be,\\n  'Skein1024-760': 0xb3bf,\\n  'Skein1024-768': 0xb3c0,\\n  'Skein1024-776': 0xb3c1,\\n  'Skein1024-784': 0xb3c2,\\n  'Skein1024-792': 0xb3c3,\\n  'Skein1024-800': 0xb3c4,\\n  'Skein1024-808': 0xb3c5,\\n  'Skein1024-816': 0xb3c6,\\n  'Skein1024-824': 0xb3c7,\\n  'Skein1024-832': 0xb3c8,\\n  'Skein1024-840': 0xb3c9,\\n  'Skein1024-848': 0xb3ca,\\n  'Skein1024-856': 0xb3cb,\\n  'Skein1024-864': 0xb3cc,\\n  'Skein1024-872': 0xb3cd,\\n  'Skein1024-880': 0xb3ce,\\n  'Skein1024-888': 0xb3cf,\\n  'Skein1024-896': 0xb3d0,\\n  'Skein1024-904': 0xb3d1,\\n  'Skein1024-912': 0xb3d2,\\n  'Skein1024-920': 0xb3d3,\\n  'Skein1024-928': 0xb3d4,\\n  'Skein1024-936': 0xb3d5,\\n  'Skein1024-944': 0xb3d6,\\n  'Skein1024-952': 0xb3d7,\\n  'Skein1024-960': 0xb3d8,\\n  'Skein1024-968': 0xb3d9,\\n  'Skein1024-976': 0xb3da,\\n  'Skein1024-984': 0xb3db,\\n  'Skein1024-992': 0xb3dc,\\n  'Skein1024-1000': 0xb3dd,\\n  'Skein1024-1008': 0xb3de,\\n  'Skein1024-1016': 0xb3df,\\n  'Skein1024-1024': 0xb3e0\\n})\\n\\nexports.codes = Object.freeze({\\n  0x0: 'identity',\\n\\n  // sha family\\n  0x11: 'sha1',\\n  0x12: 'sha2-256',\\n  0x13: 'sha2-512',\\n  0x56: 'dbl-sha2-256',\\n  0x17: 'sha3-224',\\n  0x16: 'sha3-256',\\n  0x15: 'sha3-384',\\n  0x14: 'sha3-512',\\n  0x18: 'shake-128',\\n  0x19: 'shake-256',\\n  0x1A: 'keccak-224',\\n  0x1B: 'keccak-256',\\n  0x1C: 'keccak-384',\\n  0x1D: 'keccak-512',\\n\\n  0x22: 'murmur3-128',\\n  0x23: 'murmur3-32',\\n\\n  0xd4: 'md4',\\n  0xd5: 'md5',\\n\\n  // blake2\\n  0xb201: 'blake2b-8',\\n  0xb202: 'blake2b-16',\\n  0xb203: 'blake2b-24',\\n  0xb204: 'blake2b-32',\\n  0xb205: 'blake2b-40',\\n  0xb206: 'blake2b-48',\\n  0xb207: 'blake2b-56',\\n  0xb208: 'blake2b-64',\\n  0xb209: 'blake2b-72',\\n  0xb20a: 'blake2b-80',\\n  0xb20b: 'blake2b-88',\\n  0xb20c: 'blake2b-96',\\n  0xb20d: 'blake2b-104',\\n  0xb20e: 'blake2b-112',\\n  0xb20f: 'blake2b-120',\\n  0xb210: 'blake2b-128',\\n  0xb211: 'blake2b-136',\\n  0xb212: 'blake2b-144',\\n  0xb213: 'blake2b-152',\\n  0xb214: 'blake2b-160',\\n  0xb215: 'blake2b-168',\\n  0xb216: 'blake2b-176',\\n  0xb217: 'blake2b-184',\\n  0xb218: 'blake2b-192',\\n  0xb219: 'blake2b-200',\\n  0xb21a: 'blake2b-208',\\n  0xb21b: 'blake2b-216',\\n  0xb21c: 'blake2b-224',\\n  0xb21d: 'blake2b-232',\\n  0xb21e: 'blake2b-240',\\n  0xb21f: 'blake2b-248',\\n  0xb220: 'blake2b-256',\\n  0xb221: 'blake2b-264',\\n  0xb222: 'blake2b-272',\\n  0xb223: 'blake2b-280',\\n  0xb224: 'blake2b-288',\\n  0xb225: 'blake2b-296',\\n  0xb226: 'blake2b-304',\\n  0xb227: 'blake2b-312',\\n  0xb228: 'blake2b-320',\\n  0xb229: 'blake2b-328',\\n  0xb22a: 'blake2b-336',\\n  0xb22b: 'blake2b-344',\\n  0xb22c: 'blake2b-352',\\n  0xb22d: 'blake2b-360',\\n  0xb22e: 'blake2b-368',\\n  0xb22f: 'blake2b-376',\\n  0xb230: 'blake2b-384',\\n  0xb231: 'blake2b-392',\\n  0xb232: 'blake2b-400',\\n  0xb233: 'blake2b-408',\\n  0xb234: 'blake2b-416',\\n  0xb235: 'blake2b-424',\\n  0xb236: 'blake2b-432',\\n  0xb237: 'blake2b-440',\\n  0xb238: 'blake2b-448',\\n  0xb239: 'blake2b-456',\\n  0xb23a: 'blake2b-464',\\n  0xb23b: 'blake2b-472',\\n  0xb23c: 'blake2b-480',\\n  0xb23d: 'blake2b-488',\\n  0xb23e: 'blake2b-496',\\n  0xb23f: 'blake2b-504',\\n  0xb240: 'blake2b-512',\\n  0xb241: 'blake2s-8',\\n  0xb242: 'blake2s-16',\\n  0xb243: 'blake2s-24',\\n  0xb244: 'blake2s-32',\\n  0xb245: 'blake2s-40',\\n  0xb246: 'blake2s-48',\\n  0xb247: 'blake2s-56',\\n  0xb248: 'blake2s-64',\\n  0xb249: 'blake2s-72',\\n  0xb24a: 'blake2s-80',\\n  0xb24b: 'blake2s-88',\\n  0xb24c: 'blake2s-96',\\n  0xb24d: 'blake2s-104',\\n  0xb24e: 'blake2s-112',\\n  0xb24f: 'blake2s-120',\\n  0xb250: 'blake2s-128',\\n  0xb251: 'blake2s-136',\\n  0xb252: 'blake2s-144',\\n  0xb253: 'blake2s-152',\\n  0xb254: 'blake2s-160',\\n  0xb255: 'blake2s-168',\\n  0xb256: 'blake2s-176',\\n  0xb257: 'blake2s-184',\\n  0xb258: 'blake2s-192',\\n  0xb259: 'blake2s-200',\\n  0xb25a: 'blake2s-208',\\n  0xb25b: 'blake2s-216',\\n  0xb25c: 'blake2s-224',\\n  0xb25d: 'blake2s-232',\\n  0xb25e: 'blake2s-240',\\n  0xb25f: 'blake2s-248',\\n  0xb260: 'blake2s-256',\\n\\n  // skein\\n  0xb301: 'Skein256-8',\\n  0xb302: 'Skein256-16',\\n  0xb303: 'Skein256-24',\\n  0xb304: 'Skein256-32',\\n  0xb305: 'Skein256-40',\\n  0xb306: 'Skein256-48',\\n  0xb307: 'Skein256-56',\\n  0xb308: 'Skein256-64',\\n  0xb309: 'Skein256-72',\\n  0xb30a: 'Skein256-80',\\n  0xb30b: 'Skein256-88',\\n  0xb30c: 'Skein256-96',\\n  0xb30d: 'Skein256-104',\\n  0xb30e: 'Skein256-112',\\n  0xb30f: 'Skein256-120',\\n  0xb310: 'Skein256-128',\\n  0xb311: 'Skein256-136',\\n  0xb312: 'Skein256-144',\\n  0xb313: 'Skein256-152',\\n  0xb314: 'Skein256-160',\\n  0xb315: 'Skein256-168',\\n  0xb316: 'Skein256-176',\\n  0xb317: 'Skein256-184',\\n  0xb318: 'Skein256-192',\\n  0xb319: 'Skein256-200',\\n  0xb31a: 'Skein256-208',\\n  0xb31b: 'Skein256-216',\\n  0xb31c: 'Skein256-224',\\n  0xb31d: 'Skein256-232',\\n  0xb31e: 'Skein256-240',\\n  0xb31f: 'Skein256-248',\\n  0xb320: 'Skein256-256',\\n  0xb321: 'Skein512-8',\\n  0xb322: 'Skein512-16',\\n  0xb323: 'Skein512-24',\\n  0xb324: 'Skein512-32',\\n  0xb325: 'Skein512-40',\\n  0xb326: 'Skein512-48',\\n  0xb327: 'Skein512-56',\\n  0xb328: 'Skein512-64',\\n  0xb329: 'Skein512-72',\\n  0xb32a: 'Skein512-80',\\n  0xb32b: 'Skein512-88',\\n  0xb32c: 'Skein512-96',\\n  0xb32d: 'Skein512-104',\\n  0xb32e: 'Skein512-112',\\n  0xb32f: 'Skein512-120',\\n  0xb330: 'Skein512-128',\\n  0xb331: 'Skein512-136',\\n  0xb332: 'Skein512-144',\\n  0xb333: 'Skein512-152',\\n  0xb334: 'Skein512-160',\\n  0xb335: 'Skein512-168',\\n  0xb336: 'Skein512-176',\\n  0xb337: 'Skein512-184',\\n  0xb338: 'Skein512-192',\\n  0xb339: 'Skein512-200',\\n  0xb33a: 'Skein512-208',\\n  0xb33b: 'Skein512-216',\\n  0xb33c: 'Skein512-224',\\n  0xb33d: 'Skein512-232',\\n  0xb33e: 'Skein512-240',\\n  0xb33f: 'Skein512-248',\\n  0xb340: 'Skein512-256',\\n  0xb341: 'Skein512-264',\\n  0xb342: 'Skein512-272',\\n  0xb343: 'Skein512-280',\\n  0xb344: 'Skein512-288',\\n  0xb345: 'Skein512-296',\\n  0xb346: 'Skein512-304',\\n  0xb347: 'Skein512-312',\\n  0xb348: 'Skein512-320',\\n  0xb349: 'Skein512-328',\\n  0xb34a: 'Skein512-336',\\n  0xb34b: 'Skein512-344',\\n  0xb34c: 'Skein512-352',\\n  0xb34d: 'Skein512-360',\\n  0xb34e: 'Skein512-368',\\n  0xb34f: 'Skein512-376',\\n  0xb350: 'Skein512-384',\\n  0xb351: 'Skein512-392',\\n  0xb352: 'Skein512-400',\\n  0xb353: 'Skein512-408',\\n  0xb354: 'Skein512-416',\\n  0xb355: 'Skein512-424',\\n  0xb356: 'Skein512-432',\\n  0xb357: 'Skein512-440',\\n  0xb358: 'Skein512-448',\\n  0xb359: 'Skein512-456',\\n  0xb35a: 'Skein512-464',\\n  0xb35b: 'Skein512-472',\\n  0xb35c: 'Skein512-480',\\n  0xb35d: 'Skein512-488',\\n  0xb35e: 'Skein512-496',\\n  0xb35f: 'Skein512-504',\\n  0xb360: 'Skein512-512',\\n  0xb361: 'Skein1024-8',\\n  0xb362: 'Skein1024-16',\\n  0xb363: 'Skein1024-24',\\n  0xb364: 'Skein1024-32',\\n  0xb365: 'Skein1024-40',\\n  0xb366: 'Skein1024-48',\\n  0xb367: 'Skein1024-56',\\n  0xb368: 'Skein1024-64',\\n  0xb369: 'Skein1024-72',\\n  0xb36a: 'Skein1024-80',\\n  0xb36b: 'Skein1024-88',\\n  0xb36c: 'Skein1024-96',\\n  0xb36d: 'Skein1024-104',\\n  0xb36e: 'Skein1024-112',\\n  0xb36f: 'Skein1024-120',\\n  0xb370: 'Skein1024-128',\\n  0xb371: 'Skein1024-136',\\n  0xb372: 'Skein1024-144',\\n  0xb373: 'Skein1024-152',\\n  0xb374: 'Skein1024-160',\\n  0xb375: 'Skein1024-168',\\n  0xb376: 'Skein1024-176',\\n  0xb377: 'Skein1024-184',\\n  0xb378: 'Skein1024-192',\\n  0xb379: 'Skein1024-200',\\n  0xb37a: 'Skein1024-208',\\n  0xb37b: 'Skein1024-216',\\n  0xb37c: 'Skein1024-224',\\n  0xb37d: 'Skein1024-232',\\n  0xb37e: 'Skein1024-240',\\n  0xb37f: 'Skein1024-248',\\n  0xb380: 'Skein1024-256',\\n  0xb381: 'Skein1024-264',\\n  0xb382: 'Skein1024-272',\\n  0xb383: 'Skein1024-280',\\n  0xb384: 'Skein1024-288',\\n  0xb385: 'Skein1024-296',\\n  0xb386: 'Skein1024-304',\\n  0xb387: 'Skein1024-312',\\n  0xb388: 'Skein1024-320',\\n  0xb389: 'Skein1024-328',\\n  0xb38a: 'Skein1024-336',\\n  0xb38b: 'Skein1024-344',\\n  0xb38c: 'Skein1024-352',\\n  0xb38d: 'Skein1024-360',\\n  0xb38e: 'Skein1024-368',\\n  0xb38f: 'Skein1024-376',\\n  0xb390: 'Skein1024-384',\\n  0xb391: 'Skein1024-392',\\n  0xb392: 'Skein1024-400',\\n  0xb393: 'Skein1024-408',\\n  0xb394: 'Skein1024-416',\\n  0xb395: 'Skein1024-424',\\n  0xb396: 'Skein1024-432',\\n  0xb397: 'Skein1024-440',\\n  0xb398: 'Skein1024-448',\\n  0xb399: 'Skein1024-456',\\n  0xb39a: 'Skein1024-464',\\n  0xb39b: 'Skein1024-472',\\n  0xb39c: 'Skein1024-480',\\n  0xb39d: 'Skein1024-488',\\n  0xb39e: 'Skein1024-496',\\n  0xb39f: 'Skein1024-504',\\n  0xb3a0: 'Skein1024-512',\\n  0xb3a1: 'Skein1024-520',\\n  0xb3a2: 'Skein1024-528',\\n  0xb3a3: 'Skein1024-536',\\n  0xb3a4: 'Skein1024-544',\\n  0xb3a5: 'Skein1024-552',\\n  0xb3a6: 'Skein1024-560',\\n  0xb3a7: 'Skein1024-568',\\n  0xb3a8: 'Skein1024-576',\\n  0xb3a9: 'Skein1024-584',\\n  0xb3aa: 'Skein1024-592',\\n  0xb3ab: 'Skein1024-600',\\n  0xb3ac: 'Skein1024-608',\\n  0xb3ad: 'Skein1024-616',\\n  0xb3ae: 'Skein1024-624',\\n  0xb3af: 'Skein1024-632',\\n  0xb3b0: 'Skein1024-640',\\n  0xb3b1: 'Skein1024-648',\\n  0xb3b2: 'Skein1024-656',\\n  0xb3b3: 'Skein1024-664',\\n  0xb3b4: 'Skein1024-672',\\n  0xb3b5: 'Skein1024-680',\\n  0xb3b6: 'Skein1024-688',\\n  0xb3b7: 'Skein1024-696',\\n  0xb3b8: 'Skein1024-704',\\n  0xb3b9: 'Skein1024-712',\\n  0xb3ba: 'Skein1024-720',\\n  0xb3bb: 'Skein1024-728',\\n  0xb3bc: 'Skein1024-736',\\n  0xb3bd: 'Skein1024-744',\\n  0xb3be: 'Skein1024-752',\\n  0xb3bf: 'Skein1024-760',\\n  0xb3c0: 'Skein1024-768',\\n  0xb3c1: 'Skein1024-776',\\n  0xb3c2: 'Skein1024-784',\\n  0xb3c3: 'Skein1024-792',\\n  0xb3c4: 'Skein1024-800',\\n  0xb3c5: 'Skein1024-808',\\n  0xb3c6: 'Skein1024-816',\\n  0xb3c7: 'Skein1024-824',\\n  0xb3c8: 'Skein1024-832',\\n  0xb3c9: 'Skein1024-840',\\n  0xb3ca: 'Skein1024-848',\\n  0xb3cb: 'Skein1024-856',\\n  0xb3cc: 'Skein1024-864',\\n  0xb3cd: 'Skein1024-872',\\n  0xb3ce: 'Skein1024-880',\\n  0xb3cf: 'Skein1024-888',\\n  0xb3d0: 'Skein1024-896',\\n  0xb3d1: 'Skein1024-904',\\n  0xb3d2: 'Skein1024-912',\\n  0xb3d3: 'Skein1024-920',\\n  0xb3d4: 'Skein1024-928',\\n  0xb3d5: 'Skein1024-936',\\n  0xb3d6: 'Skein1024-944',\\n  0xb3d7: 'Skein1024-952',\\n  0xb3d8: 'Skein1024-960',\\n  0xb3d9: 'Skein1024-968',\\n  0xb3da: 'Skein1024-976',\\n  0xb3db: 'Skein1024-984',\\n  0xb3dc: 'Skein1024-992',\\n  0xb3dd: 'Skein1024-1000',\\n  0xb3de: 'Skein1024-1008',\\n  0xb3df: 'Skein1024-1016',\\n  0xb3e0: 'Skein1024-1024'\\n})\\n\\nexports.defaultLengths = Object.freeze({\\n  0x11: 20,\\n  0x12: 32,\\n  0x13: 64,\\n  0x56: 32,\\n  0x17: 28,\\n  0x16: 32,\\n  0x15: 48,\\n  0x14: 64,\\n  0x18: 32,\\n  0x19: 64,\\n  0x1A: 28,\\n  0x1B: 32,\\n  0x1C: 48,\\n  0x1D: 64,\\n  0x22: 32,\\n\\n  0xb201: 0x01,\\n  0xb202: 0x02,\\n  0xb203: 0x03,\\n  0xb204: 0x04,\\n  0xb205: 0x05,\\n  0xb206: 0x06,\\n  0xb207: 0x07,\\n  0xb208: 0x08,\\n  0xb209: 0x09,\\n  0xb20a: 0x0a,\\n  0xb20b: 0x0b,\\n  0xb20c: 0x0c,\\n  0xb20d: 0x0d,\\n  0xb20e: 0x0e,\\n  0xb20f: 0x0f,\\n  0xb210: 0x10,\\n  0xb211: 0x11,\\n  0xb212: 0x12,\\n  0xb213: 0x13,\\n  0xb214: 0x14,\\n  0xb215: 0x15,\\n  0xb216: 0x16,\\n  0xb217: 0x17,\\n  0xb218: 0x18,\\n  0xb219: 0x19,\\n  0xb21a: 0x1a,\\n  0xb21b: 0x1b,\\n  0xb21c: 0x1c,\\n  0xb21d: 0x1d,\\n  0xb21e: 0x1e,\\n  0xb21f: 0x1f,\\n  0xb220: 0x20,\\n  0xb221: 0x21,\\n  0xb222: 0x22,\\n  0xb223: 0x23,\\n  0xb224: 0x24,\\n  0xb225: 0x25,\\n  0xb226: 0x26,\\n  0xb227: 0x27,\\n  0xb228: 0x28,\\n  0xb229: 0x29,\\n  0xb22a: 0x2a,\\n  0xb22b: 0x2b,\\n  0xb22c: 0x2c,\\n  0xb22d: 0x2d,\\n  0xb22e: 0x2e,\\n  0xb22f: 0x2f,\\n  0xb230: 0x30,\\n  0xb231: 0x31,\\n  0xb232: 0x32,\\n  0xb233: 0x33,\\n  0xb234: 0x34,\\n  0xb235: 0x35,\\n  0xb236: 0x36,\\n  0xb237: 0x37,\\n  0xb238: 0x38,\\n  0xb239: 0x39,\\n  0xb23a: 0x3a,\\n  0xb23b: 0x3b,\\n  0xb23c: 0x3c,\\n  0xb23d: 0x3d,\\n  0xb23e: 0x3e,\\n  0xb23f: 0x3f,\\n  0xb240: 0x40,\\n  0xb241: 0x01,\\n  0xb242: 0x02,\\n  0xb243: 0x03,\\n  0xb244: 0x04,\\n  0xb245: 0x05,\\n  0xb246: 0x06,\\n  0xb247: 0x07,\\n  0xb248: 0x08,\\n  0xb249: 0x09,\\n  0xb24a: 0x0a,\\n  0xb24b: 0x0b,\\n  0xb24c: 0x0c,\\n  0xb24d: 0x0d,\\n  0xb24e: 0x0e,\\n  0xb24f: 0x0f,\\n  0xb250: 0x10,\\n  0xb251: 0x11,\\n  0xb252: 0x12,\\n  0xb253: 0x13,\\n  0xb254: 0x14,\\n  0xb255: 0x15,\\n  0xb256: 0x16,\\n  0xb257: 0x17,\\n  0xb258: 0x18,\\n  0xb259: 0x19,\\n  0xb25a: 0x1a,\\n  0xb25b: 0x1b,\\n  0xb25c: 0x1c,\\n  0xb25d: 0x1d,\\n  0xb25e: 0x1e,\\n  0xb25f: 0x1f,\\n  0xb260: 0x20,\\n  0xb301: 0x01,\\n  0xb302: 0x02,\\n  0xb303: 0x03,\\n  0xb304: 0x04,\\n  0xb305: 0x05,\\n  0xb306: 0x06,\\n  0xb307: 0x07,\\n  0xb308: 0x08,\\n  0xb309: 0x09,\\n  0xb30a: 0x0a,\\n  0xb30b: 0x0b,\\n  0xb30c: 0x0c,\\n  0xb30d: 0x0d,\\n  0xb30e: 0x0e,\\n  0xb30f: 0x0f,\\n  0xb310: 0x10,\\n  0xb311: 0x11,\\n  0xb312: 0x12,\\n  0xb313: 0x13,\\n  0xb314: 0x14,\\n  0xb315: 0x15,\\n  0xb316: 0x16,\\n  0xb317: 0x17,\\n  0xb318: 0x18,\\n  0xb319: 0x19,\\n  0xb31a: 0x1a,\\n  0xb31b: 0x1b,\\n  0xb31c: 0x1c,\\n  0xb31d: 0x1d,\\n  0xb31e: 0x1e,\\n  0xb31f: 0x1f,\\n  0xb320: 0x20,\\n  0xb321: 0x01,\\n  0xb322: 0x02,\\n  0xb323: 0x03,\\n  0xb324: 0x04,\\n  0xb325: 0x05,\\n  0xb326: 0x06,\\n  0xb327: 0x07,\\n  0xb328: 0x08,\\n  0xb329: 0x09,\\n  0xb32a: 0x0a,\\n  0xb32b: 0x0b,\\n  0xb32c: 0x0c,\\n  0xb32d: 0x0d,\\n  0xb32e: 0x0e,\\n  0xb32f: 0x0f,\\n  0xb330: 0x10,\\n  0xb331: 0x11,\\n  0xb332: 0x12,\\n  0xb333: 0x13,\\n  0xb334: 0x14,\\n  0xb335: 0x15,\\n  0xb336: 0x16,\\n  0xb337: 0x17,\\n  0xb338: 0x18,\\n  0xb339: 0x19,\\n  0xb33a: 0x1a,\\n  0xb33b: 0x1b,\\n  0xb33c: 0x1c,\\n  0xb33d: 0x1d,\\n  0xb33e: 0x1e,\\n  0xb33f: 0x1f,\\n  0xb340: 0x20,\\n  0xb341: 0x21,\\n  0xb342: 0x22,\\n  0xb343: 0x23,\\n  0xb344: 0x24,\\n  0xb345: 0x25,\\n  0xb346: 0x26,\\n  0xb347: 0x27,\\n  0xb348: 0x28,\\n  0xb349: 0x29,\\n  0xb34a: 0x2a,\\n  0xb34b: 0x2b,\\n  0xb34c: 0x2c,\\n  0xb34d: 0x2d,\\n  0xb34e: 0x2e,\\n  0xb34f: 0x2f,\\n  0xb350: 0x30,\\n  0xb351: 0x31,\\n  0xb352: 0x32,\\n  0xb353: 0x33,\\n  0xb354: 0x34,\\n  0xb355: 0x35,\\n  0xb356: 0x36,\\n  0xb357: 0x37,\\n  0xb358: 0x38,\\n  0xb359: 0x39,\\n  0xb35a: 0x3a,\\n  0xb35b: 0x3b,\\n  0xb35c: 0x3c,\\n  0xb35d: 0x3d,\\n  0xb35e: 0x3e,\\n  0xb35f: 0x3f,\\n  0xb360: 0x40,\\n  0xb361: 0x01,\\n  0xb362: 0x02,\\n  0xb363: 0x03,\\n  0xb364: 0x04,\\n  0xb365: 0x05,\\n  0xb366: 0x06,\\n  0xb367: 0x07,\\n  0xb368: 0x08,\\n  0xb369: 0x09,\\n  0xb36a: 0x0a,\\n  0xb36b: 0x0b,\\n  0xb36c: 0x0c,\\n  0xb36d: 0x0d,\\n  0xb36e: 0x0e,\\n  0xb36f: 0x0f,\\n  0xb370: 0x10,\\n  0xb371: 0x11,\\n  0xb372: 0x12,\\n  0xb373: 0x13,\\n  0xb374: 0x14,\\n  0xb375: 0x15,\\n  0xb376: 0x16,\\n  0xb377: 0x17,\\n  0xb378: 0x18,\\n  0xb379: 0x19,\\n  0xb37a: 0x1a,\\n  0xb37b: 0x1b,\\n  0xb37c: 0x1c,\\n  0xb37d: 0x1d,\\n  0xb37e: 0x1e,\\n  0xb37f: 0x1f,\\n  0xb380: 0x20,\\n  0xb381: 0x21,\\n  0xb382: 0x22,\\n  0xb383: 0x23,\\n  0xb384: 0x24,\\n  0xb385: 0x25,\\n  0xb386: 0x26,\\n  0xb387: 0x27,\\n  0xb388: 0x28,\\n  0xb389: 0x29,\\n  0xb38a: 0x2a,\\n  0xb38b: 0x2b,\\n  0xb38c: 0x2c,\\n  0xb38d: 0x2d,\\n  0xb38e: 0x2e,\\n  0xb38f: 0x2f,\\n  0xb390: 0x30,\\n  0xb391: 0x31,\\n  0xb392: 0x32,\\n  0xb393: 0x33,\\n  0xb394: 0x34,\\n  0xb395: 0x35,\\n  0xb396: 0x36,\\n  0xb397: 0x37,\\n  0xb398: 0x38,\\n  0xb399: 0x39,\\n  0xb39a: 0x3a,\\n  0xb39b: 0x3b,\\n  0xb39c: 0x3c,\\n  0xb39d: 0x3d,\\n  0xb39e: 0x3e,\\n  0xb39f: 0x3f,\\n  0xb3a0: 0x40,\\n  0xb3a1: 0x41,\\n  0xb3a2: 0x42,\\n  0xb3a3: 0x43,\\n  0xb3a4: 0x44,\\n  0xb3a5: 0x45,\\n  0xb3a6: 0x46,\\n  0xb3a7: 0x47,\\n  0xb3a8: 0x48,\\n  0xb3a9: 0x49,\\n  0xb3aa: 0x4a,\\n  0xb3ab: 0x4b,\\n  0xb3ac: 0x4c,\\n  0xb3ad: 0x4d,\\n  0xb3ae: 0x4e,\\n  0xb3af: 0x4f,\\n  0xb3b0: 0x50,\\n  0xb3b1: 0x51,\\n  0xb3b2: 0x52,\\n  0xb3b3: 0x53,\\n  0xb3b4: 0x54,\\n  0xb3b5: 0x55,\\n  0xb3b6: 0x56,\\n  0xb3b7: 0x57,\\n  0xb3b8: 0x58,\\n  0xb3b9: 0x59,\\n  0xb3ba: 0x5a,\\n  0xb3bb: 0x5b,\\n  0xb3bc: 0x5c,\\n  0xb3bd: 0x5d,\\n  0xb3be: 0x5e,\\n  0xb3bf: 0x5f,\\n  0xb3c0: 0x60,\\n  0xb3c1: 0x61,\\n  0xb3c2: 0x62,\\n  0xb3c3: 0x63,\\n  0xb3c4: 0x64,\\n  0xb3c5: 0x65,\\n  0xb3c6: 0x66,\\n  0xb3c7: 0x67,\\n  0xb3c8: 0x68,\\n  0xb3c9: 0x69,\\n  0xb3ca: 0x6a,\\n  0xb3cb: 0x6b,\\n  0xb3cc: 0x6c,\\n  0xb3cd: 0x6d,\\n  0xb3ce: 0x6e,\\n  0xb3cf: 0x6f,\\n  0xb3d0: 0x70,\\n  0xb3d1: 0x71,\\n  0xb3d2: 0x72,\\n  0xb3d3: 0x73,\\n  0xb3d4: 0x74,\\n  0xb3d5: 0x75,\\n  0xb3d6: 0x76,\\n  0xb3d7: 0x77,\\n  0xb3d8: 0x78,\\n  0xb3d9: 0x79,\\n  0xb3da: 0x7a,\\n  0xb3db: 0x7b,\\n  0xb3dc: 0x7c,\\n  0xb3dd: 0x7d,\\n  0xb3de: 0x7e,\\n  0xb3df: 0x7f,\\n  0xb3e0: 0x80\\n})\\n\\n},{}],64:[function(require,module,exports){\\n/**\\n * Multihash implementation in JavaScript.\\n *\\n * @module multihash\\n */\\n'use strict'\\n\\nconst { Buffer } = require('buffer')\\nconst multibase = require('multibase')\\nconst varint = require('varint')\\nconst cs = require('./constants')\\n\\nexports.names = cs.names\\nexports.codes = cs.codes\\nexports.defaultLengths = cs.defaultLengths\\n\\n/**\\n * Convert the given multihash to a hex encoded string.\\n *\\n * @param {Buffer} hash\\n * @returns {string}\\n */\\nexports.toHexString = function toHexString (hash) {\\n  if (!Buffer.isBuffer(hash)) {\\n    throw new Error('must be passed a buffer')\\n  }\\n\\n  return hash.toString('hex')\\n}\\n\\n/**\\n * Convert the given hex encoded string to a multihash.\\n *\\n * @param {string} hash\\n * @returns {Buffer}\\n */\\nexports.fromHexString = function fromHexString (hash) {\\n  return Buffer.from(hash, 'hex')\\n}\\n\\n/**\\n * Convert the given multihash to a base58 encoded string.\\n *\\n * @param {Buffer} hash\\n * @returns {string}\\n */\\nexports.toB58String = function toB58String (hash) {\\n  if (!Buffer.isBuffer(hash)) {\\n    throw new Error('must be passed a buffer')\\n  }\\n\\n  return multibase.encode('base58btc', hash).toString().slice(1)\\n}\\n\\n/**\\n * Convert the given base58 encoded string to a multihash.\\n *\\n * @param {string|Buffer} hash\\n * @returns {Buffer}\\n */\\nexports.fromB58String = function fromB58String (hash) {\\n  let encoded = hash\\n  if (Buffer.isBuffer(hash)) {\\n    encoded = hash.toString()\\n  }\\n\\n  return multibase.decode('z' + encoded)\\n}\\n\\n/**\\n * Decode a hash from the given multihash.\\n *\\n * @param {Buffer} buf\\n * @returns {{code: number, name: string, length: number, digest: Buffer}} result\\n */\\nexports.decode = function decode (buf) {\\n  if (!(Buffer.isBuffer(buf))) {\\n    throw new Error('multihash must be a Buffer')\\n  }\\n\\n  if (buf.length < 2) {\\n    throw new Error('multihash too short. must be > 2 bytes.')\\n  }\\n\\n  const code = varint.decode(buf)\\n  if (!exports.isValidCode(code)) {\\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\\n  }\\n  buf = buf.slice(varint.decode.bytes)\\n\\n  const len = varint.decode(buf)\\n  if (len < 0) {\\n    throw new Error(`multihash invalid length: ${len}`)\\n  }\\n  buf = buf.slice(varint.decode.bytes)\\n\\n  if (buf.length !== len) {\\n    throw new Error(`multihash length inconsistent: 0x${buf.toString('hex')}`)\\n  }\\n\\n  return {\\n    code: code,\\n    name: cs.codes[code],\\n    length: len,\\n    digest: buf\\n  }\\n}\\n\\n/**\\n *  Encode a hash digest along with the specified function code.\\n *\\n * > **Note:** the length is derived from the length of the digest itself.\\n *\\n * @param {Buffer} digest\\n * @param {string|number} code\\n * @param {number} [length]\\n * @returns {Buffer}\\n */\\nexports.encode = function encode (digest, code, length) {\\n  if (!digest || code === undefined) {\\n    throw new Error('multihash encode requires at least two args: digest, code')\\n  }\\n\\n  // ensure it's a hashfunction code.\\n  const hashfn = exports.coerceCode(code)\\n\\n  if (!(Buffer.isBuffer(digest))) {\\n    throw new Error('digest should be a Buffer')\\n  }\\n\\n  if (length == null) {\\n    length = digest.length\\n  }\\n\\n  if (length && digest.length !== length) {\\n    throw new Error('digest length should be equal to specified length.')\\n  }\\n\\n  return Buffer.concat([\\n    Buffer.from(varint.encode(hashfn)),\\n    Buffer.from(varint.encode(length)),\\n    digest\\n  ])\\n}\\n\\n/**\\n * Converts a hash function name into the matching code.\\n * If passed a number it will return the number if it's a valid code.\\n * @param {string|number} name\\n * @returns {number}\\n */\\nexports.coerceCode = function coerceCode (name) {\\n  let code = name\\n\\n  if (typeof name === 'string') {\\n    if (cs.names[name] === undefined) {\\n      throw new Error(`Unrecognized hash function named: ${name}`)\\n    }\\n    code = cs.names[name]\\n  }\\n\\n  if (typeof code !== 'number') {\\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\\n  }\\n\\n  if (cs.codes[code] === undefined && !exports.isAppCode(code)) {\\n    throw new Error(`Unrecognized function code: ${code}`)\\n  }\\n\\n  return code\\n}\\n\\n/**\\n * Checks wether a code is part of the app range\\n *\\n * @param {number} code\\n * @returns {boolean}\\n */\\nexports.isAppCode = function appCode (code) {\\n  return code > 0 && code < 0x10\\n}\\n\\n/**\\n * Checks whether a multihash code is valid.\\n *\\n * @param {number} code\\n * @returns {boolean}\\n */\\nexports.isValidCode = function validCode (code) {\\n  if (exports.isAppCode(code)) {\\n    return true\\n  }\\n\\n  if (cs.codes[code]) {\\n    return true\\n  }\\n\\n  return false\\n}\\n\\n/**\\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\\n *\\n * @param {Buffer} multihash\\n * @returns {undefined}\\n * @throws {Error}\\n */\\nfunction validate (multihash) {\\n  exports.decode(multihash) // throws if bad.\\n}\\nexports.validate = validate\\n\\n/**\\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\\n *\\n * @param {Buffer} multihash\\n * @returns {undefined}\\n * @throws {Error}\\n */\\nexports.prefix = function prefix (multihash) {\\n  validate(multihash)\\n\\n  return multihash.slice(0, 2)\\n}\\n\\n},{\\\"./constants\\\":63,\\\"buffer\\\":7,\\\"multibase\\\":55,\\\"varint\\\":86}],65:[function(require,module,exports){\\n// Top level file is just a mixin of submodules & constants\\n'use strict';\\n\\nvar assign    = require('./lib/utils/common').assign;\\n\\nvar deflate   = require('./lib/deflate');\\nvar inflate   = require('./lib/inflate');\\nvar constants = require('./lib/zlib/constants');\\n\\nvar pako = {};\\n\\nassign(pako, deflate, inflate, constants);\\n\\nmodule.exports = pako;\\n\\n},{\\\"./lib/deflate\\\":66,\\\"./lib/inflate\\\":67,\\\"./lib/utils/common\\\":68,\\\"./lib/zlib/constants\\\":71}],66:[function(require,module,exports){\\n'use strict';\\n\\n\\nvar zlib_deflate = require('./zlib/deflate');\\nvar utils        = require('./utils/common');\\nvar strings      = require('./utils/strings');\\nvar msg          = require('./zlib/messages');\\nvar ZStream      = require('./zlib/zstream');\\n\\nvar toString = Object.prototype.toString;\\n\\n/* Public constants ==========================================================*/\\n/* ===========================================================================*/\\n\\nvar Z_NO_FLUSH      = 0;\\nvar Z_FINISH        = 4;\\n\\nvar Z_OK            = 0;\\nvar Z_STREAM_END    = 1;\\nvar Z_SYNC_FLUSH    = 2;\\n\\nvar Z_DEFAULT_COMPRESSION = -1;\\n\\nvar Z_DEFAULT_STRATEGY    = 0;\\n\\nvar Z_DEFLATED  = 8;\\n\\n/* ===========================================================================*/\\n\\n\\n/**\\n * class Deflate\\n *\\n * Generic JS-style wrapper for zlib calls. If you don't need\\n * streaming behaviour - use more simple functions: [[deflate]],\\n * [[deflateRaw]] and [[gzip]].\\n **/\\n\\n/* internal\\n * Deflate.chunks -> Array\\n *\\n * Chunks of output data, if [[Deflate#onData]] not overridden.\\n **/\\n\\n/**\\n * Deflate.result -> Uint8Array|Array\\n *\\n * Compressed result, generated by default [[Deflate#onData]]\\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\\n * push a chunk with explicit flush (call [[Deflate#push]] with\\n * `Z_SYNC_FLUSH` param).\\n **/\\n\\n/**\\n * Deflate.err -> Number\\n *\\n * Error code after deflate finished. 0 (Z_OK) on success.\\n * You will not need it in real life, because deflate errors\\n * are possible only on wrong options or bad `onData` / `onEnd`\\n * custom handlers.\\n **/\\n\\n/**\\n * Deflate.msg -> String\\n *\\n * Error message, if [[Deflate.err]] != 0\\n **/\\n\\n\\n/**\\n * new Deflate(options)\\n * - options (Object): zlib deflate options.\\n *\\n * Creates new deflator instance with specified params. Throws exception\\n * on bad params. Supported options:\\n *\\n * - `level`\\n * - `windowBits`\\n * - `memLevel`\\n * - `strategy`\\n * - `dictionary`\\n *\\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\\n * for more information on these.\\n *\\n * Additional options, for internal needs:\\n *\\n * - `chunkSize` - size of generated data chunks (16K by default)\\n * - `raw` (Boolean) - do raw deflate\\n * - `gzip` (Boolean) - create gzip wrapper\\n * - `to` (String) - if equal to 'string', then result will be \\\"binary string\\\"\\n *    (each char code [0..255])\\n * - `header` (Object) - custom header for gzip\\n *   - `text` (Boolean) - true if compressed data believed to be text\\n *   - `time` (Number) - modification time, unix timestamp\\n *   - `os` (Number) - operation system code\\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\\n *   - `name` (String) - file name (binary string)\\n *   - `comment` (String) - comment (binary string)\\n *   - `hcrc` (Boolean) - true if header crc should be added\\n *\\n * ##### Example:\\n *\\n * ```javascript\\n * var pako = require('pako')\\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\\n *\\n * var deflate = new pako.Deflate({ level: 3});\\n *\\n * deflate.push(chunk1, false);\\n * deflate.push(chunk2, true);  // true -> last chunk\\n *\\n * if (deflate.err) { throw new Error(deflate.err); }\\n *\\n * console.log(deflate.result);\\n * ```\\n **/\\nfunction Deflate(options) {\\n  if (!(this instanceof Deflate)) return new Deflate(options);\\n\\n  this.options = utils.assign({\\n    level: Z_DEFAULT_COMPRESSION,\\n    method: Z_DEFLATED,\\n    chunkSize: 16384,\\n    windowBits: 15,\\n    memLevel: 8,\\n    strategy: Z_DEFAULT_STRATEGY,\\n    to: ''\\n  }, options || {});\\n\\n  var opt = this.options;\\n\\n  if (opt.raw && (opt.windowBits > 0)) {\\n    opt.windowBits = -opt.windowBits;\\n  }\\n\\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\\n    opt.windowBits += 16;\\n  }\\n\\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\\n  this.msg    = '';     // error message\\n  this.ended  = false;  // used to avoid multiple onEnd() calls\\n  this.chunks = [];     // chunks of compressed data\\n\\n  this.strm = new ZStream();\\n  this.strm.avail_out = 0;\\n\\n  var status = zlib_deflate.deflateInit2(\\n    this.strm,\\n    opt.level,\\n    opt.method,\\n    opt.windowBits,\\n    opt.memLevel,\\n    opt.strategy\\n  );\\n\\n  if (status !== Z_OK) {\\n    throw new Error(msg[status]);\\n  }\\n\\n  if (opt.header) {\\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\\n  }\\n\\n  if (opt.dictionary) {\\n    var dict;\\n    // Convert data if needed\\n    if (typeof opt.dictionary === 'string') {\\n      // If we need to compress text, change encoding to utf8.\\n      dict = strings.string2buf(opt.dictionary);\\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\\n      dict = new Uint8Array(opt.dictionary);\\n    } else {\\n      dict = opt.dictionary;\\n    }\\n\\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\\n\\n    if (status !== Z_OK) {\\n      throw new Error(msg[status]);\\n    }\\n\\n    this._dict_set = true;\\n  }\\n}\\n\\n/**\\n * Deflate#push(data[, mode]) -> Boolean\\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\\n *   converted to utf8 byte sequence.\\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\\n *\\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\\n * new compressed chunks. Returns `true` on success. The last data block must have\\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\\n *\\n * On fail call [[Deflate#onEnd]] with error code and return false.\\n *\\n * We strongly recommend to use `Uint8Array` on input for best speed (output\\n * array format is detected automatically). Also, don't skip last param and always\\n * use the same type in your code (boolean or number). That will improve JS speed.\\n *\\n * For regular `Array`-s make sure all elements are [0..255].\\n *\\n * ##### Example\\n *\\n * ```javascript\\n * push(chunk, false); // push one of data chunks\\n * ...\\n * push(chunk, true);  // push last chunk\\n * ```\\n **/\\nDeflate.prototype.push = function (data, mode) {\\n  var strm = this.strm;\\n  var chunkSize = this.options.chunkSize;\\n  var status, _mode;\\n\\n  if (this.ended) { return false; }\\n\\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\\n\\n  // Convert data if needed\\n  if (typeof data === 'string') {\\n    // If we need to compress text, change encoding to utf8.\\n    strm.input = strings.string2buf(data);\\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\\n    strm.input = new Uint8Array(data);\\n  } else {\\n    strm.input = data;\\n  }\\n\\n  strm.next_in = 0;\\n  strm.avail_in = strm.input.length;\\n\\n  do {\\n    if (strm.avail_out === 0) {\\n      strm.output = new utils.Buf8(chunkSize);\\n      strm.next_out = 0;\\n      strm.avail_out = chunkSize;\\n    }\\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\\n\\n    if (status !== Z_STREAM_END && status !== Z_OK) {\\n      this.onEnd(status);\\n      this.ended = true;\\n      return false;\\n    }\\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\\n      if (this.options.to === 'string') {\\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\\n      } else {\\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\\n      }\\n    }\\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\\n\\n  // Finalize on the last chunk.\\n  if (_mode === Z_FINISH) {\\n    status = zlib_deflate.deflateEnd(this.strm);\\n    this.onEnd(status);\\n    this.ended = true;\\n    return status === Z_OK;\\n  }\\n\\n  // callback interim results if Z_SYNC_FLUSH.\\n  if (_mode === Z_SYNC_FLUSH) {\\n    this.onEnd(Z_OK);\\n    strm.avail_out = 0;\\n    return true;\\n  }\\n\\n  return true;\\n};\\n\\n\\n/**\\n * Deflate#onData(chunk) -> Void\\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\\n *   on js engine support. When string output requested, each chunk\\n *   will be string.\\n *\\n * By default, stores data blocks in `chunks[]` property and glue\\n * those in `onEnd`. Override this handler, if you need another behaviour.\\n **/\\nDeflate.prototype.onData = function (chunk) {\\n  this.chunks.push(chunk);\\n};\\n\\n\\n/**\\n * Deflate#onEnd(status) -> Void\\n * - status (Number): deflate status. 0 (Z_OK) on success,\\n *   other if not.\\n *\\n * Called once after you tell deflate that the input stream is\\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\\n * or if an error happened. By default - join collected chunks,\\n * free memory and fill `results` / `err` properties.\\n **/\\nDeflate.prototype.onEnd = function (status) {\\n  // On success - join\\n  if (status === Z_OK) {\\n    if (this.options.to === 'string') {\\n      this.result = this.chunks.join('');\\n    } else {\\n      this.result = utils.flattenChunks(this.chunks);\\n    }\\n  }\\n  this.chunks = [];\\n  this.err = status;\\n  this.msg = this.strm.msg;\\n};\\n\\n\\n/**\\n * deflate(data[, options]) -> Uint8Array|Array|String\\n * - data (Uint8Array|Array|String): input data to compress.\\n * - options (Object): zlib deflate options.\\n *\\n * Compress `data` with deflate algorithm and `options`.\\n *\\n * Supported options are:\\n *\\n * - level\\n * - windowBits\\n * - memLevel\\n * - strategy\\n * - dictionary\\n *\\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\\n * for more information on these.\\n *\\n * Sugar (options):\\n *\\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\\n *   negative windowBits implicitly.\\n * - `to` (String) - if equal to 'string', then result will be \\\"binary string\\\"\\n *    (each char code [0..255])\\n *\\n * ##### Example:\\n *\\n * ```javascript\\n * var pako = require('pako')\\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\\n *\\n * console.log(pako.deflate(data));\\n * ```\\n **/\\nfunction deflate(input, options) {\\n  var deflator = new Deflate(options);\\n\\n  deflator.push(input, true);\\n\\n  // That will never happens, if you don't cheat with options :)\\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\\n\\n  return deflator.result;\\n}\\n\\n\\n/**\\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\\n * - data (Uint8Array|Array|String): input data to compress.\\n * - options (Object): zlib deflate options.\\n *\\n * The same as [[deflate]], but creates raw data, without wrapper\\n * (header and adler32 crc).\\n **/\\nfunction deflateRaw(input, options) {\\n  options = options || {};\\n  options.raw = true;\\n  return deflate(input, options);\\n}\\n\\n\\n/**\\n * gzip(data[, options]) -> Uint8Array|Array|String\\n * - data (Uint8Array|Array|String): input data to compress.\\n * - options (Object): zlib deflate options.\\n *\\n * The same as [[deflate]], but create gzip wrapper instead of\\n * deflate one.\\n **/\\nfunction gzip(input, options) {\\n  options = options || {};\\n  options.gzip = true;\\n  return deflate(input, options);\\n}\\n\\n\\nexports.Deflate = Deflate;\\nexports.deflate = deflate;\\nexports.deflateRaw = deflateRaw;\\nexports.gzip = gzip;\\n\\n},{\\\"./utils/common\\\":68,\\\"./utils/strings\\\":69,\\\"./zlib/deflate\\\":73,\\\"./zlib/messages\\\":78,\\\"./zlib/zstream\\\":80}],67:[function(require,module,exports){\\n'use strict';\\n\\n\\nvar zlib_inflate = require('./zlib/inflate');\\nvar utils        = require('./utils/common');\\nvar strings      = require('./utils/strings');\\nvar c            = require('./zlib/constants');\\nvar msg          = require('./zlib/messages');\\nvar ZStream      = require('./zlib/zstream');\\nvar GZheader     = require('./zlib/gzheader');\\n\\nvar toString = Object.prototype.toString;\\n\\n/**\\n * class Inflate\\n *\\n * Generic JS-style wrapper for zlib calls. If you don't need\\n * streaming behaviour - use more simple functions: [[inflate]]\\n * and [[inflateRaw]].\\n **/\\n\\n/* internal\\n * inflate.chunks -> Array\\n *\\n * Chunks of output data, if [[Inflate#onData]] not overridden.\\n **/\\n\\n/**\\n * Inflate.result -> Uint8Array|Array|String\\n *\\n * Uncompressed result, generated by default [[Inflate#onData]]\\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\\n * push a chunk with explicit flush (call [[Inflate#push]] with\\n * `Z_SYNC_FLUSH` param).\\n **/\\n\\n/**\\n * Inflate.err -> Number\\n *\\n * Error code after inflate finished. 0 (Z_OK) on success.\\n * Should be checked if broken data possible.\\n **/\\n\\n/**\\n * Inflate.msg -> String\\n *\\n * Error message, if [[Inflate.err]] != 0\\n **/\\n\\n\\n/**\\n * new Inflate(options)\\n * - options (Object): zlib inflate options.\\n *\\n * Creates new inflator instance with specified params. Throws exception\\n * on bad params. Supported options:\\n *\\n * - `windowBits`\\n * - `dictionary`\\n *\\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\\n * for more information on these.\\n *\\n * Additional options, for internal needs:\\n *\\n * - `chunkSize` - size of generated data chunks (16K by default)\\n * - `raw` (Boolean) - do raw inflate\\n * - `to` (String) - if equal to 'string', then result will be converted\\n *   from utf8 to utf16 (javascript) string. When string output requested,\\n *   chunk length can differ from `chunkSize`, depending on content.\\n *\\n * By default, when no options set, autodetect deflate/gzip data format via\\n * wrapper header.\\n *\\n * ##### Example:\\n *\\n * ```javascript\\n * var pako = require('pako')\\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\\n *\\n * var inflate = new pako.Inflate({ level: 3});\\n *\\n * inflate.push(chunk1, false);\\n * inflate.push(chunk2, true);  // true -> last chunk\\n *\\n * if (inflate.err) { throw new Error(inflate.err); }\\n *\\n * console.log(inflate.result);\\n * ```\\n **/\\nfunction Inflate(options) {\\n  if (!(this instanceof Inflate)) return new Inflate(options);\\n\\n  this.options = utils.assign({\\n    chunkSize: 16384,\\n    windowBits: 0,\\n    to: ''\\n  }, options || {});\\n\\n  var opt = this.options;\\n\\n  // Force window size for `raw` data, if not set directly,\\n  // because we have no header for autodetect.\\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\\n    opt.windowBits = -opt.windowBits;\\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\\n  }\\n\\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\\n      !(options && options.windowBits)) {\\n    opt.windowBits += 32;\\n  }\\n\\n  // Gzip header has no info about windows size, we can do autodetect only\\n  // for deflate. So, if window size not set, force it to max when gzip possible\\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\\n    // bit 3 (16) -> gzipped data\\n    // bit 4 (32) -> autodetect gzip/deflate\\n    if ((opt.windowBits & 15) === 0) {\\n      opt.windowBits |= 15;\\n    }\\n  }\\n\\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\\n  this.msg    = '';     // error message\\n  this.ended  = false;  // used to avoid multiple onEnd() calls\\n  this.chunks = [];     // chunks of compressed data\\n\\n  this.strm   = new ZStream();\\n  this.strm.avail_out = 0;\\n\\n  var status  = zlib_inflate.inflateInit2(\\n    this.strm,\\n    opt.windowBits\\n  );\\n\\n  if (status !== c.Z_OK) {\\n    throw new Error(msg[status]);\\n  }\\n\\n  this.header = new GZheader();\\n\\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\\n\\n  // Setup dictionary\\n  if (opt.dictionary) {\\n    // Convert data if needed\\n    if (typeof opt.dictionary === 'string') {\\n      opt.dictionary = strings.string2buf(opt.dictionary);\\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\\n      opt.dictionary = new Uint8Array(opt.dictionary);\\n    }\\n    if (opt.raw) { //In raw mode we need to set the dictionary early\\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\\n      if (status !== c.Z_OK) {\\n        throw new Error(msg[status]);\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * Inflate#push(data[, mode]) -> Boolean\\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\\n *\\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\\n * new output chunks. Returns `true` on success. The last data block must have\\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\\n *\\n * On fail call [[Inflate#onEnd]] with error code and return false.\\n *\\n * We strongly recommend to use `Uint8Array` on input for best speed (output\\n * format is detected automatically). Also, don't skip last param and always\\n * use the same type in your code (boolean or number). That will improve JS speed.\\n *\\n * For regular `Array`-s make sure all elements are [0..255].\\n *\\n * ##### Example\\n *\\n * ```javascript\\n * push(chunk, false); // push one of data chunks\\n * ...\\n * push(chunk, true);  // push last chunk\\n * ```\\n **/\\nInflate.prototype.push = function (data, mode) {\\n  var strm = this.strm;\\n  var chunkSize = this.options.chunkSize;\\n  var dictionary = this.options.dictionary;\\n  var status, _mode;\\n  var next_out_utf8, tail, utf8str;\\n\\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\\n  // when we check that all output data was flushed.\\n  var allowBufError = false;\\n\\n  if (this.ended) { return false; }\\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\\n\\n  // Convert data if needed\\n  if (typeof data === 'string') {\\n    // Only binary strings can be decompressed on practice\\n    strm.input = strings.binstring2buf(data);\\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\\n    strm.input = new Uint8Array(data);\\n  } else {\\n    strm.input = data;\\n  }\\n\\n  strm.next_in = 0;\\n  strm.avail_in = strm.input.length;\\n\\n  do {\\n    if (strm.avail_out === 0) {\\n      strm.output = new utils.Buf8(chunkSize);\\n      strm.next_out = 0;\\n      strm.avail_out = chunkSize;\\n    }\\n\\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\\n\\n    if (status === c.Z_NEED_DICT && dictionary) {\\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\\n    }\\n\\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\\n      status = c.Z_OK;\\n      allowBufError = false;\\n    }\\n\\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\\n      this.onEnd(status);\\n      this.ended = true;\\n      return false;\\n    }\\n\\n    if (strm.next_out) {\\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\\n\\n        if (this.options.to === 'string') {\\n\\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\\n\\n          tail = strm.next_out - next_out_utf8;\\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\\n\\n          // move tail\\n          strm.next_out = tail;\\n          strm.avail_out = chunkSize - tail;\\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\\n\\n          this.onData(utf8str);\\n\\n        } else {\\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\\n        }\\n      }\\n    }\\n\\n    // When no more input data, we should check that internal inflate buffers\\n    // are flushed. The only way to do it when avail_out = 0 - run one more\\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\\n    // Here we set flag to process this error properly.\\n    //\\n    // NOTE. Deflate does not return error in this case and does not needs such\\n    // logic.\\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\\n      allowBufError = true;\\n    }\\n\\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\\n\\n  if (status === c.Z_STREAM_END) {\\n    _mode = c.Z_FINISH;\\n  }\\n\\n  // Finalize on the last chunk.\\n  if (_mode === c.Z_FINISH) {\\n    status = zlib_inflate.inflateEnd(this.strm);\\n    this.onEnd(status);\\n    this.ended = true;\\n    return status === c.Z_OK;\\n  }\\n\\n  // callback interim results if Z_SYNC_FLUSH.\\n  if (_mode === c.Z_SYNC_FLUSH) {\\n    this.onEnd(c.Z_OK);\\n    strm.avail_out = 0;\\n    return true;\\n  }\\n\\n  return true;\\n};\\n\\n\\n/**\\n * Inflate#onData(chunk) -> Void\\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\\n *   on js engine support. When string output requested, each chunk\\n *   will be string.\\n *\\n * By default, stores data blocks in `chunks[]` property and glue\\n * those in `onEnd`. Override this handler, if you need another behaviour.\\n **/\\nInflate.prototype.onData = function (chunk) {\\n  this.chunks.push(chunk);\\n};\\n\\n\\n/**\\n * Inflate#onEnd(status) -> Void\\n * - status (Number): inflate status. 0 (Z_OK) on success,\\n *   other if not.\\n *\\n * Called either after you tell inflate that the input stream is\\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\\n * or if an error happened. By default - join collected chunks,\\n * free memory and fill `results` / `err` properties.\\n **/\\nInflate.prototype.onEnd = function (status) {\\n  // On success - join\\n  if (status === c.Z_OK) {\\n    if (this.options.to === 'string') {\\n      // Glue & convert here, until we teach pako to send\\n      // utf8 aligned strings to onData\\n      this.result = this.chunks.join('');\\n    } else {\\n      this.result = utils.flattenChunks(this.chunks);\\n    }\\n  }\\n  this.chunks = [];\\n  this.err = status;\\n  this.msg = this.strm.msg;\\n};\\n\\n\\n/**\\n * inflate(data[, options]) -> Uint8Array|Array|String\\n * - data (Uint8Array|Array|String): input data to decompress.\\n * - options (Object): zlib inflate options.\\n *\\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\\n * format via wrapper header by default. That's why we don't provide\\n * separate `ungzip` method.\\n *\\n * Supported options are:\\n *\\n * - windowBits\\n *\\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\\n * for more information.\\n *\\n * Sugar (options):\\n *\\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\\n *   negative windowBits implicitly.\\n * - `to` (String) - if equal to 'string', then result will be converted\\n *   from utf8 to utf16 (javascript) string. When string output requested,\\n *   chunk length can differ from `chunkSize`, depending on content.\\n *\\n *\\n * ##### Example:\\n *\\n * ```javascript\\n * var pako = require('pako')\\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\\n *   , output;\\n *\\n * try {\\n *   output = pako.inflate(input);\\n * } catch (err)\\n *   console.log(err);\\n * }\\n * ```\\n **/\\nfunction inflate(input, options) {\\n  var inflator = new Inflate(options);\\n\\n  inflator.push(input, true);\\n\\n  // That will never happens, if you don't cheat with options :)\\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\\n\\n  return inflator.result;\\n}\\n\\n\\n/**\\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\\n * - data (Uint8Array|Array|String): input data to decompress.\\n * - options (Object): zlib inflate options.\\n *\\n * The same as [[inflate]], but creates raw data, without wrapper\\n * (header and adler32 crc).\\n **/\\nfunction inflateRaw(input, options) {\\n  options = options || {};\\n  options.raw = true;\\n  return inflate(input, options);\\n}\\n\\n\\n/**\\n * ungzip(data[, options]) -> Uint8Array|Array|String\\n * - data (Uint8Array|Array|String): input data to decompress.\\n * - options (Object): zlib inflate options.\\n *\\n * Just shortcut to [[inflate]], because it autodetects format\\n * by header.content. Done for convenience.\\n **/\\n\\n\\nexports.Inflate = Inflate;\\nexports.inflate = inflate;\\nexports.inflateRaw = inflateRaw;\\nexports.ungzip  = inflate;\\n\\n},{\\\"./utils/common\\\":68,\\\"./utils/strings\\\":69,\\\"./zlib/constants\\\":71,\\\"./zlib/gzheader\\\":74,\\\"./zlib/inflate\\\":76,\\\"./zlib/messages\\\":78,\\\"./zlib/zstream\\\":80}],68:[function(require,module,exports){\\n'use strict';\\n\\n\\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\\n                (typeof Uint16Array !== 'undefined') &&\\n                (typeof Int32Array !== 'undefined');\\n\\nfunction _has(obj, key) {\\n  return Object.prototype.hasOwnProperty.call(obj, key);\\n}\\n\\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\\n  var sources = Array.prototype.slice.call(arguments, 1);\\n  while (sources.length) {\\n    var source = sources.shift();\\n    if (!source) { continue; }\\n\\n    if (typeof source !== 'object') {\\n      throw new TypeError(source + 'must be non-object');\\n    }\\n\\n    for (var p in source) {\\n      if (_has(source, p)) {\\n        obj[p] = source[p];\\n      }\\n    }\\n  }\\n\\n  return obj;\\n};\\n\\n\\n// reduce buffer size, avoiding mem copy\\nexports.shrinkBuf = function (buf, size) {\\n  if (buf.length === size) { return buf; }\\n  if (buf.subarray) { return buf.subarray(0, size); }\\n  buf.length = size;\\n  return buf;\\n};\\n\\n\\nvar fnTyped = {\\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\\n    if (src.subarray && dest.subarray) {\\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\\n      return;\\n    }\\n    // Fallback to ordinary array\\n    for (var i = 0; i < len; i++) {\\n      dest[dest_offs + i] = src[src_offs + i];\\n    }\\n  },\\n  // Join array of chunks to single array.\\n  flattenChunks: function (chunks) {\\n    var i, l, len, pos, chunk, result;\\n\\n    // calculate data length\\n    len = 0;\\n    for (i = 0, l = chunks.length; i < l; i++) {\\n      len += chunks[i].length;\\n    }\\n\\n    // join chunks\\n    result = new Uint8Array(len);\\n    pos = 0;\\n    for (i = 0, l = chunks.length; i < l; i++) {\\n      chunk = chunks[i];\\n      result.set(chunk, pos);\\n      pos += chunk.length;\\n    }\\n\\n    return result;\\n  }\\n};\\n\\nvar fnUntyped = {\\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\\n    for (var i = 0; i < len; i++) {\\n      dest[dest_offs + i] = src[src_offs + i];\\n    }\\n  },\\n  // Join array of chunks to single array.\\n  flattenChunks: function (chunks) {\\n    return [].concat.apply([], chunks);\\n  }\\n};\\n\\n\\n// Enable/Disable typed arrays use, for testing\\n//\\nexports.setTyped = function (on) {\\n  if (on) {\\n    exports.Buf8  = Uint8Array;\\n    exports.Buf16 = Uint16Array;\\n    exports.Buf32 = Int32Array;\\n    exports.assign(exports, fnTyped);\\n  } else {\\n    exports.Buf8  = Array;\\n    exports.Buf16 = Array;\\n    exports.Buf32 = Array;\\n    exports.assign(exports, fnUntyped);\\n  }\\n};\\n\\nexports.setTyped(TYPED_OK);\\n\\n},{}],69:[function(require,module,exports){\\n// String encode/decode helpers\\n'use strict';\\n\\n\\nvar utils = require('./common');\\n\\n\\n// Quick check if we can use fast array to bin string conversion\\n//\\n// - apply(Array) can fail on Android 2.2\\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\\n//\\nvar STR_APPLY_OK = true;\\nvar STR_APPLY_UIA_OK = true;\\n\\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\\n\\n\\n// Table with utf8 lengths (calculated by first byte of sequence)\\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\\n// because max possible codepoint is 0x10ffff\\nvar _utf8len = new utils.Buf8(256);\\nfor (var q = 0; q < 256; q++) {\\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\\n}\\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\\n\\n\\n// convert string to array (typed, when possible)\\nexports.string2buf = function (str) {\\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\\n\\n  // count binary size\\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\\n    c = str.charCodeAt(m_pos);\\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\\n      c2 = str.charCodeAt(m_pos + 1);\\n      if ((c2 & 0xfc00) === 0xdc00) {\\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\\n        m_pos++;\\n      }\\n    }\\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\\n  }\\n\\n  // allocate buffer\\n  buf = new utils.Buf8(buf_len);\\n\\n  // convert\\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\\n    c = str.charCodeAt(m_pos);\\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\\n      c2 = str.charCodeAt(m_pos + 1);\\n      if ((c2 & 0xfc00) === 0xdc00) {\\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\\n        m_pos++;\\n      }\\n    }\\n    if (c < 0x80) {\\n      /* one byte */\\n      buf[i++] = c;\\n    } else if (c < 0x800) {\\n      /* two bytes */\\n      buf[i++] = 0xC0 | (c >>> 6);\\n      buf[i++] = 0x80 | (c & 0x3f);\\n    } else if (c < 0x10000) {\\n      /* three bytes */\\n      buf[i++] = 0xE0 | (c >>> 12);\\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\\n      buf[i++] = 0x80 | (c & 0x3f);\\n    } else {\\n      /* four bytes */\\n      buf[i++] = 0xf0 | (c >>> 18);\\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\\n      buf[i++] = 0x80 | (c & 0x3f);\\n    }\\n  }\\n\\n  return buf;\\n};\\n\\n// Helper (used in 2 places)\\nfunction buf2binstring(buf, len) {\\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\\n  // If the length of the buffer is smaller than that, we can use this optimization,\\n  // otherwise we will take a slower path.\\n  if (len < 65534) {\\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\\n    }\\n  }\\n\\n  var result = '';\\n  for (var i = 0; i < len; i++) {\\n    result += String.fromCharCode(buf[i]);\\n  }\\n  return result;\\n}\\n\\n\\n// Convert byte array to binary string\\nexports.buf2binstring = function (buf) {\\n  return buf2binstring(buf, buf.length);\\n};\\n\\n\\n// Convert binary string (typed, when possible)\\nexports.binstring2buf = function (str) {\\n  var buf = new utils.Buf8(str.length);\\n  for (var i = 0, len = buf.length; i < len; i++) {\\n    buf[i] = str.charCodeAt(i);\\n  }\\n  return buf;\\n};\\n\\n\\n// convert array to string\\nexports.buf2string = function (buf, max) {\\n  var i, out, c, c_len;\\n  var len = max || buf.length;\\n\\n  // Reserve max possible length (2 words per char)\\n  // NB: by unknown reasons, Array is significantly faster for\\n  //     String.fromCharCode.apply than Uint16Array.\\n  var utf16buf = new Array(len * 2);\\n\\n  for (out = 0, i = 0; i < len;) {\\n    c = buf[i++];\\n    // quick process ascii\\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\\n\\n    c_len = _utf8len[c];\\n    // skip 5 & 6 byte codes\\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\\n\\n    // apply mask on first byte\\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\\n    // join the rest\\n    while (c_len > 1 && i < len) {\\n      c = (c << 6) | (buf[i++] & 0x3f);\\n      c_len--;\\n    }\\n\\n    // terminated by end of string?\\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\\n\\n    if (c < 0x10000) {\\n      utf16buf[out++] = c;\\n    } else {\\n      c -= 0x10000;\\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\\n    }\\n  }\\n\\n  return buf2binstring(utf16buf, out);\\n};\\n\\n\\n// Calculate max possible position in utf8 buffer,\\n// that will not break sequence. If that's not possible\\n// - (very small limits) return max size as is.\\n//\\n// buf[] - utf8 bytes array\\n// max   - length limit (mandatory);\\nexports.utf8border = function (buf, max) {\\n  var pos;\\n\\n  max = max || buf.length;\\n  if (max > buf.length) { max = buf.length; }\\n\\n  // go back from last position, until start of sequence found\\n  pos = max - 1;\\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\\n\\n  // Very small and broken sequence,\\n  // return max, because we should return something anyway.\\n  if (pos < 0) { return max; }\\n\\n  // If we came to start of buffer - that means buffer is too small,\\n  // return max too.\\n  if (pos === 0) { return max; }\\n\\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\\n};\\n\\n},{\\\"./common\\\":68}],70:[function(require,module,exports){\\n'use strict';\\n\\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\\n// It isn't worth it to make additional optimizations as in original.\\n// Small size is preferable.\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\nfunction adler32(adler, buf, len, pos) {\\n  var s1 = (adler & 0xffff) |0,\\n      s2 = ((adler >>> 16) & 0xffff) |0,\\n      n = 0;\\n\\n  while (len !== 0) {\\n    // Set limit ~ twice less than 5552, to keep\\n    // s2 in 31-bits, because we force signed ints.\\n    // in other case %= will fail.\\n    n = len > 2000 ? 2000 : len;\\n    len -= n;\\n\\n    do {\\n      s1 = (s1 + buf[pos++]) |0;\\n      s2 = (s2 + s1) |0;\\n    } while (--n);\\n\\n    s1 %= 65521;\\n    s2 %= 65521;\\n  }\\n\\n  return (s1 | (s2 << 16)) |0;\\n}\\n\\n\\nmodule.exports = adler32;\\n\\n},{}],71:[function(require,module,exports){\\n'use strict';\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\nmodule.exports = {\\n\\n  /* Allowed flush values; see deflate() and inflate() below for details */\\n  Z_NO_FLUSH:         0,\\n  Z_PARTIAL_FLUSH:    1,\\n  Z_SYNC_FLUSH:       2,\\n  Z_FULL_FLUSH:       3,\\n  Z_FINISH:           4,\\n  Z_BLOCK:            5,\\n  Z_TREES:            6,\\n\\n  /* Return codes for the compression/decompression functions. Negative values\\n  * are errors, positive values are used for special but normal events.\\n  */\\n  Z_OK:               0,\\n  Z_STREAM_END:       1,\\n  Z_NEED_DICT:        2,\\n  Z_ERRNO:           -1,\\n  Z_STREAM_ERROR:    -2,\\n  Z_DATA_ERROR:      -3,\\n  //Z_MEM_ERROR:     -4,\\n  Z_BUF_ERROR:       -5,\\n  //Z_VERSION_ERROR: -6,\\n\\n  /* compression levels */\\n  Z_NO_COMPRESSION:         0,\\n  Z_BEST_SPEED:             1,\\n  Z_BEST_COMPRESSION:       9,\\n  Z_DEFAULT_COMPRESSION:   -1,\\n\\n\\n  Z_FILTERED:               1,\\n  Z_HUFFMAN_ONLY:           2,\\n  Z_RLE:                    3,\\n  Z_FIXED:                  4,\\n  Z_DEFAULT_STRATEGY:       0,\\n\\n  /* Possible values of the data_type field (though see inflate()) */\\n  Z_BINARY:                 0,\\n  Z_TEXT:                   1,\\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\\n  Z_UNKNOWN:                2,\\n\\n  /* The deflate compression method */\\n  Z_DEFLATED:               8\\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\\n};\\n\\n},{}],72:[function(require,module,exports){\\n'use strict';\\n\\n// Note: we can't get significant speed boost here.\\n// So write code to minimize size - no pregenerated tables\\n// and array tools dependencies.\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\n// Use ordinary array, since untyped makes no boost here\\nfunction makeTable() {\\n  var c, table = [];\\n\\n  for (var n = 0; n < 256; n++) {\\n    c = n;\\n    for (var k = 0; k < 8; k++) {\\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\\n    }\\n    table[n] = c;\\n  }\\n\\n  return table;\\n}\\n\\n// Create table on load. Just 255 signed longs. Not a problem.\\nvar crcTable = makeTable();\\n\\n\\nfunction crc32(crc, buf, len, pos) {\\n  var t = crcTable,\\n      end = pos + len;\\n\\n  crc ^= -1;\\n\\n  for (var i = pos; i < end; i++) {\\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\\n  }\\n\\n  return (crc ^ (-1)); // >>> 0;\\n}\\n\\n\\nmodule.exports = crc32;\\n\\n},{}],73:[function(require,module,exports){\\n'use strict';\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\nvar utils   = require('../utils/common');\\nvar trees   = require('./trees');\\nvar adler32 = require('./adler32');\\nvar crc32   = require('./crc32');\\nvar msg     = require('./messages');\\n\\n/* Public constants ==========================================================*/\\n/* ===========================================================================*/\\n\\n\\n/* Allowed flush values; see deflate() and inflate() below for details */\\nvar Z_NO_FLUSH      = 0;\\nvar Z_PARTIAL_FLUSH = 1;\\n//var Z_SYNC_FLUSH    = 2;\\nvar Z_FULL_FLUSH    = 3;\\nvar Z_FINISH        = 4;\\nvar Z_BLOCK         = 5;\\n//var Z_TREES         = 6;\\n\\n\\n/* Return codes for the compression/decompression functions. Negative values\\n * are errors, positive values are used for special but normal events.\\n */\\nvar Z_OK            = 0;\\nvar Z_STREAM_END    = 1;\\n//var Z_NEED_DICT     = 2;\\n//var Z_ERRNO         = -1;\\nvar Z_STREAM_ERROR  = -2;\\nvar Z_DATA_ERROR    = -3;\\n//var Z_MEM_ERROR     = -4;\\nvar Z_BUF_ERROR     = -5;\\n//var Z_VERSION_ERROR = -6;\\n\\n\\n/* compression levels */\\n//var Z_NO_COMPRESSION      = 0;\\n//var Z_BEST_SPEED          = 1;\\n//var Z_BEST_COMPRESSION    = 9;\\nvar Z_DEFAULT_COMPRESSION = -1;\\n\\n\\nvar Z_FILTERED            = 1;\\nvar Z_HUFFMAN_ONLY        = 2;\\nvar Z_RLE                 = 3;\\nvar Z_FIXED               = 4;\\nvar Z_DEFAULT_STRATEGY    = 0;\\n\\n/* Possible values of the data_type field (though see inflate()) */\\n//var Z_BINARY              = 0;\\n//var Z_TEXT                = 1;\\n//var Z_ASCII               = 1; // = Z_TEXT\\nvar Z_UNKNOWN             = 2;\\n\\n\\n/* The deflate compression method */\\nvar Z_DEFLATED  = 8;\\n\\n/*============================================================================*/\\n\\n\\nvar MAX_MEM_LEVEL = 9;\\n/* Maximum value for memLevel in deflateInit2 */\\nvar MAX_WBITS = 15;\\n/* 32K LZ77 window */\\nvar DEF_MEM_LEVEL = 8;\\n\\n\\nvar LENGTH_CODES  = 29;\\n/* number of length codes, not counting the special END_BLOCK code */\\nvar LITERALS      = 256;\\n/* number of literal bytes 0..255 */\\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\\n/* number of Literal or Length codes, including the END_BLOCK code */\\nvar D_CODES       = 30;\\n/* number of distance codes */\\nvar BL_CODES      = 19;\\n/* number of codes used to transfer the bit lengths */\\nvar HEAP_SIZE     = 2 * L_CODES + 1;\\n/* maximum heap size */\\nvar MAX_BITS  = 15;\\n/* All codes must not exceed MAX_BITS bits */\\n\\nvar MIN_MATCH = 3;\\nvar MAX_MATCH = 258;\\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\\n\\nvar PRESET_DICT = 0x20;\\n\\nvar INIT_STATE = 42;\\nvar EXTRA_STATE = 69;\\nvar NAME_STATE = 73;\\nvar COMMENT_STATE = 91;\\nvar HCRC_STATE = 103;\\nvar BUSY_STATE = 113;\\nvar FINISH_STATE = 666;\\n\\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\\n\\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\\n\\nfunction err(strm, errorCode) {\\n  strm.msg = msg[errorCode];\\n  return errorCode;\\n}\\n\\nfunction rank(f) {\\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\\n}\\n\\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\\n\\n\\n/* =========================================================================\\n * Flush as much pending output as possible. All deflate() output goes\\n * through this function so some applications may wish to modify it\\n * to avoid allocating a large strm->output buffer and copying into it.\\n * (See also read_buf()).\\n */\\nfunction flush_pending(strm) {\\n  var s = strm.state;\\n\\n  //_tr_flush_bits(s);\\n  var len = s.pending;\\n  if (len > strm.avail_out) {\\n    len = strm.avail_out;\\n  }\\n  if (len === 0) { return; }\\n\\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\\n  strm.next_out += len;\\n  s.pending_out += len;\\n  strm.total_out += len;\\n  strm.avail_out -= len;\\n  s.pending -= len;\\n  if (s.pending === 0) {\\n    s.pending_out = 0;\\n  }\\n}\\n\\n\\nfunction flush_block_only(s, last) {\\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\\n  s.block_start = s.strstart;\\n  flush_pending(s.strm);\\n}\\n\\n\\nfunction put_byte(s, b) {\\n  s.pending_buf[s.pending++] = b;\\n}\\n\\n\\n/* =========================================================================\\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\\n * IN assertion: the stream state is correct and there is enough room in\\n * pending_buf.\\n */\\nfunction putShortMSB(s, b) {\\n//  put_byte(s, (Byte)(b >> 8));\\n//  put_byte(s, (Byte)(b & 0xff));\\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\\n  s.pending_buf[s.pending++] = b & 0xff;\\n}\\n\\n\\n/* ===========================================================================\\n * Read a new buffer from the current input stream, update the adler32\\n * and total number of bytes read.  All deflate() input goes through\\n * this function so some applications may wish to modify it to avoid\\n * allocating a large strm->input buffer and copying from it.\\n * (See also flush_pending()).\\n */\\nfunction read_buf(strm, buf, start, size) {\\n  var len = strm.avail_in;\\n\\n  if (len > size) { len = size; }\\n  if (len === 0) { return 0; }\\n\\n  strm.avail_in -= len;\\n\\n  // zmemcpy(buf, strm->next_in, len);\\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\\n  if (strm.state.wrap === 1) {\\n    strm.adler = adler32(strm.adler, buf, len, start);\\n  }\\n\\n  else if (strm.state.wrap === 2) {\\n    strm.adler = crc32(strm.adler, buf, len, start);\\n  }\\n\\n  strm.next_in += len;\\n  strm.total_in += len;\\n\\n  return len;\\n}\\n\\n\\n/* ===========================================================================\\n * Set match_start to the longest match starting at the given string and\\n * return its length. Matches shorter or equal to prev_length are discarded,\\n * in which case the result is equal to prev_length and match_start is\\n * garbage.\\n * IN assertions: cur_match is the head of the hash chain for the current\\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\\n * OUT assertion: the match length is not greater than s->lookahead.\\n */\\nfunction longest_match(s, cur_match) {\\n  var chain_length = s.max_chain_length;      /* max hash chain length */\\n  var scan = s.strstart; /* current string */\\n  var match;                       /* matched string */\\n  var len;                           /* length of current match */\\n  var best_len = s.prev_length;              /* best match length so far */\\n  var nice_match = s.nice_match;             /* stop if match long enough */\\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\\n\\n  var _win = s.window; // shortcut\\n\\n  var wmask = s.w_mask;\\n  var prev  = s.prev;\\n\\n  /* Stop when cur_match becomes <= limit. To simplify the code,\\n   * we prevent matches with the string of window index 0.\\n   */\\n\\n  var strend = s.strstart + MAX_MATCH;\\n  var scan_end1  = _win[scan + best_len - 1];\\n  var scan_end   = _win[scan + best_len];\\n\\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\\n   * It is easy to get rid of this optimization if necessary.\\n   */\\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \\\"Code too clever\\\");\\n\\n  /* Do not waste too much time if we already have a good match: */\\n  if (s.prev_length >= s.good_match) {\\n    chain_length >>= 2;\\n  }\\n  /* Do not look for matches beyond the end of the input. This is necessary\\n   * to make deflate deterministic.\\n   */\\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\\n\\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \\\"need lookahead\\\");\\n\\n  do {\\n    // Assert(cur_match < s->strstart, \\\"no future\\\");\\n    match = cur_match;\\n\\n    /* Skip to next match if the match length cannot increase\\n     * or if the match length is less than 2.  Note that the checks below\\n     * for insufficient lookahead only occur occasionally for performance\\n     * reasons.  Therefore uninitialized memory will be accessed, and\\n     * conditional jumps will be made that depend on those values.\\n     * However the length of the match is limited to the lookahead, so\\n     * the output of deflate is not affected by the uninitialized values.\\n     */\\n\\n    if (_win[match + best_len]     !== scan_end  ||\\n        _win[match + best_len - 1] !== scan_end1 ||\\n        _win[match]                !== _win[scan] ||\\n        _win[++match]              !== _win[scan + 1]) {\\n      continue;\\n    }\\n\\n    /* The check at best_len-1 can be removed because it will be made\\n     * again later. (This heuristic is not always a win.)\\n     * It is not necessary to compare scan[2] and match[2] since they\\n     * are always equal when the other bytes match, given that\\n     * the hash keys are equal and that HASH_BITS >= 8.\\n     */\\n    scan += 2;\\n    match++;\\n    // Assert(*scan == *match, \\\"match[2]?\\\");\\n\\n    /* We check for insufficient lookahead only every 8th comparison;\\n     * the 256th check will be made at strstart+258.\\n     */\\n    do {\\n      /*jshint noempty:false*/\\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\\n             scan < strend);\\n\\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \\\"wild scan\\\");\\n\\n    len = MAX_MATCH - (strend - scan);\\n    scan = strend - MAX_MATCH;\\n\\n    if (len > best_len) {\\n      s.match_start = cur_match;\\n      best_len = len;\\n      if (len >= nice_match) {\\n        break;\\n      }\\n      scan_end1  = _win[scan + best_len - 1];\\n      scan_end   = _win[scan + best_len];\\n    }\\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\\n\\n  if (best_len <= s.lookahead) {\\n    return best_len;\\n  }\\n  return s.lookahead;\\n}\\n\\n\\n/* ===========================================================================\\n * Fill the window when the lookahead becomes insufficient.\\n * Updates strstart and lookahead.\\n *\\n * IN assertion: lookahead < MIN_LOOKAHEAD\\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\\n *    At least one byte has been read, or avail_in == 0; reads are\\n *    performed for at least two bytes (required for the zip translate_eol\\n *    option -- not supported here).\\n */\\nfunction fill_window(s) {\\n  var _w_size = s.w_size;\\n  var p, n, m, more, str;\\n\\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \\\"already enough lookahead\\\");\\n\\n  do {\\n    more = s.window_size - s.lookahead - s.strstart;\\n\\n    // JS ints have 32 bit, block below not needed\\n    /* Deal with !@#$% 64K limit: */\\n    //if (sizeof(int) <= 2) {\\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\\n    //        more = wsize;\\n    //\\n    //  } else if (more == (unsigned)(-1)) {\\n    //        /* Very unlikely, but possible on 16 bit machine if\\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\\n    //         */\\n    //        more--;\\n    //    }\\n    //}\\n\\n\\n    /* If the window is almost full and there is insufficient lookahead,\\n     * move the upper half to the lower one to make room in the upper half.\\n     */\\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\\n\\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\\n      s.match_start -= _w_size;\\n      s.strstart -= _w_size;\\n      /* we now have strstart >= MAX_DIST */\\n      s.block_start -= _w_size;\\n\\n      /* Slide the hash table (could be avoided with 32 bit values\\n       at the expense of memory usage). We slide even when level == 0\\n       to keep the hash table consistent if we switch back to level > 0\\n       later. (Using level 0 permanently is not an optimal usage of\\n       zlib, so we don't care about this pathological case.)\\n       */\\n\\n      n = s.hash_size;\\n      p = n;\\n      do {\\n        m = s.head[--p];\\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\\n      } while (--n);\\n\\n      n = _w_size;\\n      p = n;\\n      do {\\n        m = s.prev[--p];\\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\\n        /* If n is not on any hash chain, prev[n] is garbage but\\n         * its value will never be used.\\n         */\\n      } while (--n);\\n\\n      more += _w_size;\\n    }\\n    if (s.strm.avail_in === 0) {\\n      break;\\n    }\\n\\n    /* If there was no sliding:\\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\\n     *    more == window_size - lookahead - strstart\\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\\n     * => more >= window_size - 2*WSIZE + 2\\n     * In the BIG_MEM or MMAP case (not yet supported),\\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\\n     */\\n    //Assert(more >= 2, \\\"more < 2\\\");\\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\\n    s.lookahead += n;\\n\\n    /* Initialize the hash value now that we have some input: */\\n    if (s.lookahead + s.insert >= MIN_MATCH) {\\n      str = s.strstart - s.insert;\\n      s.ins_h = s.window[str];\\n\\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\\n//#if MIN_MATCH != 3\\n//        Call update_hash() MIN_MATCH-3 more times\\n//#endif\\n      while (s.insert) {\\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\\n\\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\\n        s.head[s.ins_h] = str;\\n        str++;\\n        s.insert--;\\n        if (s.lookahead + s.insert < MIN_MATCH) {\\n          break;\\n        }\\n      }\\n    }\\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\\n     * but this is not important since only literal bytes will be emitted.\\n     */\\n\\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\\n\\n  /* If the WIN_INIT bytes after the end of the current data have never been\\n   * written, then zero those bytes in order to avoid memory check reports of\\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\\n   * the longest match routines.  Update the high water mark for the next\\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\\n   */\\n//  if (s.high_water < s.window_size) {\\n//    var curr = s.strstart + s.lookahead;\\n//    var init = 0;\\n//\\n//    if (s.high_water < curr) {\\n//      /* Previous high water mark below current data -- zero WIN_INIT\\n//       * bytes or up to end of window, whichever is less.\\n//       */\\n//      init = s.window_size - curr;\\n//      if (init > WIN_INIT)\\n//        init = WIN_INIT;\\n//      zmemzero(s->window + curr, (unsigned)init);\\n//      s->high_water = curr + init;\\n//    }\\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\\n//      /* High water mark at or above current data, but below current data\\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\\n//       * to end of window, whichever is less.\\n//       */\\n//      init = (ulg)curr + WIN_INIT - s->high_water;\\n//      if (init > s->window_size - s->high_water)\\n//        init = s->window_size - s->high_water;\\n//      zmemzero(s->window + s->high_water, (unsigned)init);\\n//      s->high_water += init;\\n//    }\\n//  }\\n//\\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\\n//    \\\"not enough room for search\\\");\\n}\\n\\n/* ===========================================================================\\n * Copy without compression as much as possible from the input stream, return\\n * the current block state.\\n * This function does not insert new strings in the dictionary since\\n * uncompressible data is probably not useful. This function is used\\n * only for the level=0 compression option.\\n * NOTE: this function should be optimized to avoid extra copying from\\n * window to pending_buf.\\n */\\nfunction deflate_stored(s, flush) {\\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\\n   * to pending_buf_size, and each stored block has a 5 byte header:\\n   */\\n  var max_block_size = 0xffff;\\n\\n  if (max_block_size > s.pending_buf_size - 5) {\\n    max_block_size = s.pending_buf_size - 5;\\n  }\\n\\n  /* Copy as much as possible from input to output: */\\n  for (;;) {\\n    /* Fill the window as much as possible: */\\n    if (s.lookahead <= 1) {\\n\\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\\n      //  s->block_start >= (long)s->w_size, \\\"slide too late\\\");\\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\\n//        s.block_start >= s.w_size)) {\\n//        throw  new Error(\\\"slide too late\\\");\\n//      }\\n\\n      fill_window(s);\\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\\n        return BS_NEED_MORE;\\n      }\\n\\n      if (s.lookahead === 0) {\\n        break;\\n      }\\n      /* flush the current block */\\n    }\\n    //Assert(s->block_start >= 0L, \\\"block gone\\\");\\n//    if (s.block_start < 0) throw new Error(\\\"block gone\\\");\\n\\n    s.strstart += s.lookahead;\\n    s.lookahead = 0;\\n\\n    /* Emit a stored block if pending_buf will be full: */\\n    var max_start = s.block_start + max_block_size;\\n\\n    if (s.strstart === 0 || s.strstart >= max_start) {\\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\\n      s.lookahead = s.strstart - max_start;\\n      s.strstart = max_start;\\n      /*** FLUSH_BLOCK(s, 0); ***/\\n      flush_block_only(s, false);\\n      if (s.strm.avail_out === 0) {\\n        return BS_NEED_MORE;\\n      }\\n      /***/\\n\\n\\n    }\\n    /* Flush if we may have to slide, otherwise block_start may become\\n     * negative and the data will be gone:\\n     */\\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\\n      /*** FLUSH_BLOCK(s, 0); ***/\\n      flush_block_only(s, false);\\n      if (s.strm.avail_out === 0) {\\n        return BS_NEED_MORE;\\n      }\\n      /***/\\n    }\\n  }\\n\\n  s.insert = 0;\\n\\n  if (flush === Z_FINISH) {\\n    /*** FLUSH_BLOCK(s, 1); ***/\\n    flush_block_only(s, true);\\n    if (s.strm.avail_out === 0) {\\n      return BS_FINISH_STARTED;\\n    }\\n    /***/\\n    return BS_FINISH_DONE;\\n  }\\n\\n  if (s.strstart > s.block_start) {\\n    /*** FLUSH_BLOCK(s, 0); ***/\\n    flush_block_only(s, false);\\n    if (s.strm.avail_out === 0) {\\n      return BS_NEED_MORE;\\n    }\\n    /***/\\n  }\\n\\n  return BS_NEED_MORE;\\n}\\n\\n/* ===========================================================================\\n * Compress as much as possible from the input stream, return the current\\n * block state.\\n * This function does not perform lazy evaluation of matches and inserts\\n * new strings in the dictionary only for unmatched strings or for short\\n * matches. It is used only for the fast compression options.\\n */\\nfunction deflate_fast(s, flush) {\\n  var hash_head;        /* head of the hash chain */\\n  var bflush;           /* set if current block must be flushed */\\n\\n  for (;;) {\\n    /* Make sure that we always have enough lookahead, except\\n     * at the end of the input file. We need MAX_MATCH bytes\\n     * for the next match, plus MIN_MATCH bytes to insert the\\n     * string following the next match.\\n     */\\n    if (s.lookahead < MIN_LOOKAHEAD) {\\n      fill_window(s);\\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\\n        return BS_NEED_MORE;\\n      }\\n      if (s.lookahead === 0) {\\n        break; /* flush the current block */\\n      }\\n    }\\n\\n    /* Insert the string window[strstart .. strstart+2] in the\\n     * dictionary, and set hash_head to the head of the hash chain:\\n     */\\n    hash_head = 0/*NIL*/;\\n    if (s.lookahead >= MIN_MATCH) {\\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\\n      s.head[s.ins_h] = s.strstart;\\n      /***/\\n    }\\n\\n    /* Find the longest match, discarding those <= prev_length.\\n     * At this point we have always match_length < MIN_MATCH\\n     */\\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\\n      /* To simplify the code, we prevent matches with the string\\n       * of window index 0 (in particular we have to avoid a match\\n       * of the string with itself at the start of the input file).\\n       */\\n      s.match_length = longest_match(s, hash_head);\\n      /* longest_match() sets match_start */\\n    }\\n    if (s.match_length >= MIN_MATCH) {\\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\\n\\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\\n                     s.match_length - MIN_MATCH, bflush); ***/\\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\\n\\n      s.lookahead -= s.match_length;\\n\\n      /* Insert new strings in the hash table only if the match length\\n       * is not too large. This saves time but degrades compression.\\n       */\\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\\n        s.match_length--; /* string at strstart already in table */\\n        do {\\n          s.strstart++;\\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\\n          s.head[s.ins_h] = s.strstart;\\n          /***/\\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\\n           * always MIN_MATCH bytes ahead.\\n           */\\n        } while (--s.match_length !== 0);\\n        s.strstart++;\\n      } else\\n      {\\n        s.strstart += s.match_length;\\n        s.match_length = 0;\\n        s.ins_h = s.window[s.strstart];\\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\\n\\n//#if MIN_MATCH != 3\\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\\n//#endif\\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\\n         * matter since it will be recomputed at next deflate call.\\n         */\\n      }\\n    } else {\\n      /* No match, output a literal byte */\\n      //Tracevv((stderr,\\\"%c\\\", s.window[s.strstart]));\\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\\n\\n      s.lookahead--;\\n      s.strstart++;\\n    }\\n    if (bflush) {\\n      /*** FLUSH_BLOCK(s, 0); ***/\\n      flush_block_only(s, false);\\n      if (s.strm.avail_out === 0) {\\n        return BS_NEED_MORE;\\n      }\\n      /***/\\n    }\\n  }\\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\\n  if (flush === Z_FINISH) {\\n    /*** FLUSH_BLOCK(s, 1); ***/\\n    flush_block_only(s, true);\\n    if (s.strm.avail_out === 0) {\\n      return BS_FINISH_STARTED;\\n    }\\n    /***/\\n    return BS_FINISH_DONE;\\n  }\\n  if (s.last_lit) {\\n    /*** FLUSH_BLOCK(s, 0); ***/\\n    flush_block_only(s, false);\\n    if (s.strm.avail_out === 0) {\\n      return BS_NEED_MORE;\\n    }\\n    /***/\\n  }\\n  return BS_BLOCK_DONE;\\n}\\n\\n/* ===========================================================================\\n * Same as above, but achieves better compression. We use a lazy\\n * evaluation for matches: a match is finally adopted only if there is\\n * no better match at the next window position.\\n */\\nfunction deflate_slow(s, flush) {\\n  var hash_head;          /* head of hash chain */\\n  var bflush;              /* set if current block must be flushed */\\n\\n  var max_insert;\\n\\n  /* Process the input block. */\\n  for (;;) {\\n    /* Make sure that we always have enough lookahead, except\\n     * at the end of the input file. We need MAX_MATCH bytes\\n     * for the next match, plus MIN_MATCH bytes to insert the\\n     * string following the next match.\\n     */\\n    if (s.lookahead < MIN_LOOKAHEAD) {\\n      fill_window(s);\\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\\n        return BS_NEED_MORE;\\n      }\\n      if (s.lookahead === 0) { break; } /* flush the current block */\\n    }\\n\\n    /* Insert the string window[strstart .. strstart+2] in the\\n     * dictionary, and set hash_head to the head of the hash chain:\\n     */\\n    hash_head = 0/*NIL*/;\\n    if (s.lookahead >= MIN_MATCH) {\\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\\n      s.head[s.ins_h] = s.strstart;\\n      /***/\\n    }\\n\\n    /* Find the longest match, discarding those <= prev_length.\\n     */\\n    s.prev_length = s.match_length;\\n    s.prev_match = s.match_start;\\n    s.match_length = MIN_MATCH - 1;\\n\\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\\n      /* To simplify the code, we prevent matches with the string\\n       * of window index 0 (in particular we have to avoid a match\\n       * of the string with itself at the start of the input file).\\n       */\\n      s.match_length = longest_match(s, hash_head);\\n      /* longest_match() sets match_start */\\n\\n      if (s.match_length <= 5 &&\\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\\n\\n        /* If prev_match is also MIN_MATCH, match_start is garbage\\n         * but we will ignore the current match anyway.\\n         */\\n        s.match_length = MIN_MATCH - 1;\\n      }\\n    }\\n    /* If there was a match at the previous step and the current\\n     * match is not better, output the previous match:\\n     */\\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\\n      /* Do not insert strings in hash table beyond this. */\\n\\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\\n\\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\\n                     s.prev_length - MIN_MATCH, bflush);***/\\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\\n      /* Insert in hash table all strings up to the end of the match.\\n       * strstart-1 and strstart are already inserted. If there is not\\n       * enough lookahead, the last two strings are not inserted in\\n       * the hash table.\\n       */\\n      s.lookahead -= s.prev_length - 1;\\n      s.prev_length -= 2;\\n      do {\\n        if (++s.strstart <= max_insert) {\\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\\n          s.head[s.ins_h] = s.strstart;\\n          /***/\\n        }\\n      } while (--s.prev_length !== 0);\\n      s.match_available = 0;\\n      s.match_length = MIN_MATCH - 1;\\n      s.strstart++;\\n\\n      if (bflush) {\\n        /*** FLUSH_BLOCK(s, 0); ***/\\n        flush_block_only(s, false);\\n        if (s.strm.avail_out === 0) {\\n          return BS_NEED_MORE;\\n        }\\n        /***/\\n      }\\n\\n    } else if (s.match_available) {\\n      /* If there was no match at the previous position, output a\\n       * single literal. If there was a match but the current match\\n       * is longer, truncate the previous match to a single literal.\\n       */\\n      //Tracevv((stderr,\\\"%c\\\", s->window[s->strstart-1]));\\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\\n\\n      if (bflush) {\\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\\n        flush_block_only(s, false);\\n        /***/\\n      }\\n      s.strstart++;\\n      s.lookahead--;\\n      if (s.strm.avail_out === 0) {\\n        return BS_NEED_MORE;\\n      }\\n    } else {\\n      /* There is no previous match to compare with, wait for\\n       * the next step to decide.\\n       */\\n      s.match_available = 1;\\n      s.strstart++;\\n      s.lookahead--;\\n    }\\n  }\\n  //Assert (flush != Z_NO_FLUSH, \\\"no flush?\\\");\\n  if (s.match_available) {\\n    //Tracevv((stderr,\\\"%c\\\", s->window[s->strstart-1]));\\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\\n\\n    s.match_available = 0;\\n  }\\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\\n  if (flush === Z_FINISH) {\\n    /*** FLUSH_BLOCK(s, 1); ***/\\n    flush_block_only(s, true);\\n    if (s.strm.avail_out === 0) {\\n      return BS_FINISH_STARTED;\\n    }\\n    /***/\\n    return BS_FINISH_DONE;\\n  }\\n  if (s.last_lit) {\\n    /*** FLUSH_BLOCK(s, 0); ***/\\n    flush_block_only(s, false);\\n    if (s.strm.avail_out === 0) {\\n      return BS_NEED_MORE;\\n    }\\n    /***/\\n  }\\n\\n  return BS_BLOCK_DONE;\\n}\\n\\n\\n/* ===========================================================================\\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\\n * deflate switches away from Z_RLE.)\\n */\\nfunction deflate_rle(s, flush) {\\n  var bflush;            /* set if current block must be flushed */\\n  var prev;              /* byte at distance one to match */\\n  var scan, strend;      /* scan goes up to strend for length of run */\\n\\n  var _win = s.window;\\n\\n  for (;;) {\\n    /* Make sure that we always have enough lookahead, except\\n     * at the end of the input file. We need MAX_MATCH bytes\\n     * for the longest run, plus one for the unrolled loop.\\n     */\\n    if (s.lookahead <= MAX_MATCH) {\\n      fill_window(s);\\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\\n        return BS_NEED_MORE;\\n      }\\n      if (s.lookahead === 0) { break; } /* flush the current block */\\n    }\\n\\n    /* See how many times the previous byte repeats */\\n    s.match_length = 0;\\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\\n      scan = s.strstart - 1;\\n      prev = _win[scan];\\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\\n        strend = s.strstart + MAX_MATCH;\\n        do {\\n          /*jshint noempty:false*/\\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\\n                 prev === _win[++scan] && prev === _win[++scan] &&\\n                 prev === _win[++scan] && prev === _win[++scan] &&\\n                 prev === _win[++scan] && prev === _win[++scan] &&\\n                 scan < strend);\\n        s.match_length = MAX_MATCH - (strend - scan);\\n        if (s.match_length > s.lookahead) {\\n          s.match_length = s.lookahead;\\n        }\\n      }\\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \\\"wild scan\\\");\\n    }\\n\\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\\n    if (s.match_length >= MIN_MATCH) {\\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\\n\\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\\n\\n      s.lookahead -= s.match_length;\\n      s.strstart += s.match_length;\\n      s.match_length = 0;\\n    } else {\\n      /* No match, output a literal byte */\\n      //Tracevv((stderr,\\\"%c\\\", s->window[s->strstart]));\\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\\n\\n      s.lookahead--;\\n      s.strstart++;\\n    }\\n    if (bflush) {\\n      /*** FLUSH_BLOCK(s, 0); ***/\\n      flush_block_only(s, false);\\n      if (s.strm.avail_out === 0) {\\n        return BS_NEED_MORE;\\n      }\\n      /***/\\n    }\\n  }\\n  s.insert = 0;\\n  if (flush === Z_FINISH) {\\n    /*** FLUSH_BLOCK(s, 1); ***/\\n    flush_block_only(s, true);\\n    if (s.strm.avail_out === 0) {\\n      return BS_FINISH_STARTED;\\n    }\\n    /***/\\n    return BS_FINISH_DONE;\\n  }\\n  if (s.last_lit) {\\n    /*** FLUSH_BLOCK(s, 0); ***/\\n    flush_block_only(s, false);\\n    if (s.strm.avail_out === 0) {\\n      return BS_NEED_MORE;\\n    }\\n    /***/\\n  }\\n  return BS_BLOCK_DONE;\\n}\\n\\n/* ===========================================================================\\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\\n * (It will be regenerated if this run of deflate switches away from Huffman.)\\n */\\nfunction deflate_huff(s, flush) {\\n  var bflush;             /* set if current block must be flushed */\\n\\n  for (;;) {\\n    /* Make sure that we have a literal to write. */\\n    if (s.lookahead === 0) {\\n      fill_window(s);\\n      if (s.lookahead === 0) {\\n        if (flush === Z_NO_FLUSH) {\\n          return BS_NEED_MORE;\\n        }\\n        break;      /* flush the current block */\\n      }\\n    }\\n\\n    /* Output a literal byte */\\n    s.match_length = 0;\\n    //Tracevv((stderr,\\\"%c\\\", s->window[s->strstart]));\\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\\n    s.lookahead--;\\n    s.strstart++;\\n    if (bflush) {\\n      /*** FLUSH_BLOCK(s, 0); ***/\\n      flush_block_only(s, false);\\n      if (s.strm.avail_out === 0) {\\n        return BS_NEED_MORE;\\n      }\\n      /***/\\n    }\\n  }\\n  s.insert = 0;\\n  if (flush === Z_FINISH) {\\n    /*** FLUSH_BLOCK(s, 1); ***/\\n    flush_block_only(s, true);\\n    if (s.strm.avail_out === 0) {\\n      return BS_FINISH_STARTED;\\n    }\\n    /***/\\n    return BS_FINISH_DONE;\\n  }\\n  if (s.last_lit) {\\n    /*** FLUSH_BLOCK(s, 0); ***/\\n    flush_block_only(s, false);\\n    if (s.strm.avail_out === 0) {\\n      return BS_NEED_MORE;\\n    }\\n    /***/\\n  }\\n  return BS_BLOCK_DONE;\\n}\\n\\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\\n * the desired pack level (0..9). The values given below have been tuned to\\n * exclude worst case performance for pathological files. Better values may be\\n * found for specific files.\\n */\\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\\n  this.good_length = good_length;\\n  this.max_lazy = max_lazy;\\n  this.nice_length = nice_length;\\n  this.max_chain = max_chain;\\n  this.func = func;\\n}\\n\\nvar configuration_table;\\n\\nconfiguration_table = [\\n  /*      good lazy nice chain */\\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\\n\\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\\n];\\n\\n\\n/* ===========================================================================\\n * Initialize the \\\"longest match\\\" routines for a new zlib stream\\n */\\nfunction lm_init(s) {\\n  s.window_size = 2 * s.w_size;\\n\\n  /*** CLEAR_HASH(s); ***/\\n  zero(s.head); // Fill with NIL (= 0);\\n\\n  /* Set the default configuration parameters:\\n   */\\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\\n  s.good_match = configuration_table[s.level].good_length;\\n  s.nice_match = configuration_table[s.level].nice_length;\\n  s.max_chain_length = configuration_table[s.level].max_chain;\\n\\n  s.strstart = 0;\\n  s.block_start = 0;\\n  s.lookahead = 0;\\n  s.insert = 0;\\n  s.match_length = s.prev_length = MIN_MATCH - 1;\\n  s.match_available = 0;\\n  s.ins_h = 0;\\n}\\n\\n\\nfunction DeflateState() {\\n  this.strm = null;            /* pointer back to this zlib stream */\\n  this.status = 0;            /* as the name implies */\\n  this.pending_buf = null;      /* output still pending */\\n  this.pending_buf_size = 0;  /* size of pending_buf */\\n  this.pending_out = 0;       /* next pending byte to output to the stream */\\n  this.pending = 0;           /* nb of bytes in the pending buffer */\\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\\n  this.gzhead = null;         /* gzip header information to write */\\n  this.gzindex = 0;           /* where in extra, name, or comment */\\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\\n\\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\\n  this.w_mask = 0;  /* w_size - 1 */\\n\\n  this.window = null;\\n  /* Sliding window. Input bytes are read into the second half of the window,\\n   * and move to the first half later to keep a dictionary of at least wSize\\n   * bytes. With this organization, matches are limited to a distance of\\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\\n   * performed with a length multiple of the block size.\\n   */\\n\\n  this.window_size = 0;\\n  /* Actual size of window: 2*wSize, except when the user input buffer\\n   * is directly used as sliding window.\\n   */\\n\\n  this.prev = null;\\n  /* Link to older string with same hash index. To limit the size of this\\n   * array to 64K, this link is maintained only for the last 32K strings.\\n   * An index in this array is thus a window index modulo 32K.\\n   */\\n\\n  this.head = null;   /* Heads of the hash chains or NIL. */\\n\\n  this.ins_h = 0;       /* hash index of string to be inserted */\\n  this.hash_size = 0;   /* number of elements in hash table */\\n  this.hash_bits = 0;   /* log2(hash_size) */\\n  this.hash_mask = 0;   /* hash_size-1 */\\n\\n  this.hash_shift = 0;\\n  /* Number of bits by which ins_h must be shifted at each input\\n   * step. It must be such that after MIN_MATCH steps, the oldest\\n   * byte no longer takes part in the hash key, that is:\\n   *   hash_shift * MIN_MATCH >= hash_bits\\n   */\\n\\n  this.block_start = 0;\\n  /* Window position at the beginning of the current output block. Gets\\n   * negative when the window is moved backwards.\\n   */\\n\\n  this.match_length = 0;      /* length of best match */\\n  this.prev_match = 0;        /* previous match */\\n  this.match_available = 0;   /* set if previous match exists */\\n  this.strstart = 0;          /* start of string to insert */\\n  this.match_start = 0;       /* start of matching string */\\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\\n\\n  this.prev_length = 0;\\n  /* Length of the best match at previous step. Matches not greater than this\\n   * are discarded. This is used in the lazy match evaluation.\\n   */\\n\\n  this.max_chain_length = 0;\\n  /* To speed up deflation, hash chains are never searched beyond this\\n   * length.  A higher limit improves compression ratio but degrades the\\n   * speed.\\n   */\\n\\n  this.max_lazy_match = 0;\\n  /* Attempt to find a better match only when the current match is strictly\\n   * smaller than this value. This mechanism is used only for compression\\n   * levels >= 4.\\n   */\\n  // That's alias to max_lazy_match, don't use directly\\n  //this.max_insert_length = 0;\\n  /* Insert new strings in the hash table only if the match length is not\\n   * greater than this length. This saves time but degrades compression.\\n   * max_insert_length is used only for compression levels <= 3.\\n   */\\n\\n  this.level = 0;     /* compression level (1..9) */\\n  this.strategy = 0;  /* favor or force Huffman coding*/\\n\\n  this.good_match = 0;\\n  /* Use a faster search when the previous match is longer than this */\\n\\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\\n\\n              /* used by trees.c: */\\n\\n  /* Didn't use ct_data typedef below to suppress compiler warning */\\n\\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\\n\\n  // Use flat array of DOUBLE size, with interleaved fata,\\n  // because JS does not support effective\\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\\n  zero(this.dyn_ltree);\\n  zero(this.dyn_dtree);\\n  zero(this.bl_tree);\\n\\n  this.l_desc   = null;         /* desc. for literal tree */\\n  this.d_desc   = null;         /* desc. for distance tree */\\n  this.bl_desc  = null;         /* desc. for bit length tree */\\n\\n  //ush bl_count[MAX_BITS+1];\\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\\n  /* number of codes at each bit length for an optimal tree */\\n\\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\\n  zero(this.heap);\\n\\n  this.heap_len = 0;               /* number of elements in the heap */\\n  this.heap_max = 0;               /* element of largest frequency */\\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\\n   * The same heap array is used to build all trees.\\n   */\\n\\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\\n  zero(this.depth);\\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\\n   */\\n\\n  this.l_buf = 0;          /* buffer index for literals or lengths */\\n\\n  this.lit_bufsize = 0;\\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\\n   * limiting lit_bufsize to 64K:\\n   *   - frequencies can be kept in 16 bit counters\\n   *   - if compression is not successful for the first block, all input\\n   *     data is still in the window so we can still emit a stored block even\\n   *     when input comes from standard input.  (This can also be done for\\n   *     all blocks if lit_bufsize is not greater than 32K.)\\n   *   - if compression is not successful for a file smaller than 64K, we can\\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\\n   *     This is applicable only for zip (not gzip or zlib).\\n   *   - creating new Huffman trees less frequently may not provide fast\\n   *     adaptation to changes in the input data statistics. (Take for\\n   *     example a binary file with poorly compressible code followed by\\n   *     a highly compressible string table.) Smaller buffer sizes give\\n   *     fast adaptation but have of course the overhead of transmitting\\n   *     trees more frequently.\\n   *   - I can't count above 4\\n   */\\n\\n  this.last_lit = 0;      /* running index in l_buf */\\n\\n  this.d_buf = 0;\\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\\n   * the same number of elements. To use different lengths, an extra flag\\n   * array would be necessary.\\n   */\\n\\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\\n  this.static_len = 0;    /* bit length of current block with static trees */\\n  this.matches = 0;       /* number of string matches in current block */\\n  this.insert = 0;        /* bytes at end of window left to insert */\\n\\n\\n  this.bi_buf = 0;\\n  /* Output buffer. bits are inserted starting at the bottom (least\\n   * significant bits).\\n   */\\n  this.bi_valid = 0;\\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\\n   * are always zero.\\n   */\\n\\n  // Used for window memory init. We safely ignore it for JS. That makes\\n  // sense only for pointers and memory check tools.\\n  //this.high_water = 0;\\n  /* High water mark offset in window for initialized bytes -- bytes above\\n   * this are set to zero in order to avoid memory check warnings when\\n   * longest match routines access bytes past the input.  This is then\\n   * updated to the new high water mark.\\n   */\\n}\\n\\n\\nfunction deflateResetKeep(strm) {\\n  var s;\\n\\n  if (!strm || !strm.state) {\\n    return err(strm, Z_STREAM_ERROR);\\n  }\\n\\n  strm.total_in = strm.total_out = 0;\\n  strm.data_type = Z_UNKNOWN;\\n\\n  s = strm.state;\\n  s.pending = 0;\\n  s.pending_out = 0;\\n\\n  if (s.wrap < 0) {\\n    s.wrap = -s.wrap;\\n    /* was made negative by deflate(..., Z_FINISH); */\\n  }\\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\\n  strm.adler = (s.wrap === 2) ?\\n    0  // crc32(0, Z_NULL, 0)\\n  :\\n    1; // adler32(0, Z_NULL, 0)\\n  s.last_flush = Z_NO_FLUSH;\\n  trees._tr_init(s);\\n  return Z_OK;\\n}\\n\\n\\nfunction deflateReset(strm) {\\n  var ret = deflateResetKeep(strm);\\n  if (ret === Z_OK) {\\n    lm_init(strm.state);\\n  }\\n  return ret;\\n}\\n\\n\\nfunction deflateSetHeader(strm, head) {\\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\\n  strm.state.gzhead = head;\\n  return Z_OK;\\n}\\n\\n\\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\\n  if (!strm) { // === Z_NULL\\n    return Z_STREAM_ERROR;\\n  }\\n  var wrap = 1;\\n\\n  if (level === Z_DEFAULT_COMPRESSION) {\\n    level = 6;\\n  }\\n\\n  if (windowBits < 0) { /* suppress zlib wrapper */\\n    wrap = 0;\\n    windowBits = -windowBits;\\n  }\\n\\n  else if (windowBits > 15) {\\n    wrap = 2;           /* write gzip wrapper instead */\\n    windowBits -= 16;\\n  }\\n\\n\\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\\n    strategy < 0 || strategy > Z_FIXED) {\\n    return err(strm, Z_STREAM_ERROR);\\n  }\\n\\n\\n  if (windowBits === 8) {\\n    windowBits = 9;\\n  }\\n  /* until 256-byte window bug fixed */\\n\\n  var s = new DeflateState();\\n\\n  strm.state = s;\\n  s.strm = strm;\\n\\n  s.wrap = wrap;\\n  s.gzhead = null;\\n  s.w_bits = windowBits;\\n  s.w_size = 1 << s.w_bits;\\n  s.w_mask = s.w_size - 1;\\n\\n  s.hash_bits = memLevel + 7;\\n  s.hash_size = 1 << s.hash_bits;\\n  s.hash_mask = s.hash_size - 1;\\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\\n\\n  s.window = new utils.Buf8(s.w_size * 2);\\n  s.head = new utils.Buf16(s.hash_size);\\n  s.prev = new utils.Buf16(s.w_size);\\n\\n  // Don't need mem init magic for JS.\\n  //s.high_water = 0;  /* nothing written to s->window yet */\\n\\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\\n\\n  s.pending_buf_size = s.lit_bufsize * 4;\\n\\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\\n  //s->pending_buf = (uchf *) overlay;\\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\\n\\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\\n  s.d_buf = 1 * s.lit_bufsize;\\n\\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\\n  s.l_buf = (1 + 2) * s.lit_bufsize;\\n\\n  s.level = level;\\n  s.strategy = strategy;\\n  s.method = method;\\n\\n  return deflateReset(strm);\\n}\\n\\nfunction deflateInit(strm, level) {\\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\\n}\\n\\n\\nfunction deflate(strm, flush) {\\n  var old_flush, s;\\n  var beg, val; // for gzip header write only\\n\\n  if (!strm || !strm.state ||\\n    flush > Z_BLOCK || flush < 0) {\\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\\n  }\\n\\n  s = strm.state;\\n\\n  if (!strm.output ||\\n      (!strm.input && strm.avail_in !== 0) ||\\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\\n  }\\n\\n  s.strm = strm; /* just in case */\\n  old_flush = s.last_flush;\\n  s.last_flush = flush;\\n\\n  /* Write the header */\\n  if (s.status === INIT_STATE) {\\n\\n    if (s.wrap === 2) { // GZIP header\\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\\n      put_byte(s, 31);\\n      put_byte(s, 139);\\n      put_byte(s, 8);\\n      if (!s.gzhead) { // s->gzhead == Z_NULL\\n        put_byte(s, 0);\\n        put_byte(s, 0);\\n        put_byte(s, 0);\\n        put_byte(s, 0);\\n        put_byte(s, 0);\\n        put_byte(s, s.level === 9 ? 2 :\\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\\n                     4 : 0));\\n        put_byte(s, OS_CODE);\\n        s.status = BUSY_STATE;\\n      }\\n      else {\\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\\n                    (s.gzhead.hcrc ? 2 : 0) +\\n                    (!s.gzhead.extra ? 0 : 4) +\\n                    (!s.gzhead.name ? 0 : 8) +\\n                    (!s.gzhead.comment ? 0 : 16)\\n        );\\n        put_byte(s, s.gzhead.time & 0xff);\\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\\n        put_byte(s, s.level === 9 ? 2 :\\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\\n                     4 : 0));\\n        put_byte(s, s.gzhead.os & 0xff);\\n        if (s.gzhead.extra && s.gzhead.extra.length) {\\n          put_byte(s, s.gzhead.extra.length & 0xff);\\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\\n        }\\n        if (s.gzhead.hcrc) {\\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\\n        }\\n        s.gzindex = 0;\\n        s.status = EXTRA_STATE;\\n      }\\n    }\\n    else // DEFLATE header\\n    {\\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\\n      var level_flags = -1;\\n\\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\\n        level_flags = 0;\\n      } else if (s.level < 6) {\\n        level_flags = 1;\\n      } else if (s.level === 6) {\\n        level_flags = 2;\\n      } else {\\n        level_flags = 3;\\n      }\\n      header |= (level_flags << 6);\\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\\n      header += 31 - (header % 31);\\n\\n      s.status = BUSY_STATE;\\n      putShortMSB(s, header);\\n\\n      /* Save the adler32 of the preset dictionary: */\\n      if (s.strstart !== 0) {\\n        putShortMSB(s, strm.adler >>> 16);\\n        putShortMSB(s, strm.adler & 0xffff);\\n      }\\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\\n    }\\n  }\\n\\n//#ifdef GZIP\\n  if (s.status === EXTRA_STATE) {\\n    if (s.gzhead.extra/* != Z_NULL*/) {\\n      beg = s.pending;  /* start of bytes to update crc */\\n\\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\\n        if (s.pending === s.pending_buf_size) {\\n          if (s.gzhead.hcrc && s.pending > beg) {\\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\\n          }\\n          flush_pending(strm);\\n          beg = s.pending;\\n          if (s.pending === s.pending_buf_size) {\\n            break;\\n          }\\n        }\\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\\n        s.gzindex++;\\n      }\\n      if (s.gzhead.hcrc && s.pending > beg) {\\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\\n      }\\n      if (s.gzindex === s.gzhead.extra.length) {\\n        s.gzindex = 0;\\n        s.status = NAME_STATE;\\n      }\\n    }\\n    else {\\n      s.status = NAME_STATE;\\n    }\\n  }\\n  if (s.status === NAME_STATE) {\\n    if (s.gzhead.name/* != Z_NULL*/) {\\n      beg = s.pending;  /* start of bytes to update crc */\\n      //int val;\\n\\n      do {\\n        if (s.pending === s.pending_buf_size) {\\n          if (s.gzhead.hcrc && s.pending > beg) {\\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\\n          }\\n          flush_pending(strm);\\n          beg = s.pending;\\n          if (s.pending === s.pending_buf_size) {\\n            val = 1;\\n            break;\\n          }\\n        }\\n        // JS specific: little magic to add zero terminator to end of string\\n        if (s.gzindex < s.gzhead.name.length) {\\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\\n        } else {\\n          val = 0;\\n        }\\n        put_byte(s, val);\\n      } while (val !== 0);\\n\\n      if (s.gzhead.hcrc && s.pending > beg) {\\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\\n      }\\n      if (val === 0) {\\n        s.gzindex = 0;\\n        s.status = COMMENT_STATE;\\n      }\\n    }\\n    else {\\n      s.status = COMMENT_STATE;\\n    }\\n  }\\n  if (s.status === COMMENT_STATE) {\\n    if (s.gzhead.comment/* != Z_NULL*/) {\\n      beg = s.pending;  /* start of bytes to update crc */\\n      //int val;\\n\\n      do {\\n        if (s.pending === s.pending_buf_size) {\\n          if (s.gzhead.hcrc && s.pending > beg) {\\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\\n          }\\n          flush_pending(strm);\\n          beg = s.pending;\\n          if (s.pending === s.pending_buf_size) {\\n            val = 1;\\n            break;\\n          }\\n        }\\n        // JS specific: little magic to add zero terminator to end of string\\n        if (s.gzindex < s.gzhead.comment.length) {\\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\\n        } else {\\n          val = 0;\\n        }\\n        put_byte(s, val);\\n      } while (val !== 0);\\n\\n      if (s.gzhead.hcrc && s.pending > beg) {\\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\\n      }\\n      if (val === 0) {\\n        s.status = HCRC_STATE;\\n      }\\n    }\\n    else {\\n      s.status = HCRC_STATE;\\n    }\\n  }\\n  if (s.status === HCRC_STATE) {\\n    if (s.gzhead.hcrc) {\\n      if (s.pending + 2 > s.pending_buf_size) {\\n        flush_pending(strm);\\n      }\\n      if (s.pending + 2 <= s.pending_buf_size) {\\n        put_byte(s, strm.adler & 0xff);\\n        put_byte(s, (strm.adler >> 8) & 0xff);\\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\\n        s.status = BUSY_STATE;\\n      }\\n    }\\n    else {\\n      s.status = BUSY_STATE;\\n    }\\n  }\\n//#endif\\n\\n  /* Flush as much pending output as possible */\\n  if (s.pending !== 0) {\\n    flush_pending(strm);\\n    if (strm.avail_out === 0) {\\n      /* Since avail_out is 0, deflate will be called again with\\n       * more output space, but possibly with both pending and\\n       * avail_in equal to zero. There won't be anything to do,\\n       * but this is not an error situation so make sure we\\n       * return OK instead of BUF_ERROR at next call of deflate:\\n       */\\n      s.last_flush = -1;\\n      return Z_OK;\\n    }\\n\\n    /* Make sure there is something to do and avoid duplicate consecutive\\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\\n     */\\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\\n    flush !== Z_FINISH) {\\n    return err(strm, Z_BUF_ERROR);\\n  }\\n\\n  /* User must not provide more input after the first FINISH: */\\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\\n    return err(strm, Z_BUF_ERROR);\\n  }\\n\\n  /* Start a new block or continue the current one.\\n   */\\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\\n        configuration_table[s.level].func(s, flush));\\n\\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\\n      s.status = FINISH_STATE;\\n    }\\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\\n      if (strm.avail_out === 0) {\\n        s.last_flush = -1;\\n        /* avoid BUF_ERROR next call, see above */\\n      }\\n      return Z_OK;\\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\\n       * of deflate should use the same flush parameter to make sure\\n       * that the flush is complete. So we don't have to output an\\n       * empty block here, this will be done at next call. This also\\n       * ensures that for a very small output buffer, we emit at most\\n       * one empty block.\\n       */\\n    }\\n    if (bstate === BS_BLOCK_DONE) {\\n      if (flush === Z_PARTIAL_FLUSH) {\\n        trees._tr_align(s);\\n      }\\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\\n\\n        trees._tr_stored_block(s, 0, 0, false);\\n        /* For a full flush, this empty block will be recognized\\n         * as a special marker by inflate_sync().\\n         */\\n        if (flush === Z_FULL_FLUSH) {\\n          /*** CLEAR_HASH(s); ***/             /* forget history */\\n          zero(s.head); // Fill with NIL (= 0);\\n\\n          if (s.lookahead === 0) {\\n            s.strstart = 0;\\n            s.block_start = 0;\\n            s.insert = 0;\\n          }\\n        }\\n      }\\n      flush_pending(strm);\\n      if (strm.avail_out === 0) {\\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\\n        return Z_OK;\\n      }\\n    }\\n  }\\n  //Assert(strm->avail_out > 0, \\\"bug2\\\");\\n  //if (strm.avail_out <= 0) { throw new Error(\\\"bug2\\\");}\\n\\n  if (flush !== Z_FINISH) { return Z_OK; }\\n  if (s.wrap <= 0) { return Z_STREAM_END; }\\n\\n  /* Write the trailer */\\n  if (s.wrap === 2) {\\n    put_byte(s, strm.adler & 0xff);\\n    put_byte(s, (strm.adler >> 8) & 0xff);\\n    put_byte(s, (strm.adler >> 16) & 0xff);\\n    put_byte(s, (strm.adler >> 24) & 0xff);\\n    put_byte(s, strm.total_in & 0xff);\\n    put_byte(s, (strm.total_in >> 8) & 0xff);\\n    put_byte(s, (strm.total_in >> 16) & 0xff);\\n    put_byte(s, (strm.total_in >> 24) & 0xff);\\n  }\\n  else\\n  {\\n    putShortMSB(s, strm.adler >>> 16);\\n    putShortMSB(s, strm.adler & 0xffff);\\n  }\\n\\n  flush_pending(strm);\\n  /* If avail_out is zero, the application will call deflate again\\n   * to flush the rest.\\n   */\\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\\n  /* write the trailer only once! */\\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\\n}\\n\\nfunction deflateEnd(strm) {\\n  var status;\\n\\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\\n    return Z_STREAM_ERROR;\\n  }\\n\\n  status = strm.state.status;\\n  if (status !== INIT_STATE &&\\n    status !== EXTRA_STATE &&\\n    status !== NAME_STATE &&\\n    status !== COMMENT_STATE &&\\n    status !== HCRC_STATE &&\\n    status !== BUSY_STATE &&\\n    status !== FINISH_STATE\\n  ) {\\n    return err(strm, Z_STREAM_ERROR);\\n  }\\n\\n  strm.state = null;\\n\\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\\n}\\n\\n\\n/* =========================================================================\\n * Initializes the compression dictionary from the given byte\\n * sequence without producing any compressed output.\\n */\\nfunction deflateSetDictionary(strm, dictionary) {\\n  var dictLength = dictionary.length;\\n\\n  var s;\\n  var str, n;\\n  var wrap;\\n  var avail;\\n  var next;\\n  var input;\\n  var tmpDict;\\n\\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\\n    return Z_STREAM_ERROR;\\n  }\\n\\n  s = strm.state;\\n  wrap = s.wrap;\\n\\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\\n    return Z_STREAM_ERROR;\\n  }\\n\\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\\n  if (wrap === 1) {\\n    /* adler32(strm->adler, dictionary, dictLength); */\\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\\n  }\\n\\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\\n\\n  /* if dictionary would fill window, just replace the history */\\n  if (dictLength >= s.w_size) {\\n    if (wrap === 0) {            /* already empty otherwise */\\n      /*** CLEAR_HASH(s); ***/\\n      zero(s.head); // Fill with NIL (= 0);\\n      s.strstart = 0;\\n      s.block_start = 0;\\n      s.insert = 0;\\n    }\\n    /* use the tail */\\n    // dictionary = dictionary.slice(dictLength - s.w_size);\\n    tmpDict = new utils.Buf8(s.w_size);\\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\\n    dictionary = tmpDict;\\n    dictLength = s.w_size;\\n  }\\n  /* insert dictionary into window and hash */\\n  avail = strm.avail_in;\\n  next = strm.next_in;\\n  input = strm.input;\\n  strm.avail_in = dictLength;\\n  strm.next_in = 0;\\n  strm.input = dictionary;\\n  fill_window(s);\\n  while (s.lookahead >= MIN_MATCH) {\\n    str = s.strstart;\\n    n = s.lookahead - (MIN_MATCH - 1);\\n    do {\\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\\n\\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\\n\\n      s.head[s.ins_h] = str;\\n      str++;\\n    } while (--n);\\n    s.strstart = str;\\n    s.lookahead = MIN_MATCH - 1;\\n    fill_window(s);\\n  }\\n  s.strstart += s.lookahead;\\n  s.block_start = s.strstart;\\n  s.insert = s.lookahead;\\n  s.lookahead = 0;\\n  s.match_length = s.prev_length = MIN_MATCH - 1;\\n  s.match_available = 0;\\n  strm.next_in = next;\\n  strm.input = input;\\n  strm.avail_in = avail;\\n  s.wrap = wrap;\\n  return Z_OK;\\n}\\n\\n\\nexports.deflateInit = deflateInit;\\nexports.deflateInit2 = deflateInit2;\\nexports.deflateReset = deflateReset;\\nexports.deflateResetKeep = deflateResetKeep;\\nexports.deflateSetHeader = deflateSetHeader;\\nexports.deflate = deflate;\\nexports.deflateEnd = deflateEnd;\\nexports.deflateSetDictionary = deflateSetDictionary;\\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\\n\\n/* Not implemented\\nexports.deflateBound = deflateBound;\\nexports.deflateCopy = deflateCopy;\\nexports.deflateParams = deflateParams;\\nexports.deflatePending = deflatePending;\\nexports.deflatePrime = deflatePrime;\\nexports.deflateTune = deflateTune;\\n*/\\n\\n},{\\\"../utils/common\\\":68,\\\"./adler32\\\":70,\\\"./crc32\\\":72,\\\"./messages\\\":78,\\\"./trees\\\":79}],74:[function(require,module,exports){\\n'use strict';\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\nfunction GZheader() {\\n  /* true if compressed data believed to be text */\\n  this.text       = 0;\\n  /* modification time */\\n  this.time       = 0;\\n  /* extra flags (not used when writing a gzip file) */\\n  this.xflags     = 0;\\n  /* operating system */\\n  this.os         = 0;\\n  /* pointer to extra field or Z_NULL if none */\\n  this.extra      = null;\\n  /* extra field length (valid if extra != Z_NULL) */\\n  this.extra_len  = 0; // Actually, we don't need it in JS,\\n                       // but leave for few code modifications\\n\\n  //\\n  // Setup limits is not necessary because in js we should not preallocate memory\\n  // for inflate use constant limit in 65536 bytes\\n  //\\n\\n  /* space at extra (only when reading header) */\\n  // this.extra_max  = 0;\\n  /* pointer to zero-terminated file name or Z_NULL */\\n  this.name       = '';\\n  /* space at name (only when reading header) */\\n  // this.name_max   = 0;\\n  /* pointer to zero-terminated comment or Z_NULL */\\n  this.comment    = '';\\n  /* space at comment (only when reading header) */\\n  // this.comm_max   = 0;\\n  /* true if there was or will be a header crc */\\n  this.hcrc       = 0;\\n  /* true when done reading gzip header (not used when writing a gzip file) */\\n  this.done       = false;\\n}\\n\\nmodule.exports = GZheader;\\n\\n},{}],75:[function(require,module,exports){\\n'use strict';\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\n// See state defs from inflate.js\\nvar BAD = 30;       /* got a data error -- remain here until reset */\\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\\n\\n/*\\n   Decode literal, length, and distance codes and write out the resulting\\n   literal and match bytes until either not enough input or output is\\n   available, an end-of-block is encountered, or a data error is encountered.\\n   When large enough input and output buffers are supplied to inflate(), for\\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\\n   inflate execution time is spent in this routine.\\n\\n   Entry assumptions:\\n\\n        state.mode === LEN\\n        strm.avail_in >= 6\\n        strm.avail_out >= 258\\n        start >= strm.avail_out\\n        state.bits < 8\\n\\n   On return, state.mode is one of:\\n\\n        LEN -- ran out of enough output space or enough available input\\n        TYPE -- reached end of block code, inflate() to interpret next block\\n        BAD -- error in block data\\n\\n   Notes:\\n\\n    - The maximum input bits used by a length/distance pair is 15 bits for the\\n      length code, 5 bits for the length extra, 15 bits for the distance code,\\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\\n      checking for available input while decoding.\\n\\n    - The maximum bytes that a single length/distance pair can output is 258\\n      bytes, which is the maximum length that can be coded.  inflate_fast()\\n      requires strm.avail_out >= 258 for each loop to avoid checking for\\n      output space.\\n */\\nmodule.exports = function inflate_fast(strm, start) {\\n  var state;\\n  var _in;                    /* local strm.input */\\n  var last;                   /* have enough input while in < last */\\n  var _out;                   /* local strm.output */\\n  var beg;                    /* inflate()'s initial strm.output */\\n  var end;                    /* while out < end, enough space available */\\n//#ifdef INFLATE_STRICT\\n  var dmax;                   /* maximum distance from zlib header */\\n//#endif\\n  var wsize;                  /* window size or zero if not using window */\\n  var whave;                  /* valid bytes in the window */\\n  var wnext;                  /* window write index */\\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\\n  var s_window;               /* allocated sliding window, if wsize != 0 */\\n  var hold;                   /* local strm.hold */\\n  var bits;                   /* local strm.bits */\\n  var lcode;                  /* local strm.lencode */\\n  var dcode;                  /* local strm.distcode */\\n  var lmask;                  /* mask for first level of length codes */\\n  var dmask;                  /* mask for first level of distance codes */\\n  var here;                   /* retrieved table entry */\\n  var op;                     /* code bits, operation, extra bits, or */\\n                              /*  window position, window bytes to copy */\\n  var len;                    /* match length, unused bytes */\\n  var dist;                   /* match distance */\\n  var from;                   /* where to copy match from */\\n  var from_source;\\n\\n\\n  var input, output; // JS specific, because we have no pointers\\n\\n  /* copy state to local variables */\\n  state = strm.state;\\n  //here = state.here;\\n  _in = strm.next_in;\\n  input = strm.input;\\n  last = _in + (strm.avail_in - 5);\\n  _out = strm.next_out;\\n  output = strm.output;\\n  beg = _out - (start - strm.avail_out);\\n  end = _out + (strm.avail_out - 257);\\n//#ifdef INFLATE_STRICT\\n  dmax = state.dmax;\\n//#endif\\n  wsize = state.wsize;\\n  whave = state.whave;\\n  wnext = state.wnext;\\n  s_window = state.window;\\n  hold = state.hold;\\n  bits = state.bits;\\n  lcode = state.lencode;\\n  dcode = state.distcode;\\n  lmask = (1 << state.lenbits) - 1;\\n  dmask = (1 << state.distbits) - 1;\\n\\n\\n  /* decode literals and length/distances until end-of-block or not enough\\n     input data or output space */\\n\\n  top:\\n  do {\\n    if (bits < 15) {\\n      hold += input[_in++] << bits;\\n      bits += 8;\\n      hold += input[_in++] << bits;\\n      bits += 8;\\n    }\\n\\n    here = lcode[hold & lmask];\\n\\n    dolen:\\n    for (;;) { // Goto emulation\\n      op = here >>> 24/*here.bits*/;\\n      hold >>>= op;\\n      bits -= op;\\n      op = (here >>> 16) & 0xff/*here.op*/;\\n      if (op === 0) {                          /* literal */\\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\\n        //        \\\"inflate:         literal '%c'\\\\n\\\" :\\n        //        \\\"inflate:         literal 0x%02x\\\\n\\\", here.val));\\n        output[_out++] = here & 0xffff/*here.val*/;\\n      }\\n      else if (op & 16) {                     /* length base */\\n        len = here & 0xffff/*here.val*/;\\n        op &= 15;                           /* number of extra bits */\\n        if (op) {\\n          if (bits < op) {\\n            hold += input[_in++] << bits;\\n            bits += 8;\\n          }\\n          len += hold & ((1 << op) - 1);\\n          hold >>>= op;\\n          bits -= op;\\n        }\\n        //Tracevv((stderr, \\\"inflate:         length %u\\\\n\\\", len));\\n        if (bits < 15) {\\n          hold += input[_in++] << bits;\\n          bits += 8;\\n          hold += input[_in++] << bits;\\n          bits += 8;\\n        }\\n        here = dcode[hold & dmask];\\n\\n        dodist:\\n        for (;;) { // goto emulation\\n          op = here >>> 24/*here.bits*/;\\n          hold >>>= op;\\n          bits -= op;\\n          op = (here >>> 16) & 0xff/*here.op*/;\\n\\n          if (op & 16) {                      /* distance base */\\n            dist = here & 0xffff/*here.val*/;\\n            op &= 15;                       /* number of extra bits */\\n            if (bits < op) {\\n              hold += input[_in++] << bits;\\n              bits += 8;\\n              if (bits < op) {\\n                hold += input[_in++] << bits;\\n                bits += 8;\\n              }\\n            }\\n            dist += hold & ((1 << op) - 1);\\n//#ifdef INFLATE_STRICT\\n            if (dist > dmax) {\\n              strm.msg = 'invalid distance too far back';\\n              state.mode = BAD;\\n              break top;\\n            }\\n//#endif\\n            hold >>>= op;\\n            bits -= op;\\n            //Tracevv((stderr, \\\"inflate:         distance %u\\\\n\\\", dist));\\n            op = _out - beg;                /* max distance in output */\\n            if (dist > op) {                /* see if copy from window */\\n              op = dist - op;               /* distance back in window */\\n              if (op > whave) {\\n                if (state.sane) {\\n                  strm.msg = 'invalid distance too far back';\\n                  state.mode = BAD;\\n                  break top;\\n                }\\n\\n// (!) This block is disabled in zlib defaults,\\n// don't enable it for binary compatibility\\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\\n//                if (len <= op - whave) {\\n//                  do {\\n//                    output[_out++] = 0;\\n//                  } while (--len);\\n//                  continue top;\\n//                }\\n//                len -= op - whave;\\n//                do {\\n//                  output[_out++] = 0;\\n//                } while (--op > whave);\\n//                if (op === 0) {\\n//                  from = _out - dist;\\n//                  do {\\n//                    output[_out++] = output[from++];\\n//                  } while (--len);\\n//                  continue top;\\n//                }\\n//#endif\\n              }\\n              from = 0; // window index\\n              from_source = s_window;\\n              if (wnext === 0) {           /* very common case */\\n                from += wsize - op;\\n                if (op < len) {         /* some from window */\\n                  len -= op;\\n                  do {\\n                    output[_out++] = s_window[from++];\\n                  } while (--op);\\n                  from = _out - dist;  /* rest from output */\\n                  from_source = output;\\n                }\\n              }\\n              else if (wnext < op) {      /* wrap around window */\\n                from += wsize + wnext - op;\\n                op -= wnext;\\n                if (op < len) {         /* some from end of window */\\n                  len -= op;\\n                  do {\\n                    output[_out++] = s_window[from++];\\n                  } while (--op);\\n                  from = 0;\\n                  if (wnext < len) {  /* some from start of window */\\n                    op = wnext;\\n                    len -= op;\\n                    do {\\n                      output[_out++] = s_window[from++];\\n                    } while (--op);\\n                    from = _out - dist;      /* rest from output */\\n                    from_source = output;\\n                  }\\n                }\\n              }\\n              else {                      /* contiguous in window */\\n                from += wnext - op;\\n                if (op < len) {         /* some from window */\\n                  len -= op;\\n                  do {\\n                    output[_out++] = s_window[from++];\\n                  } while (--op);\\n                  from = _out - dist;  /* rest from output */\\n                  from_source = output;\\n                }\\n              }\\n              while (len > 2) {\\n                output[_out++] = from_source[from++];\\n                output[_out++] = from_source[from++];\\n                output[_out++] = from_source[from++];\\n                len -= 3;\\n              }\\n              if (len) {\\n                output[_out++] = from_source[from++];\\n                if (len > 1) {\\n                  output[_out++] = from_source[from++];\\n                }\\n              }\\n            }\\n            else {\\n              from = _out - dist;          /* copy direct from output */\\n              do {                        /* minimum length is three */\\n                output[_out++] = output[from++];\\n                output[_out++] = output[from++];\\n                output[_out++] = output[from++];\\n                len -= 3;\\n              } while (len > 2);\\n              if (len) {\\n                output[_out++] = output[from++];\\n                if (len > 1) {\\n                  output[_out++] = output[from++];\\n                }\\n              }\\n            }\\n          }\\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\\n            continue dodist;\\n          }\\n          else {\\n            strm.msg = 'invalid distance code';\\n            state.mode = BAD;\\n            break top;\\n          }\\n\\n          break; // need to emulate goto via \\\"continue\\\"\\n        }\\n      }\\n      else if ((op & 64) === 0) {              /* 2nd level length code */\\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\\n        continue dolen;\\n      }\\n      else if (op & 32) {                     /* end-of-block */\\n        //Tracevv((stderr, \\\"inflate:         end of block\\\\n\\\"));\\n        state.mode = TYPE;\\n        break top;\\n      }\\n      else {\\n        strm.msg = 'invalid literal/length code';\\n        state.mode = BAD;\\n        break top;\\n      }\\n\\n      break; // need to emulate goto via \\\"continue\\\"\\n    }\\n  } while (_in < last && _out < end);\\n\\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\\n  len = bits >> 3;\\n  _in -= len;\\n  bits -= len << 3;\\n  hold &= (1 << bits) - 1;\\n\\n  /* update state and return */\\n  strm.next_in = _in;\\n  strm.next_out = _out;\\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\\n  state.hold = hold;\\n  state.bits = bits;\\n  return;\\n};\\n\\n},{}],76:[function(require,module,exports){\\n'use strict';\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\nvar utils         = require('../utils/common');\\nvar adler32       = require('./adler32');\\nvar crc32         = require('./crc32');\\nvar inflate_fast  = require('./inffast');\\nvar inflate_table = require('./inftrees');\\n\\nvar CODES = 0;\\nvar LENS = 1;\\nvar DISTS = 2;\\n\\n/* Public constants ==========================================================*/\\n/* ===========================================================================*/\\n\\n\\n/* Allowed flush values; see deflate() and inflate() below for details */\\n//var Z_NO_FLUSH      = 0;\\n//var Z_PARTIAL_FLUSH = 1;\\n//var Z_SYNC_FLUSH    = 2;\\n//var Z_FULL_FLUSH    = 3;\\nvar Z_FINISH        = 4;\\nvar Z_BLOCK         = 5;\\nvar Z_TREES         = 6;\\n\\n\\n/* Return codes for the compression/decompression functions. Negative values\\n * are errors, positive values are used for special but normal events.\\n */\\nvar Z_OK            = 0;\\nvar Z_STREAM_END    = 1;\\nvar Z_NEED_DICT     = 2;\\n//var Z_ERRNO         = -1;\\nvar Z_STREAM_ERROR  = -2;\\nvar Z_DATA_ERROR    = -3;\\nvar Z_MEM_ERROR     = -4;\\nvar Z_BUF_ERROR     = -5;\\n//var Z_VERSION_ERROR = -6;\\n\\n/* The deflate compression method */\\nvar Z_DEFLATED  = 8;\\n\\n\\n/* STATES ====================================================================*/\\n/* ===========================================================================*/\\n\\n\\nvar    HEAD = 1;       /* i: waiting for magic header */\\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\\nvar            DIST = 23;      /* i: waiting for distance code */\\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\\nvar            LIT = 26;       /* o: waiting for output space to write literal */\\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\\nvar    BAD = 30;       /* got a data error -- remain here until reset */\\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\\n\\n/* ===========================================================================*/\\n\\n\\n\\nvar ENOUGH_LENS = 852;\\nvar ENOUGH_DISTS = 592;\\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\\n\\nvar MAX_WBITS = 15;\\n/* 32K LZ77 window */\\nvar DEF_WBITS = MAX_WBITS;\\n\\n\\nfunction zswap32(q) {\\n  return  (((q >>> 24) & 0xff) +\\n          ((q >>> 8) & 0xff00) +\\n          ((q & 0xff00) << 8) +\\n          ((q & 0xff) << 24));\\n}\\n\\n\\nfunction InflateState() {\\n  this.mode = 0;             /* current inflate mode */\\n  this.last = false;          /* true if processing last block */\\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\\n  this.havedict = false;      /* true if dictionary provided */\\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\\n  this.check = 0;             /* protected copy of check value */\\n  this.total = 0;             /* protected copy of output count */\\n  // TODO: may be {}\\n  this.head = null;           /* where to save gzip header information */\\n\\n  /* sliding window */\\n  this.wbits = 0;             /* log base 2 of requested window size */\\n  this.wsize = 0;             /* window size or zero if not using window */\\n  this.whave = 0;             /* valid bytes in the window */\\n  this.wnext = 0;             /* window write index */\\n  this.window = null;         /* allocated sliding window, if needed */\\n\\n  /* bit accumulator */\\n  this.hold = 0;              /* input bit accumulator */\\n  this.bits = 0;              /* number of bits in \\\"in\\\" */\\n\\n  /* for string and stored block copying */\\n  this.length = 0;            /* literal or length of data to copy */\\n  this.offset = 0;            /* distance back to copy string from */\\n\\n  /* for table and code decoding */\\n  this.extra = 0;             /* extra bits needed */\\n\\n  /* fixed and dynamic code tables */\\n  this.lencode = null;          /* starting table for length/literal codes */\\n  this.distcode = null;         /* starting table for distance codes */\\n  this.lenbits = 0;           /* index bits for lencode */\\n  this.distbits = 0;          /* index bits for distcode */\\n\\n  /* dynamic table building */\\n  this.ncode = 0;             /* number of code length code lengths */\\n  this.nlen = 0;              /* number of length code lengths */\\n  this.ndist = 0;             /* number of distance code lengths */\\n  this.have = 0;              /* number of code lengths in lens[] */\\n  this.next = null;              /* next available space in codes[] */\\n\\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\\n  this.work = new utils.Buf16(288); /* work area for code table building */\\n\\n  /*\\n   because we don't have pointers in js, we use lencode and distcode directly\\n   as buffers so we don't need codes\\n  */\\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\\n  this.sane = 0;                   /* if false, allow invalid distance too far */\\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\\n  this.was = 0;                    /* initial length of match */\\n}\\n\\nfunction inflateResetKeep(strm) {\\n  var state;\\n\\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\\n  state = strm.state;\\n  strm.total_in = strm.total_out = state.total = 0;\\n  strm.msg = ''; /*Z_NULL*/\\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\\n    strm.adler = state.wrap & 1;\\n  }\\n  state.mode = HEAD;\\n  state.last = 0;\\n  state.havedict = 0;\\n  state.dmax = 32768;\\n  state.head = null/*Z_NULL*/;\\n  state.hold = 0;\\n  state.bits = 0;\\n  //state.lencode = state.distcode = state.next = state.codes;\\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\\n\\n  state.sane = 1;\\n  state.back = -1;\\n  //Tracev((stderr, \\\"inflate: reset\\\\n\\\"));\\n  return Z_OK;\\n}\\n\\nfunction inflateReset(strm) {\\n  var state;\\n\\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\\n  state = strm.state;\\n  state.wsize = 0;\\n  state.whave = 0;\\n  state.wnext = 0;\\n  return inflateResetKeep(strm);\\n\\n}\\n\\nfunction inflateReset2(strm, windowBits) {\\n  var wrap;\\n  var state;\\n\\n  /* get the state */\\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\\n  state = strm.state;\\n\\n  /* extract wrap request from windowBits parameter */\\n  if (windowBits < 0) {\\n    wrap = 0;\\n    windowBits = -windowBits;\\n  }\\n  else {\\n    wrap = (windowBits >> 4) + 1;\\n    if (windowBits < 48) {\\n      windowBits &= 15;\\n    }\\n  }\\n\\n  /* set number of window bits, free window if different */\\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\\n    return Z_STREAM_ERROR;\\n  }\\n  if (state.window !== null && state.wbits !== windowBits) {\\n    state.window = null;\\n  }\\n\\n  /* update state and reset the rest of it */\\n  state.wrap = wrap;\\n  state.wbits = windowBits;\\n  return inflateReset(strm);\\n}\\n\\nfunction inflateInit2(strm, windowBits) {\\n  var ret;\\n  var state;\\n\\n  if (!strm) { return Z_STREAM_ERROR; }\\n  //strm.msg = Z_NULL;                 /* in case we return an error */\\n\\n  state = new InflateState();\\n\\n  //if (state === Z_NULL) return Z_MEM_ERROR;\\n  //Tracev((stderr, \\\"inflate: allocated\\\\n\\\"));\\n  strm.state = state;\\n  state.window = null/*Z_NULL*/;\\n  ret = inflateReset2(strm, windowBits);\\n  if (ret !== Z_OK) {\\n    strm.state = null/*Z_NULL*/;\\n  }\\n  return ret;\\n}\\n\\nfunction inflateInit(strm) {\\n  return inflateInit2(strm, DEF_WBITS);\\n}\\n\\n\\n/*\\n Return state with length and distance decoding tables and index sizes set to\\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\\n If BUILDFIXED is defined, then instead this routine builds the tables the\\n first time it's called, and returns those tables the first time and\\n thereafter.  This reduces the size of the code by about 2K bytes, in\\n exchange for a little execution time.  However, BUILDFIXED should not be\\n used for threaded applications, since the rewriting of the tables and virgin\\n may not be thread-safe.\\n */\\nvar virgin = true;\\n\\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\\n\\nfunction fixedtables(state) {\\n  /* build fixed huffman tables if first call (may not be thread safe) */\\n  if (virgin) {\\n    var sym;\\n\\n    lenfix = new utils.Buf32(512);\\n    distfix = new utils.Buf32(32);\\n\\n    /* literal/length table */\\n    sym = 0;\\n    while (sym < 144) { state.lens[sym++] = 8; }\\n    while (sym < 256) { state.lens[sym++] = 9; }\\n    while (sym < 280) { state.lens[sym++] = 7; }\\n    while (sym < 288) { state.lens[sym++] = 8; }\\n\\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\\n\\n    /* distance table */\\n    sym = 0;\\n    while (sym < 32) { state.lens[sym++] = 5; }\\n\\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\\n\\n    /* do this just once */\\n    virgin = false;\\n  }\\n\\n  state.lencode = lenfix;\\n  state.lenbits = 9;\\n  state.distcode = distfix;\\n  state.distbits = 5;\\n}\\n\\n\\n/*\\n Update the window with the last wsize (normally 32K) bytes written before\\n returning.  If window does not exist yet, create it.  This is only called\\n when a window is already in use, or when output has been written during this\\n inflate call, but the end of the deflate stream has not been reached yet.\\n It is also called to create a window for dictionary data when a dictionary\\n is loaded.\\n\\n Providing output buffers larger than 32K to inflate() should provide a speed\\n advantage, since only the last 32K of output is copied to the sliding window\\n upon return from inflate(), and since all distances after the first 32K of\\n output will fall in the output data, making match copies simpler and faster.\\n The advantage may be dependent on the size of the processor's data caches.\\n */\\nfunction updatewindow(strm, src, end, copy) {\\n  var dist;\\n  var state = strm.state;\\n\\n  /* if it hasn't been done already, allocate space for the window */\\n  if (state.window === null) {\\n    state.wsize = 1 << state.wbits;\\n    state.wnext = 0;\\n    state.whave = 0;\\n\\n    state.window = new utils.Buf8(state.wsize);\\n  }\\n\\n  /* copy state->wsize or less output bytes into the circular window */\\n  if (copy >= state.wsize) {\\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\\n    state.wnext = 0;\\n    state.whave = state.wsize;\\n  }\\n  else {\\n    dist = state.wsize - state.wnext;\\n    if (dist > copy) {\\n      dist = copy;\\n    }\\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\\n    copy -= dist;\\n    if (copy) {\\n      //zmemcpy(state->window, end - copy, copy);\\n      utils.arraySet(state.window, src, end - copy, copy, 0);\\n      state.wnext = copy;\\n      state.whave = state.wsize;\\n    }\\n    else {\\n      state.wnext += dist;\\n      if (state.wnext === state.wsize) { state.wnext = 0; }\\n      if (state.whave < state.wsize) { state.whave += dist; }\\n    }\\n  }\\n  return 0;\\n}\\n\\nfunction inflate(strm, flush) {\\n  var state;\\n  var input, output;          // input/output buffers\\n  var next;                   /* next input INDEX */\\n  var put;                    /* next output INDEX */\\n  var have, left;             /* available input and output */\\n  var hold;                   /* bit buffer */\\n  var bits;                   /* bits in bit buffer */\\n  var _in, _out;              /* save starting available input and output */\\n  var copy;                   /* number of stored or match bytes to copy */\\n  var from;                   /* where to copy match bytes from */\\n  var from_source;\\n  var here = 0;               /* current decoding table entry */\\n  var here_bits, here_op, here_val; // paked \\\"here\\\" denormalized (JS specific)\\n  //var last;                   /* parent table entry */\\n  var last_bits, last_op, last_val; // paked \\\"last\\\" denormalized (JS specific)\\n  var len;                    /* length to copy for repeats, bits to drop */\\n  var ret;                    /* return code */\\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\\n  var opts;\\n\\n  var n; // temporary var for NEED_BITS\\n\\n  var order = /* permutation of code lengths */\\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\\n\\n\\n  if (!strm || !strm.state || !strm.output ||\\n      (!strm.input && strm.avail_in !== 0)) {\\n    return Z_STREAM_ERROR;\\n  }\\n\\n  state = strm.state;\\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\\n\\n\\n  //--- LOAD() ---\\n  put = strm.next_out;\\n  output = strm.output;\\n  left = strm.avail_out;\\n  next = strm.next_in;\\n  input = strm.input;\\n  have = strm.avail_in;\\n  hold = state.hold;\\n  bits = state.bits;\\n  //---\\n\\n  _in = have;\\n  _out = left;\\n  ret = Z_OK;\\n\\n  inf_leave: // goto emulation\\n  for (;;) {\\n    switch (state.mode) {\\n      case HEAD:\\n        if (state.wrap === 0) {\\n          state.mode = TYPEDO;\\n          break;\\n        }\\n        //=== NEEDBITS(16);\\n        while (bits < 16) {\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n        }\\n        //===//\\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\\n          //=== CRC2(state.check, hold);\\n          hbuf[0] = hold & 0xff;\\n          hbuf[1] = (hold >>> 8) & 0xff;\\n          state.check = crc32(state.check, hbuf, 2, 0);\\n          //===//\\n\\n          //=== INITBITS();\\n          hold = 0;\\n          bits = 0;\\n          //===//\\n          state.mode = FLAGS;\\n          break;\\n        }\\n        state.flags = 0;           /* expect zlib header */\\n        if (state.head) {\\n          state.head.done = false;\\n        }\\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\\n          strm.msg = 'incorrect header check';\\n          state.mode = BAD;\\n          break;\\n        }\\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\\n          strm.msg = 'unknown compression method';\\n          state.mode = BAD;\\n          break;\\n        }\\n        //--- DROPBITS(4) ---//\\n        hold >>>= 4;\\n        bits -= 4;\\n        //---//\\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\\n        if (state.wbits === 0) {\\n          state.wbits = len;\\n        }\\n        else if (len > state.wbits) {\\n          strm.msg = 'invalid window size';\\n          state.mode = BAD;\\n          break;\\n        }\\n        state.dmax = 1 << len;\\n        //Tracev((stderr, \\\"inflate:   zlib header ok\\\\n\\\"));\\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\\n        state.mode = hold & 0x200 ? DICTID : TYPE;\\n        //=== INITBITS();\\n        hold = 0;\\n        bits = 0;\\n        //===//\\n        break;\\n      case FLAGS:\\n        //=== NEEDBITS(16); */\\n        while (bits < 16) {\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n        }\\n        //===//\\n        state.flags = hold;\\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\\n          strm.msg = 'unknown compression method';\\n          state.mode = BAD;\\n          break;\\n        }\\n        if (state.flags & 0xe000) {\\n          strm.msg = 'unknown header flags set';\\n          state.mode = BAD;\\n          break;\\n        }\\n        if (state.head) {\\n          state.head.text = ((hold >> 8) & 1);\\n        }\\n        if (state.flags & 0x0200) {\\n          //=== CRC2(state.check, hold);\\n          hbuf[0] = hold & 0xff;\\n          hbuf[1] = (hold >>> 8) & 0xff;\\n          state.check = crc32(state.check, hbuf, 2, 0);\\n          //===//\\n        }\\n        //=== INITBITS();\\n        hold = 0;\\n        bits = 0;\\n        //===//\\n        state.mode = TIME;\\n        /* falls through */\\n      case TIME:\\n        //=== NEEDBITS(32); */\\n        while (bits < 32) {\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n        }\\n        //===//\\n        if (state.head) {\\n          state.head.time = hold;\\n        }\\n        if (state.flags & 0x0200) {\\n          //=== CRC4(state.check, hold)\\n          hbuf[0] = hold & 0xff;\\n          hbuf[1] = (hold >>> 8) & 0xff;\\n          hbuf[2] = (hold >>> 16) & 0xff;\\n          hbuf[3] = (hold >>> 24) & 0xff;\\n          state.check = crc32(state.check, hbuf, 4, 0);\\n          //===\\n        }\\n        //=== INITBITS();\\n        hold = 0;\\n        bits = 0;\\n        //===//\\n        state.mode = OS;\\n        /* falls through */\\n      case OS:\\n        //=== NEEDBITS(16); */\\n        while (bits < 16) {\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n        }\\n        //===//\\n        if (state.head) {\\n          state.head.xflags = (hold & 0xff);\\n          state.head.os = (hold >> 8);\\n        }\\n        if (state.flags & 0x0200) {\\n          //=== CRC2(state.check, hold);\\n          hbuf[0] = hold & 0xff;\\n          hbuf[1] = (hold >>> 8) & 0xff;\\n          state.check = crc32(state.check, hbuf, 2, 0);\\n          //===//\\n        }\\n        //=== INITBITS();\\n        hold = 0;\\n        bits = 0;\\n        //===//\\n        state.mode = EXLEN;\\n        /* falls through */\\n      case EXLEN:\\n        if (state.flags & 0x0400) {\\n          //=== NEEDBITS(16); */\\n          while (bits < 16) {\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            hold += input[next++] << bits;\\n            bits += 8;\\n          }\\n          //===//\\n          state.length = hold;\\n          if (state.head) {\\n            state.head.extra_len = hold;\\n          }\\n          if (state.flags & 0x0200) {\\n            //=== CRC2(state.check, hold);\\n            hbuf[0] = hold & 0xff;\\n            hbuf[1] = (hold >>> 8) & 0xff;\\n            state.check = crc32(state.check, hbuf, 2, 0);\\n            //===//\\n          }\\n          //=== INITBITS();\\n          hold = 0;\\n          bits = 0;\\n          //===//\\n        }\\n        else if (state.head) {\\n          state.head.extra = null/*Z_NULL*/;\\n        }\\n        state.mode = EXTRA;\\n        /* falls through */\\n      case EXTRA:\\n        if (state.flags & 0x0400) {\\n          copy = state.length;\\n          if (copy > have) { copy = have; }\\n          if (copy) {\\n            if (state.head) {\\n              len = state.head.extra_len - state.length;\\n              if (!state.head.extra) {\\n                // Use untyped array for more convenient processing later\\n                state.head.extra = new Array(state.head.extra_len);\\n              }\\n              utils.arraySet(\\n                state.head.extra,\\n                input,\\n                next,\\n                // extra field is limited to 65536 bytes\\n                // - no need for additional size check\\n                copy,\\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\\n                len\\n              );\\n              //zmemcpy(state.head.extra + len, next,\\n              //        len + copy > state.head.extra_max ?\\n              //        state.head.extra_max - len : copy);\\n            }\\n            if (state.flags & 0x0200) {\\n              state.check = crc32(state.check, input, copy, next);\\n            }\\n            have -= copy;\\n            next += copy;\\n            state.length -= copy;\\n          }\\n          if (state.length) { break inf_leave; }\\n        }\\n        state.length = 0;\\n        state.mode = NAME;\\n        /* falls through */\\n      case NAME:\\n        if (state.flags & 0x0800) {\\n          if (have === 0) { break inf_leave; }\\n          copy = 0;\\n          do {\\n            // TODO: 2 or 1 bytes?\\n            len = input[next + copy++];\\n            /* use constant limit because in js we should not preallocate memory */\\n            if (state.head && len &&\\n                (state.length < 65536 /*state.head.name_max*/)) {\\n              state.head.name += String.fromCharCode(len);\\n            }\\n          } while (len && copy < have);\\n\\n          if (state.flags & 0x0200) {\\n            state.check = crc32(state.check, input, copy, next);\\n          }\\n          have -= copy;\\n          next += copy;\\n          if (len) { break inf_leave; }\\n        }\\n        else if (state.head) {\\n          state.head.name = null;\\n        }\\n        state.length = 0;\\n        state.mode = COMMENT;\\n        /* falls through */\\n      case COMMENT:\\n        if (state.flags & 0x1000) {\\n          if (have === 0) { break inf_leave; }\\n          copy = 0;\\n          do {\\n            len = input[next + copy++];\\n            /* use constant limit because in js we should not preallocate memory */\\n            if (state.head && len &&\\n                (state.length < 65536 /*state.head.comm_max*/)) {\\n              state.head.comment += String.fromCharCode(len);\\n            }\\n          } while (len && copy < have);\\n          if (state.flags & 0x0200) {\\n            state.check = crc32(state.check, input, copy, next);\\n          }\\n          have -= copy;\\n          next += copy;\\n          if (len) { break inf_leave; }\\n        }\\n        else if (state.head) {\\n          state.head.comment = null;\\n        }\\n        state.mode = HCRC;\\n        /* falls through */\\n      case HCRC:\\n        if (state.flags & 0x0200) {\\n          //=== NEEDBITS(16); */\\n          while (bits < 16) {\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            hold += input[next++] << bits;\\n            bits += 8;\\n          }\\n          //===//\\n          if (hold !== (state.check & 0xffff)) {\\n            strm.msg = 'header crc mismatch';\\n            state.mode = BAD;\\n            break;\\n          }\\n          //=== INITBITS();\\n          hold = 0;\\n          bits = 0;\\n          //===//\\n        }\\n        if (state.head) {\\n          state.head.hcrc = ((state.flags >> 9) & 1);\\n          state.head.done = true;\\n        }\\n        strm.adler = state.check = 0;\\n        state.mode = TYPE;\\n        break;\\n      case DICTID:\\n        //=== NEEDBITS(32); */\\n        while (bits < 32) {\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n        }\\n        //===//\\n        strm.adler = state.check = zswap32(hold);\\n        //=== INITBITS();\\n        hold = 0;\\n        bits = 0;\\n        //===//\\n        state.mode = DICT;\\n        /* falls through */\\n      case DICT:\\n        if (state.havedict === 0) {\\n          //--- RESTORE() ---\\n          strm.next_out = put;\\n          strm.avail_out = left;\\n          strm.next_in = next;\\n          strm.avail_in = have;\\n          state.hold = hold;\\n          state.bits = bits;\\n          //---\\n          return Z_NEED_DICT;\\n        }\\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\\n        state.mode = TYPE;\\n        /* falls through */\\n      case TYPE:\\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\\n        /* falls through */\\n      case TYPEDO:\\n        if (state.last) {\\n          //--- BYTEBITS() ---//\\n          hold >>>= bits & 7;\\n          bits -= bits & 7;\\n          //---//\\n          state.mode = CHECK;\\n          break;\\n        }\\n        //=== NEEDBITS(3); */\\n        while (bits < 3) {\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n        }\\n        //===//\\n        state.last = (hold & 0x01)/*BITS(1)*/;\\n        //--- DROPBITS(1) ---//\\n        hold >>>= 1;\\n        bits -= 1;\\n        //---//\\n\\n        switch ((hold & 0x03)/*BITS(2)*/) {\\n          case 0:                             /* stored block */\\n            //Tracev((stderr, \\\"inflate:     stored block%s\\\\n\\\",\\n            //        state.last ? \\\" (last)\\\" : \\\"\\\"));\\n            state.mode = STORED;\\n            break;\\n          case 1:                             /* fixed block */\\n            fixedtables(state);\\n            //Tracev((stderr, \\\"inflate:     fixed codes block%s\\\\n\\\",\\n            //        state.last ? \\\" (last)\\\" : \\\"\\\"));\\n            state.mode = LEN_;             /* decode codes */\\n            if (flush === Z_TREES) {\\n              //--- DROPBITS(2) ---//\\n              hold >>>= 2;\\n              bits -= 2;\\n              //---//\\n              break inf_leave;\\n            }\\n            break;\\n          case 2:                             /* dynamic block */\\n            //Tracev((stderr, \\\"inflate:     dynamic codes block%s\\\\n\\\",\\n            //        state.last ? \\\" (last)\\\" : \\\"\\\"));\\n            state.mode = TABLE;\\n            break;\\n          case 3:\\n            strm.msg = 'invalid block type';\\n            state.mode = BAD;\\n        }\\n        //--- DROPBITS(2) ---//\\n        hold >>>= 2;\\n        bits -= 2;\\n        //---//\\n        break;\\n      case STORED:\\n        //--- BYTEBITS() ---// /* go to byte boundary */\\n        hold >>>= bits & 7;\\n        bits -= bits & 7;\\n        //---//\\n        //=== NEEDBITS(32); */\\n        while (bits < 32) {\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n        }\\n        //===//\\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\\n          strm.msg = 'invalid stored block lengths';\\n          state.mode = BAD;\\n          break;\\n        }\\n        state.length = hold & 0xffff;\\n        //Tracev((stderr, \\\"inflate:       stored length %u\\\\n\\\",\\n        //        state.length));\\n        //=== INITBITS();\\n        hold = 0;\\n        bits = 0;\\n        //===//\\n        state.mode = COPY_;\\n        if (flush === Z_TREES) { break inf_leave; }\\n        /* falls through */\\n      case COPY_:\\n        state.mode = COPY;\\n        /* falls through */\\n      case COPY:\\n        copy = state.length;\\n        if (copy) {\\n          if (copy > have) { copy = have; }\\n          if (copy > left) { copy = left; }\\n          if (copy === 0) { break inf_leave; }\\n          //--- zmemcpy(put, next, copy); ---\\n          utils.arraySet(output, input, next, copy, put);\\n          //---//\\n          have -= copy;\\n          next += copy;\\n          left -= copy;\\n          put += copy;\\n          state.length -= copy;\\n          break;\\n        }\\n        //Tracev((stderr, \\\"inflate:       stored end\\\\n\\\"));\\n        state.mode = TYPE;\\n        break;\\n      case TABLE:\\n        //=== NEEDBITS(14); */\\n        while (bits < 14) {\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n        }\\n        //===//\\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\\n        //--- DROPBITS(5) ---//\\n        hold >>>= 5;\\n        bits -= 5;\\n        //---//\\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\\n        //--- DROPBITS(5) ---//\\n        hold >>>= 5;\\n        bits -= 5;\\n        //---//\\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\\n        //--- DROPBITS(4) ---//\\n        hold >>>= 4;\\n        bits -= 4;\\n        //---//\\n//#ifndef PKZIP_BUG_WORKAROUND\\n        if (state.nlen > 286 || state.ndist > 30) {\\n          strm.msg = 'too many length or distance symbols';\\n          state.mode = BAD;\\n          break;\\n        }\\n//#endif\\n        //Tracev((stderr, \\\"inflate:       table sizes ok\\\\n\\\"));\\n        state.have = 0;\\n        state.mode = LENLENS;\\n        /* falls through */\\n      case LENLENS:\\n        while (state.have < state.ncode) {\\n          //=== NEEDBITS(3);\\n          while (bits < 3) {\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            hold += input[next++] << bits;\\n            bits += 8;\\n          }\\n          //===//\\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\\n          //--- DROPBITS(3) ---//\\n          hold >>>= 3;\\n          bits -= 3;\\n          //---//\\n        }\\n        while (state.have < 19) {\\n          state.lens[order[state.have++]] = 0;\\n        }\\n        // We have separate tables & no pointers. 2 commented lines below not needed.\\n        //state.next = state.codes;\\n        //state.lencode = state.next;\\n        // Switch to use dynamic table\\n        state.lencode = state.lendyn;\\n        state.lenbits = 7;\\n\\n        opts = { bits: state.lenbits };\\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\\n        state.lenbits = opts.bits;\\n\\n        if (ret) {\\n          strm.msg = 'invalid code lengths set';\\n          state.mode = BAD;\\n          break;\\n        }\\n        //Tracev((stderr, \\\"inflate:       code lengths ok\\\\n\\\"));\\n        state.have = 0;\\n        state.mode = CODELENS;\\n        /* falls through */\\n      case CODELENS:\\n        while (state.have < state.nlen + state.ndist) {\\n          for (;;) {\\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\\n            here_bits = here >>> 24;\\n            here_op = (here >>> 16) & 0xff;\\n            here_val = here & 0xffff;\\n\\n            if ((here_bits) <= bits) { break; }\\n            //--- PULLBYTE() ---//\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            hold += input[next++] << bits;\\n            bits += 8;\\n            //---//\\n          }\\n          if (here_val < 16) {\\n            //--- DROPBITS(here.bits) ---//\\n            hold >>>= here_bits;\\n            bits -= here_bits;\\n            //---//\\n            state.lens[state.have++] = here_val;\\n          }\\n          else {\\n            if (here_val === 16) {\\n              //=== NEEDBITS(here.bits + 2);\\n              n = here_bits + 2;\\n              while (bits < n) {\\n                if (have === 0) { break inf_leave; }\\n                have--;\\n                hold += input[next++] << bits;\\n                bits += 8;\\n              }\\n              //===//\\n              //--- DROPBITS(here.bits) ---//\\n              hold >>>= here_bits;\\n              bits -= here_bits;\\n              //---//\\n              if (state.have === 0) {\\n                strm.msg = 'invalid bit length repeat';\\n                state.mode = BAD;\\n                break;\\n              }\\n              len = state.lens[state.have - 1];\\n              copy = 3 + (hold & 0x03);//BITS(2);\\n              //--- DROPBITS(2) ---//\\n              hold >>>= 2;\\n              bits -= 2;\\n              //---//\\n            }\\n            else if (here_val === 17) {\\n              //=== NEEDBITS(here.bits + 3);\\n              n = here_bits + 3;\\n              while (bits < n) {\\n                if (have === 0) { break inf_leave; }\\n                have--;\\n                hold += input[next++] << bits;\\n                bits += 8;\\n              }\\n              //===//\\n              //--- DROPBITS(here.bits) ---//\\n              hold >>>= here_bits;\\n              bits -= here_bits;\\n              //---//\\n              len = 0;\\n              copy = 3 + (hold & 0x07);//BITS(3);\\n              //--- DROPBITS(3) ---//\\n              hold >>>= 3;\\n              bits -= 3;\\n              //---//\\n            }\\n            else {\\n              //=== NEEDBITS(here.bits + 7);\\n              n = here_bits + 7;\\n              while (bits < n) {\\n                if (have === 0) { break inf_leave; }\\n                have--;\\n                hold += input[next++] << bits;\\n                bits += 8;\\n              }\\n              //===//\\n              //--- DROPBITS(here.bits) ---//\\n              hold >>>= here_bits;\\n              bits -= here_bits;\\n              //---//\\n              len = 0;\\n              copy = 11 + (hold & 0x7f);//BITS(7);\\n              //--- DROPBITS(7) ---//\\n              hold >>>= 7;\\n              bits -= 7;\\n              //---//\\n            }\\n            if (state.have + copy > state.nlen + state.ndist) {\\n              strm.msg = 'invalid bit length repeat';\\n              state.mode = BAD;\\n              break;\\n            }\\n            while (copy--) {\\n              state.lens[state.have++] = len;\\n            }\\n          }\\n        }\\n\\n        /* handle error breaks in while */\\n        if (state.mode === BAD) { break; }\\n\\n        /* check for end-of-block code (better have one) */\\n        if (state.lens[256] === 0) {\\n          strm.msg = 'invalid code -- missing end-of-block';\\n          state.mode = BAD;\\n          break;\\n        }\\n\\n        /* build code tables -- note: do not change the lenbits or distbits\\n           values here (9 and 6) without reading the comments in inftrees.h\\n           concerning the ENOUGH constants, which depend on those values */\\n        state.lenbits = 9;\\n\\n        opts = { bits: state.lenbits };\\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\\n        // We have separate tables & no pointers. 2 commented lines below not needed.\\n        // state.next_index = opts.table_index;\\n        state.lenbits = opts.bits;\\n        // state.lencode = state.next;\\n\\n        if (ret) {\\n          strm.msg = 'invalid literal/lengths set';\\n          state.mode = BAD;\\n          break;\\n        }\\n\\n        state.distbits = 6;\\n        //state.distcode.copy(state.codes);\\n        // Switch to use dynamic table\\n        state.distcode = state.distdyn;\\n        opts = { bits: state.distbits };\\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\\n        // We have separate tables & no pointers. 2 commented lines below not needed.\\n        // state.next_index = opts.table_index;\\n        state.distbits = opts.bits;\\n        // state.distcode = state.next;\\n\\n        if (ret) {\\n          strm.msg = 'invalid distances set';\\n          state.mode = BAD;\\n          break;\\n        }\\n        //Tracev((stderr, 'inflate:       codes ok\\\\n'));\\n        state.mode = LEN_;\\n        if (flush === Z_TREES) { break inf_leave; }\\n        /* falls through */\\n      case LEN_:\\n        state.mode = LEN;\\n        /* falls through */\\n      case LEN:\\n        if (have >= 6 && left >= 258) {\\n          //--- RESTORE() ---\\n          strm.next_out = put;\\n          strm.avail_out = left;\\n          strm.next_in = next;\\n          strm.avail_in = have;\\n          state.hold = hold;\\n          state.bits = bits;\\n          //---\\n          inflate_fast(strm, _out);\\n          //--- LOAD() ---\\n          put = strm.next_out;\\n          output = strm.output;\\n          left = strm.avail_out;\\n          next = strm.next_in;\\n          input = strm.input;\\n          have = strm.avail_in;\\n          hold = state.hold;\\n          bits = state.bits;\\n          //---\\n\\n          if (state.mode === TYPE) {\\n            state.back = -1;\\n          }\\n          break;\\n        }\\n        state.back = 0;\\n        for (;;) {\\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\\n          here_bits = here >>> 24;\\n          here_op = (here >>> 16) & 0xff;\\n          here_val = here & 0xffff;\\n\\n          if (here_bits <= bits) { break; }\\n          //--- PULLBYTE() ---//\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n          //---//\\n        }\\n        if (here_op && (here_op & 0xf0) === 0) {\\n          last_bits = here_bits;\\n          last_op = here_op;\\n          last_val = here_val;\\n          for (;;) {\\n            here = state.lencode[last_val +\\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\\n            here_bits = here >>> 24;\\n            here_op = (here >>> 16) & 0xff;\\n            here_val = here & 0xffff;\\n\\n            if ((last_bits + here_bits) <= bits) { break; }\\n            //--- PULLBYTE() ---//\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            hold += input[next++] << bits;\\n            bits += 8;\\n            //---//\\n          }\\n          //--- DROPBITS(last.bits) ---//\\n          hold >>>= last_bits;\\n          bits -= last_bits;\\n          //---//\\n          state.back += last_bits;\\n        }\\n        //--- DROPBITS(here.bits) ---//\\n        hold >>>= here_bits;\\n        bits -= here_bits;\\n        //---//\\n        state.back += here_bits;\\n        state.length = here_val;\\n        if (here_op === 0) {\\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\\n          //        \\\"inflate:         literal '%c'\\\\n\\\" :\\n          //        \\\"inflate:         literal 0x%02x\\\\n\\\", here.val));\\n          state.mode = LIT;\\n          break;\\n        }\\n        if (here_op & 32) {\\n          //Tracevv((stderr, \\\"inflate:         end of block\\\\n\\\"));\\n          state.back = -1;\\n          state.mode = TYPE;\\n          break;\\n        }\\n        if (here_op & 64) {\\n          strm.msg = 'invalid literal/length code';\\n          state.mode = BAD;\\n          break;\\n        }\\n        state.extra = here_op & 15;\\n        state.mode = LENEXT;\\n        /* falls through */\\n      case LENEXT:\\n        if (state.extra) {\\n          //=== NEEDBITS(state.extra);\\n          n = state.extra;\\n          while (bits < n) {\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            hold += input[next++] << bits;\\n            bits += 8;\\n          }\\n          //===//\\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\\n          //--- DROPBITS(state.extra) ---//\\n          hold >>>= state.extra;\\n          bits -= state.extra;\\n          //---//\\n          state.back += state.extra;\\n        }\\n        //Tracevv((stderr, \\\"inflate:         length %u\\\\n\\\", state.length));\\n        state.was = state.length;\\n        state.mode = DIST;\\n        /* falls through */\\n      case DIST:\\n        for (;;) {\\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\\n          here_bits = here >>> 24;\\n          here_op = (here >>> 16) & 0xff;\\n          here_val = here & 0xffff;\\n\\n          if ((here_bits) <= bits) { break; }\\n          //--- PULLBYTE() ---//\\n          if (have === 0) { break inf_leave; }\\n          have--;\\n          hold += input[next++] << bits;\\n          bits += 8;\\n          //---//\\n        }\\n        if ((here_op & 0xf0) === 0) {\\n          last_bits = here_bits;\\n          last_op = here_op;\\n          last_val = here_val;\\n          for (;;) {\\n            here = state.distcode[last_val +\\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\\n            here_bits = here >>> 24;\\n            here_op = (here >>> 16) & 0xff;\\n            here_val = here & 0xffff;\\n\\n            if ((last_bits + here_bits) <= bits) { break; }\\n            //--- PULLBYTE() ---//\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            hold += input[next++] << bits;\\n            bits += 8;\\n            //---//\\n          }\\n          //--- DROPBITS(last.bits) ---//\\n          hold >>>= last_bits;\\n          bits -= last_bits;\\n          //---//\\n          state.back += last_bits;\\n        }\\n        //--- DROPBITS(here.bits) ---//\\n        hold >>>= here_bits;\\n        bits -= here_bits;\\n        //---//\\n        state.back += here_bits;\\n        if (here_op & 64) {\\n          strm.msg = 'invalid distance code';\\n          state.mode = BAD;\\n          break;\\n        }\\n        state.offset = here_val;\\n        state.extra = (here_op) & 15;\\n        state.mode = DISTEXT;\\n        /* falls through */\\n      case DISTEXT:\\n        if (state.extra) {\\n          //=== NEEDBITS(state.extra);\\n          n = state.extra;\\n          while (bits < n) {\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            hold += input[next++] << bits;\\n            bits += 8;\\n          }\\n          //===//\\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\\n          //--- DROPBITS(state.extra) ---//\\n          hold >>>= state.extra;\\n          bits -= state.extra;\\n          //---//\\n          state.back += state.extra;\\n        }\\n//#ifdef INFLATE_STRICT\\n        if (state.offset > state.dmax) {\\n          strm.msg = 'invalid distance too far back';\\n          state.mode = BAD;\\n          break;\\n        }\\n//#endif\\n        //Tracevv((stderr, \\\"inflate:         distance %u\\\\n\\\", state.offset));\\n        state.mode = MATCH;\\n        /* falls through */\\n      case MATCH:\\n        if (left === 0) { break inf_leave; }\\n        copy = _out - left;\\n        if (state.offset > copy) {         /* copy from window */\\n          copy = state.offset - copy;\\n          if (copy > state.whave) {\\n            if (state.sane) {\\n              strm.msg = 'invalid distance too far back';\\n              state.mode = BAD;\\n              break;\\n            }\\n// (!) This block is disabled in zlib defaults,\\n// don't enable it for binary compatibility\\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\\n//          Trace((stderr, \\\"inflate.c too far\\\\n\\\"));\\n//          copy -= state.whave;\\n//          if (copy > state.length) { copy = state.length; }\\n//          if (copy > left) { copy = left; }\\n//          left -= copy;\\n//          state.length -= copy;\\n//          do {\\n//            output[put++] = 0;\\n//          } while (--copy);\\n//          if (state.length === 0) { state.mode = LEN; }\\n//          break;\\n//#endif\\n          }\\n          if (copy > state.wnext) {\\n            copy -= state.wnext;\\n            from = state.wsize - copy;\\n          }\\n          else {\\n            from = state.wnext - copy;\\n          }\\n          if (copy > state.length) { copy = state.length; }\\n          from_source = state.window;\\n        }\\n        else {                              /* copy from output */\\n          from_source = output;\\n          from = put - state.offset;\\n          copy = state.length;\\n        }\\n        if (copy > left) { copy = left; }\\n        left -= copy;\\n        state.length -= copy;\\n        do {\\n          output[put++] = from_source[from++];\\n        } while (--copy);\\n        if (state.length === 0) { state.mode = LEN; }\\n        break;\\n      case LIT:\\n        if (left === 0) { break inf_leave; }\\n        output[put++] = state.length;\\n        left--;\\n        state.mode = LEN;\\n        break;\\n      case CHECK:\\n        if (state.wrap) {\\n          //=== NEEDBITS(32);\\n          while (bits < 32) {\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            // Use '|' instead of '+' to make sure that result is signed\\n            hold |= input[next++] << bits;\\n            bits += 8;\\n          }\\n          //===//\\n          _out -= left;\\n          strm.total_out += _out;\\n          state.total += _out;\\n          if (_out) {\\n            strm.adler = state.check =\\n                /*UPDATE(state.check, put - _out, _out);*/\\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\\n\\n          }\\n          _out = left;\\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\\n            strm.msg = 'incorrect data check';\\n            state.mode = BAD;\\n            break;\\n          }\\n          //=== INITBITS();\\n          hold = 0;\\n          bits = 0;\\n          //===//\\n          //Tracev((stderr, \\\"inflate:   check matches trailer\\\\n\\\"));\\n        }\\n        state.mode = LENGTH;\\n        /* falls through */\\n      case LENGTH:\\n        if (state.wrap && state.flags) {\\n          //=== NEEDBITS(32);\\n          while (bits < 32) {\\n            if (have === 0) { break inf_leave; }\\n            have--;\\n            hold += input[next++] << bits;\\n            bits += 8;\\n          }\\n          //===//\\n          if (hold !== (state.total & 0xffffffff)) {\\n            strm.msg = 'incorrect length check';\\n            state.mode = BAD;\\n            break;\\n          }\\n          //=== INITBITS();\\n          hold = 0;\\n          bits = 0;\\n          //===//\\n          //Tracev((stderr, \\\"inflate:   length matches trailer\\\\n\\\"));\\n        }\\n        state.mode = DONE;\\n        /* falls through */\\n      case DONE:\\n        ret = Z_STREAM_END;\\n        break inf_leave;\\n      case BAD:\\n        ret = Z_DATA_ERROR;\\n        break inf_leave;\\n      case MEM:\\n        return Z_MEM_ERROR;\\n      case SYNC:\\n        /* falls through */\\n      default:\\n        return Z_STREAM_ERROR;\\n    }\\n  }\\n\\n  // inf_leave <- here is real place for \\\"goto inf_leave\\\", emulated via \\\"break inf_leave\\\"\\n\\n  /*\\n     Return from inflate(), updating the total counts and the check value.\\n     If there was no progress during the inflate() call, return a buffer\\n     error.  Call updatewindow() to create and/or update the window state.\\n     Note: a memory error from inflate() is non-recoverable.\\n   */\\n\\n  //--- RESTORE() ---\\n  strm.next_out = put;\\n  strm.avail_out = left;\\n  strm.next_in = next;\\n  strm.avail_in = have;\\n  state.hold = hold;\\n  state.bits = bits;\\n  //---\\n\\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\\n      state.mode = MEM;\\n      return Z_MEM_ERROR;\\n    }\\n  }\\n  _in -= strm.avail_in;\\n  _out -= strm.avail_out;\\n  strm.total_in += _in;\\n  strm.total_out += _out;\\n  state.total += _out;\\n  if (state.wrap && _out) {\\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\\n  }\\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\\n                    (state.mode === TYPE ? 128 : 0) +\\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\\n    ret = Z_BUF_ERROR;\\n  }\\n  return ret;\\n}\\n\\nfunction inflateEnd(strm) {\\n\\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\\n    return Z_STREAM_ERROR;\\n  }\\n\\n  var state = strm.state;\\n  if (state.window) {\\n    state.window = null;\\n  }\\n  strm.state = null;\\n  return Z_OK;\\n}\\n\\nfunction inflateGetHeader(strm, head) {\\n  var state;\\n\\n  /* check state */\\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\\n  state = strm.state;\\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\\n\\n  /* save header structure */\\n  state.head = head;\\n  head.done = false;\\n  return Z_OK;\\n}\\n\\nfunction inflateSetDictionary(strm, dictionary) {\\n  var dictLength = dictionary.length;\\n\\n  var state;\\n  var dictid;\\n  var ret;\\n\\n  /* check state */\\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\\n  state = strm.state;\\n\\n  if (state.wrap !== 0 && state.mode !== DICT) {\\n    return Z_STREAM_ERROR;\\n  }\\n\\n  /* check for correct dictionary identifier */\\n  if (state.mode === DICT) {\\n    dictid = 1; /* adler32(0, null, 0)*/\\n    /* dictid = adler32(dictid, dictionary, dictLength); */\\n    dictid = adler32(dictid, dictionary, dictLength, 0);\\n    if (dictid !== state.check) {\\n      return Z_DATA_ERROR;\\n    }\\n  }\\n  /* copy dictionary to window using updatewindow(), which will amend the\\n   existing dictionary if appropriate */\\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\\n  if (ret) {\\n    state.mode = MEM;\\n    return Z_MEM_ERROR;\\n  }\\n  state.havedict = 1;\\n  // Tracev((stderr, \\\"inflate:   dictionary set\\\\n\\\"));\\n  return Z_OK;\\n}\\n\\nexports.inflateReset = inflateReset;\\nexports.inflateReset2 = inflateReset2;\\nexports.inflateResetKeep = inflateResetKeep;\\nexports.inflateInit = inflateInit;\\nexports.inflateInit2 = inflateInit2;\\nexports.inflate = inflate;\\nexports.inflateEnd = inflateEnd;\\nexports.inflateGetHeader = inflateGetHeader;\\nexports.inflateSetDictionary = inflateSetDictionary;\\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\\n\\n/* Not implemented\\nexports.inflateCopy = inflateCopy;\\nexports.inflateGetDictionary = inflateGetDictionary;\\nexports.inflateMark = inflateMark;\\nexports.inflatePrime = inflatePrime;\\nexports.inflateSync = inflateSync;\\nexports.inflateSyncPoint = inflateSyncPoint;\\nexports.inflateUndermine = inflateUndermine;\\n*/\\n\\n},{\\\"../utils/common\\\":68,\\\"./adler32\\\":70,\\\"./crc32\\\":72,\\\"./inffast\\\":75,\\\"./inftrees\\\":77}],77:[function(require,module,exports){\\n'use strict';\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\nvar utils = require('../utils/common');\\n\\nvar MAXBITS = 15;\\nvar ENOUGH_LENS = 852;\\nvar ENOUGH_DISTS = 592;\\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\\n\\nvar CODES = 0;\\nvar LENS = 1;\\nvar DISTS = 2;\\n\\nvar lbase = [ /* Length codes 257..285 base */\\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\\n];\\n\\nvar lext = [ /* Length codes 257..285 extra */\\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\\n];\\n\\nvar dbase = [ /* Distance codes 0..29 base */\\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\\n  8193, 12289, 16385, 24577, 0, 0\\n];\\n\\nvar dext = [ /* Distance codes 0..29 extra */\\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\\n  28, 28, 29, 29, 64, 64\\n];\\n\\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\\n{\\n  var bits = opts.bits;\\n      //here = opts.here; /* table entry for duplication */\\n\\n  var len = 0;               /* a code's length in bits */\\n  var sym = 0;               /* index of code symbols */\\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\\n  var root = 0;              /* number of index bits for root table */\\n  var curr = 0;              /* number of index bits for current table */\\n  var drop = 0;              /* code bits to drop for sub-table */\\n  var left = 0;                   /* number of prefix codes available */\\n  var used = 0;              /* code entries in table used */\\n  var huff = 0;              /* Huffman code */\\n  var incr;              /* for incrementing code, index */\\n  var fill;              /* index for replicating entries */\\n  var low;               /* low bits for current root entry */\\n  var mask;              /* mask for low root bits */\\n  var next;             /* next available space in table */\\n  var base = null;     /* base value table to use */\\n  var base_index = 0;\\n//  var shoextra;    /* extra bits table to use */\\n  var end;                    /* use base and extra for symbol > end */\\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\\n  var extra = null;\\n  var extra_index = 0;\\n\\n  var here_bits, here_op, here_val;\\n\\n  /*\\n   Process a set of code lengths to create a canonical Huffman code.  The\\n   code lengths are lens[0..codes-1].  Each length corresponds to the\\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\\n   symbols by length from short to long, and retaining the symbol order\\n   for codes with equal lengths.  Then the code starts with all zero bits\\n   for the first code of the shortest length, and the codes are integer\\n   increments for the same length, and zeros are appended as the length\\n   increases.  For the deflate format, these bits are stored backwards\\n   from their more natural integer increment ordering, and so when the\\n   decoding tables are built in the large loop below, the integer codes\\n   are incremented backwards.\\n\\n   This routine assumes, but does not check, that all of the entries in\\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\\n   1..MAXBITS is interpreted as that code length.  zero means that that\\n   symbol does not occur in this code.\\n\\n   The codes are sorted by computing a count of codes for each length,\\n   creating from that a table of starting indices for each length in the\\n   sorted table, and then entering the symbols in order in the sorted\\n   table.  The sorted table is work[], with that space being provided by\\n   the caller.\\n\\n   The length counts are used for other purposes as well, i.e. finding\\n   the minimum and maximum length codes, determining if there are any\\n   codes at all, checking for a valid set of lengths, and looking ahead\\n   at length counts to determine sub-table sizes when building the\\n   decoding tables.\\n   */\\n\\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\\n  for (len = 0; len <= MAXBITS; len++) {\\n    count[len] = 0;\\n  }\\n  for (sym = 0; sym < codes; sym++) {\\n    count[lens[lens_index + sym]]++;\\n  }\\n\\n  /* bound code lengths, force root to be within code lengths */\\n  root = bits;\\n  for (max = MAXBITS; max >= 1; max--) {\\n    if (count[max] !== 0) { break; }\\n  }\\n  if (root > max) {\\n    root = max;\\n  }\\n  if (max === 0) {                     /* no symbols to code at all */\\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\\n\\n\\n    //table.op[opts.table_index] = 64;\\n    //table.bits[opts.table_index] = 1;\\n    //table.val[opts.table_index++] = 0;\\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\\n\\n    opts.bits = 1;\\n    return 0;     /* no symbols, but wait for decoding to report error */\\n  }\\n  for (min = 1; min < max; min++) {\\n    if (count[min] !== 0) { break; }\\n  }\\n  if (root < min) {\\n    root = min;\\n  }\\n\\n  /* check for an over-subscribed or incomplete set of lengths */\\n  left = 1;\\n  for (len = 1; len <= MAXBITS; len++) {\\n    left <<= 1;\\n    left -= count[len];\\n    if (left < 0) {\\n      return -1;\\n    }        /* over-subscribed */\\n  }\\n  if (left > 0 && (type === CODES || max !== 1)) {\\n    return -1;                      /* incomplete set */\\n  }\\n\\n  /* generate offsets into symbol table for each length for sorting */\\n  offs[1] = 0;\\n  for (len = 1; len < MAXBITS; len++) {\\n    offs[len + 1] = offs[len] + count[len];\\n  }\\n\\n  /* sort symbols by length, by symbol order within each length */\\n  for (sym = 0; sym < codes; sym++) {\\n    if (lens[lens_index + sym] !== 0) {\\n      work[offs[lens[lens_index + sym]]++] = sym;\\n    }\\n  }\\n\\n  /*\\n   Create and fill in decoding tables.  In this loop, the table being\\n   filled is at next and has curr index bits.  The code being used is huff\\n   with length len.  That code is converted to an index by dropping drop\\n   bits off of the bottom.  For codes where len is less than drop + curr,\\n   those top drop + curr - len bits are incremented through all values to\\n   fill the table with replicated entries.\\n\\n   root is the number of index bits for the root table.  When len exceeds\\n   root, sub-tables are created pointed to by the root entry with an index\\n   of the low root bits of huff.  This is saved in low to check for when a\\n   new sub-table should be started.  drop is zero when the root table is\\n   being filled, and drop is root when sub-tables are being filled.\\n\\n   When a new sub-table is needed, it is necessary to look ahead in the\\n   code lengths to determine what size sub-table is needed.  The length\\n   counts are used for this, and so count[] is decremented as codes are\\n   entered in the tables.\\n\\n   used keeps track of how many table entries have been allocated from the\\n   provided *table space.  It is checked for LENS and DIST tables against\\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\\n   the initial root table size constants.  See the comments in inftrees.h\\n   for more information.\\n\\n   sym increments through all symbols, and the loop terminates when\\n   all codes of length max, i.e. all codes, have been processed.  This\\n   routine permits incomplete codes, so another loop after this one fills\\n   in the rest of the decoding tables with invalid code markers.\\n   */\\n\\n  /* set up for code type */\\n  // poor man optimization - use if-else instead of switch,\\n  // to avoid deopts in old v8\\n  if (type === CODES) {\\n    base = extra = work;    /* dummy value--not used */\\n    end = 19;\\n\\n  } else if (type === LENS) {\\n    base = lbase;\\n    base_index -= 257;\\n    extra = lext;\\n    extra_index -= 257;\\n    end = 256;\\n\\n  } else {                    /* DISTS */\\n    base = dbase;\\n    extra = dext;\\n    end = -1;\\n  }\\n\\n  /* initialize opts for loop */\\n  huff = 0;                   /* starting code */\\n  sym = 0;                    /* starting code symbol */\\n  len = min;                  /* starting code length */\\n  next = table_index;              /* current table to fill in */\\n  curr = root;                /* current table index bits */\\n  drop = 0;                   /* current bits to drop from code for index */\\n  low = -1;                   /* trigger new sub-table when len > root */\\n  used = 1 << root;          /* use root table entries */\\n  mask = used - 1;            /* mask for comparing low */\\n\\n  /* check available table space */\\n  if ((type === LENS && used > ENOUGH_LENS) ||\\n    (type === DISTS && used > ENOUGH_DISTS)) {\\n    return 1;\\n  }\\n\\n  /* process all codes and make table entries */\\n  for (;;) {\\n    /* create table entry */\\n    here_bits = len - drop;\\n    if (work[sym] < end) {\\n      here_op = 0;\\n      here_val = work[sym];\\n    }\\n    else if (work[sym] > end) {\\n      here_op = extra[extra_index + work[sym]];\\n      here_val = base[base_index + work[sym]];\\n    }\\n    else {\\n      here_op = 32 + 64;         /* end of block */\\n      here_val = 0;\\n    }\\n\\n    /* replicate for those indices with low len bits equal to huff */\\n    incr = 1 << (len - drop);\\n    fill = 1 << curr;\\n    min = fill;                 /* save offset to next table */\\n    do {\\n      fill -= incr;\\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\\n    } while (fill !== 0);\\n\\n    /* backwards increment the len-bit code huff */\\n    incr = 1 << (len - 1);\\n    while (huff & incr) {\\n      incr >>= 1;\\n    }\\n    if (incr !== 0) {\\n      huff &= incr - 1;\\n      huff += incr;\\n    } else {\\n      huff = 0;\\n    }\\n\\n    /* go to next symbol, update count, len */\\n    sym++;\\n    if (--count[len] === 0) {\\n      if (len === max) { break; }\\n      len = lens[lens_index + work[sym]];\\n    }\\n\\n    /* create new sub-table if needed */\\n    if (len > root && (huff & mask) !== low) {\\n      /* if first time, transition to sub-tables */\\n      if (drop === 0) {\\n        drop = root;\\n      }\\n\\n      /* increment past last table */\\n      next += min;            /* here min is 1 << curr */\\n\\n      /* determine length of next table */\\n      curr = len - drop;\\n      left = 1 << curr;\\n      while (curr + drop < max) {\\n        left -= count[curr + drop];\\n        if (left <= 0) { break; }\\n        curr++;\\n        left <<= 1;\\n      }\\n\\n      /* check for enough space */\\n      used += 1 << curr;\\n      if ((type === LENS && used > ENOUGH_LENS) ||\\n        (type === DISTS && used > ENOUGH_DISTS)) {\\n        return 1;\\n      }\\n\\n      /* point entry in root table to sub-table */\\n      low = huff & mask;\\n      /*table.op[low] = curr;\\n      table.bits[low] = root;\\n      table.val[low] = next - opts.table_index;*/\\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\\n    }\\n  }\\n\\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\\n   at most one remaining entry, since if the code is incomplete, the\\n   maximum code length that was allowed to get this far is one bit) */\\n  if (huff !== 0) {\\n    //table.op[next + huff] = 64;            /* invalid code marker */\\n    //table.bits[next + huff] = len - drop;\\n    //table.val[next + huff] = 0;\\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\\n  }\\n\\n  /* set return parameters */\\n  //opts.table_index += used;\\n  opts.bits = root;\\n  return 0;\\n};\\n\\n},{\\\"../utils/common\\\":68}],78:[function(require,module,exports){\\n'use strict';\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\nmodule.exports = {\\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\\n  1:      'stream end',          /* Z_STREAM_END      1  */\\n  0:      '',                    /* Z_OK              0  */\\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\\n};\\n\\n},{}],79:[function(require,module,exports){\\n'use strict';\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\n/* eslint-disable space-unary-ops */\\n\\nvar utils = require('../utils/common');\\n\\n/* Public constants ==========================================================*/\\n/* ===========================================================================*/\\n\\n\\n//var Z_FILTERED          = 1;\\n//var Z_HUFFMAN_ONLY      = 2;\\n//var Z_RLE               = 3;\\nvar Z_FIXED               = 4;\\n//var Z_DEFAULT_STRATEGY  = 0;\\n\\n/* Possible values of the data_type field (though see inflate()) */\\nvar Z_BINARY              = 0;\\nvar Z_TEXT                = 1;\\n//var Z_ASCII             = 1; // = Z_TEXT\\nvar Z_UNKNOWN             = 2;\\n\\n/*============================================================================*/\\n\\n\\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\\n\\n// From zutil.h\\n\\nvar STORED_BLOCK = 0;\\nvar STATIC_TREES = 1;\\nvar DYN_TREES    = 2;\\n/* The three kinds of block type */\\n\\nvar MIN_MATCH    = 3;\\nvar MAX_MATCH    = 258;\\n/* The minimum and maximum match lengths */\\n\\n// From deflate.h\\n/* ===========================================================================\\n * Internal compression state.\\n */\\n\\nvar LENGTH_CODES  = 29;\\n/* number of length codes, not counting the special END_BLOCK code */\\n\\nvar LITERALS      = 256;\\n/* number of literal bytes 0..255 */\\n\\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\\n/* number of Literal or Length codes, including the END_BLOCK code */\\n\\nvar D_CODES       = 30;\\n/* number of distance codes */\\n\\nvar BL_CODES      = 19;\\n/* number of codes used to transfer the bit lengths */\\n\\nvar HEAP_SIZE     = 2 * L_CODES + 1;\\n/* maximum heap size */\\n\\nvar MAX_BITS      = 15;\\n/* All codes must not exceed MAX_BITS bits */\\n\\nvar Buf_size      = 16;\\n/* size of bit buffer in bi_buf */\\n\\n\\n/* ===========================================================================\\n * Constants\\n */\\n\\nvar MAX_BL_BITS = 7;\\n/* Bit length codes must not exceed MAX_BL_BITS bits */\\n\\nvar END_BLOCK   = 256;\\n/* end of block literal code */\\n\\nvar REP_3_6     = 16;\\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\\n\\nvar REPZ_3_10   = 17;\\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\\n\\nvar REPZ_11_138 = 18;\\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\\n\\n/* eslint-disable comma-spacing,array-bracket-spacing */\\nvar extra_lbits =   /* extra bits for each length code */\\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\\n\\nvar extra_dbits =   /* extra bits for each distance code */\\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\\n\\nvar extra_blbits =  /* extra bits for each bit length code */\\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\\n\\nvar bl_order =\\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\\n/* eslint-enable comma-spacing,array-bracket-spacing */\\n\\n/* The lengths of the bit length codes are sent in order of decreasing\\n * probability, to avoid transmitting the lengths for unused bit length codes.\\n */\\n\\n/* ===========================================================================\\n * Local data. These are initialized only once.\\n */\\n\\n// We pre-fill arrays with 0 to avoid uninitialized gaps\\n\\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\\n\\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\\nvar static_ltree  = new Array((L_CODES + 2) * 2);\\nzero(static_ltree);\\n/* The static literal tree. Since the bit lengths are imposed, there is no\\n * need for the L_CODES extra codes used during heap construction. However\\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\\n * below).\\n */\\n\\nvar static_dtree  = new Array(D_CODES * 2);\\nzero(static_dtree);\\n/* The static distance tree. (Actually a trivial tree since all codes use\\n * 5 bits.)\\n */\\n\\nvar _dist_code    = new Array(DIST_CODE_LEN);\\nzero(_dist_code);\\n/* Distance codes. The first 256 values correspond to the distances\\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\\n * the 15 bit distances.\\n */\\n\\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\\nzero(_length_code);\\n/* length code for each normalized match length (0 == MIN_MATCH) */\\n\\nvar base_length   = new Array(LENGTH_CODES);\\nzero(base_length);\\n/* First normalized length for each code (0 = MIN_MATCH) */\\n\\nvar base_dist     = new Array(D_CODES);\\nzero(base_dist);\\n/* First normalized distance for each code (0 = distance of 1) */\\n\\n\\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\\n\\n  this.static_tree  = static_tree;  /* static tree or NULL */\\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\\n  this.extra_base   = extra_base;   /* base index for extra_bits */\\n  this.elems        = elems;        /* max number of elements in the tree */\\n  this.max_length   = max_length;   /* max bit length for the codes */\\n\\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\\n  this.has_stree    = static_tree && static_tree.length;\\n}\\n\\n\\nvar static_l_desc;\\nvar static_d_desc;\\nvar static_bl_desc;\\n\\n\\nfunction TreeDesc(dyn_tree, stat_desc) {\\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\\n  this.max_code = 0;            /* largest code with non zero frequency */\\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\\n}\\n\\n\\n\\nfunction d_code(dist) {\\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\\n}\\n\\n\\n/* ===========================================================================\\n * Output a short LSB first on the stream.\\n * IN assertion: there is enough room in pendingBuf.\\n */\\nfunction put_short(s, w) {\\n//    put_byte(s, (uch)((w) & 0xff));\\n//    put_byte(s, (uch)((ush)(w) >> 8));\\n  s.pending_buf[s.pending++] = (w) & 0xff;\\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\\n}\\n\\n\\n/* ===========================================================================\\n * Send a value on a given number of bits.\\n * IN assertion: length <= 16 and value fits in length bits.\\n */\\nfunction send_bits(s, value, length) {\\n  if (s.bi_valid > (Buf_size - length)) {\\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\\n    put_short(s, s.bi_buf);\\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\\n    s.bi_valid += length - Buf_size;\\n  } else {\\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\\n    s.bi_valid += length;\\n  }\\n}\\n\\n\\nfunction send_code(s, c, tree) {\\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\\n}\\n\\n\\n/* ===========================================================================\\n * Reverse the first len bits of a code, using straightforward code (a faster\\n * method would use a table)\\n * IN assertion: 1 <= len <= 15\\n */\\nfunction bi_reverse(code, len) {\\n  var res = 0;\\n  do {\\n    res |= code & 1;\\n    code >>>= 1;\\n    res <<= 1;\\n  } while (--len > 0);\\n  return res >>> 1;\\n}\\n\\n\\n/* ===========================================================================\\n * Flush the bit buffer, keeping at most 7 bits in it.\\n */\\nfunction bi_flush(s) {\\n  if (s.bi_valid === 16) {\\n    put_short(s, s.bi_buf);\\n    s.bi_buf = 0;\\n    s.bi_valid = 0;\\n\\n  } else if (s.bi_valid >= 8) {\\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\\n    s.bi_buf >>= 8;\\n    s.bi_valid -= 8;\\n  }\\n}\\n\\n\\n/* ===========================================================================\\n * Compute the optimal bit lengths for a tree and update the total bit length\\n * for the current block.\\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\\n *    above are the tree nodes sorted by increasing frequency.\\n * OUT assertions: the field len is set to the optimal bit length, the\\n *     array bl_count contains the frequencies for each bit length.\\n *     The length opt_len is updated; static_len is also updated if stree is\\n *     not null.\\n */\\nfunction gen_bitlen(s, desc)\\n//    deflate_state *s;\\n//    tree_desc *desc;    /* the tree descriptor */\\n{\\n  var tree            = desc.dyn_tree;\\n  var max_code        = desc.max_code;\\n  var stree           = desc.stat_desc.static_tree;\\n  var has_stree       = desc.stat_desc.has_stree;\\n  var extra           = desc.stat_desc.extra_bits;\\n  var base            = desc.stat_desc.extra_base;\\n  var max_length      = desc.stat_desc.max_length;\\n  var h;              /* heap index */\\n  var n, m;           /* iterate over the tree elements */\\n  var bits;           /* bit length */\\n  var xbits;          /* extra bits */\\n  var f;              /* frequency */\\n  var overflow = 0;   /* number of elements with bit length too large */\\n\\n  for (bits = 0; bits <= MAX_BITS; bits++) {\\n    s.bl_count[bits] = 0;\\n  }\\n\\n  /* In a first pass, compute the optimal bit lengths (which may\\n   * overflow in the case of the bit length tree).\\n   */\\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\\n\\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\\n    n = s.heap[h];\\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\\n    if (bits > max_length) {\\n      bits = max_length;\\n      overflow++;\\n    }\\n    tree[n * 2 + 1]/*.Len*/ = bits;\\n    /* We overwrite tree[n].Dad which is no longer needed */\\n\\n    if (n > max_code) { continue; } /* not a leaf node */\\n\\n    s.bl_count[bits]++;\\n    xbits = 0;\\n    if (n >= base) {\\n      xbits = extra[n - base];\\n    }\\n    f = tree[n * 2]/*.Freq*/;\\n    s.opt_len += f * (bits + xbits);\\n    if (has_stree) {\\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\\n    }\\n  }\\n  if (overflow === 0) { return; }\\n\\n  // Trace((stderr,\\\"\\\\nbit length overflow\\\\n\\\"));\\n  /* This happens for example on obj2 and pic of the Calgary corpus */\\n\\n  /* Find the first bit length which could increase: */\\n  do {\\n    bits = max_length - 1;\\n    while (s.bl_count[bits] === 0) { bits--; }\\n    s.bl_count[bits]--;      /* move one leaf down the tree */\\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\\n    s.bl_count[max_length]--;\\n    /* The brother of the overflow item also moves one step up,\\n     * but this does not affect bl_count[max_length]\\n     */\\n    overflow -= 2;\\n  } while (overflow > 0);\\n\\n  /* Now recompute all bit lengths, scanning in increasing frequency.\\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\\n   * lengths instead of fixing only the wrong ones. This idea is taken\\n   * from 'ar' written by Haruhiko Okumura.)\\n   */\\n  for (bits = max_length; bits !== 0; bits--) {\\n    n = s.bl_count[bits];\\n    while (n !== 0) {\\n      m = s.heap[--h];\\n      if (m > max_code) { continue; }\\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\\n        // Trace((stderr,\\\"code %d bits %d->%d\\\\n\\\", m, tree[m].Len, bits));\\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\\n        tree[m * 2 + 1]/*.Len*/ = bits;\\n      }\\n      n--;\\n    }\\n  }\\n}\\n\\n\\n/* ===========================================================================\\n * Generate the codes for a given tree and bit counts (which need not be\\n * optimal).\\n * IN assertion: the array bl_count contains the bit length statistics for\\n * the given tree and the field len is set for all tree elements.\\n * OUT assertion: the field code is set for all tree elements of non\\n *     zero code length.\\n */\\nfunction gen_codes(tree, max_code, bl_count)\\n//    ct_data *tree;             /* the tree to decorate */\\n//    int max_code;              /* largest code with non zero frequency */\\n//    ushf *bl_count;            /* number of codes at each bit length */\\n{\\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\\n  var code = 0;              /* running code value */\\n  var bits;                  /* bit index */\\n  var n;                     /* code index */\\n\\n  /* The distribution counts are first used to generate the code values\\n   * without bit reversal.\\n   */\\n  for (bits = 1; bits <= MAX_BITS; bits++) {\\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\\n  }\\n  /* Check that the bit counts in bl_count are consistent. The last code\\n   * must be all ones.\\n   */\\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\\n  //        \\\"inconsistent bit counts\\\");\\n  //Tracev((stderr,\\\"\\\\ngen_codes: max_code %d \\\", max_code));\\n\\n  for (n = 0;  n <= max_code; n++) {\\n    var len = tree[n * 2 + 1]/*.Len*/;\\n    if (len === 0) { continue; }\\n    /* Now reverse the bits */\\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\\n\\n    //Tracecv(tree != static_ltree, (stderr,\\\"\\\\nn %3d %c l %2d c %4x (%x) \\\",\\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\\n  }\\n}\\n\\n\\n/* ===========================================================================\\n * Initialize the various 'constant' tables.\\n */\\nfunction tr_static_init() {\\n  var n;        /* iterates over tree elements */\\n  var bits;     /* bit counter */\\n  var length;   /* length value */\\n  var code;     /* code value */\\n  var dist;     /* distance index */\\n  var bl_count = new Array(MAX_BITS + 1);\\n  /* number of codes at each bit length for an optimal tree */\\n\\n  // do check in _tr_init()\\n  //if (static_init_done) return;\\n\\n  /* For some embedded targets, global variables are not initialized: */\\n/*#ifdef NO_INIT_GLOBAL_POINTERS\\n  static_l_desc.static_tree = static_ltree;\\n  static_l_desc.extra_bits = extra_lbits;\\n  static_d_desc.static_tree = static_dtree;\\n  static_d_desc.extra_bits = extra_dbits;\\n  static_bl_desc.extra_bits = extra_blbits;\\n#endif*/\\n\\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\\n  length = 0;\\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\\n    base_length[code] = length;\\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\\n      _length_code[length++] = code;\\n    }\\n  }\\n  //Assert (length == 256, \\\"tr_static_init: length != 256\\\");\\n  /* Note that the length 255 (match length 258) can be represented\\n   * in two different ways: code 284 + 5 bits or code 285, so we\\n   * overwrite length_code[255] to use the best encoding:\\n   */\\n  _length_code[length - 1] = code;\\n\\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\\n  dist = 0;\\n  for (code = 0; code < 16; code++) {\\n    base_dist[code] = dist;\\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\\n      _dist_code[dist++] = code;\\n    }\\n  }\\n  //Assert (dist == 256, \\\"tr_static_init: dist != 256\\\");\\n  dist >>= 7; /* from now on, all distances are divided by 128 */\\n  for (; code < D_CODES; code++) {\\n    base_dist[code] = dist << 7;\\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\\n      _dist_code[256 + dist++] = code;\\n    }\\n  }\\n  //Assert (dist == 256, \\\"tr_static_init: 256+dist != 512\\\");\\n\\n  /* Construct the codes of the static literal tree */\\n  for (bits = 0; bits <= MAX_BITS; bits++) {\\n    bl_count[bits] = 0;\\n  }\\n\\n  n = 0;\\n  while (n <= 143) {\\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\\n    n++;\\n    bl_count[8]++;\\n  }\\n  while (n <= 255) {\\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\\n    n++;\\n    bl_count[9]++;\\n  }\\n  while (n <= 279) {\\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\\n    n++;\\n    bl_count[7]++;\\n  }\\n  while (n <= 287) {\\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\\n    n++;\\n    bl_count[8]++;\\n  }\\n  /* Codes 286 and 287 do not exist, but we must include them in the\\n   * tree construction to get a canonical Huffman tree (longest code\\n   * all ones)\\n   */\\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\\n\\n  /* The static distance tree is trivial: */\\n  for (n = 0; n < D_CODES; n++) {\\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\\n  }\\n\\n  // Now data ready and we can init static trees\\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\\n\\n  //static_init_done = true;\\n}\\n\\n\\n/* ===========================================================================\\n * Initialize a new block.\\n */\\nfunction init_block(s) {\\n  var n; /* iterates over tree elements */\\n\\n  /* Initialize the trees. */\\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\\n\\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\\n  s.opt_len = s.static_len = 0;\\n  s.last_lit = s.matches = 0;\\n}\\n\\n\\n/* ===========================================================================\\n * Flush the bit buffer and align the output on a byte boundary\\n */\\nfunction bi_windup(s)\\n{\\n  if (s.bi_valid > 8) {\\n    put_short(s, s.bi_buf);\\n  } else if (s.bi_valid > 0) {\\n    //put_byte(s, (Byte)s->bi_buf);\\n    s.pending_buf[s.pending++] = s.bi_buf;\\n  }\\n  s.bi_buf = 0;\\n  s.bi_valid = 0;\\n}\\n\\n/* ===========================================================================\\n * Copy a stored block, storing first the length and its\\n * one's complement if requested.\\n */\\nfunction copy_block(s, buf, len, header)\\n//DeflateState *s;\\n//charf    *buf;    /* the input data */\\n//unsigned len;     /* its length */\\n//int      header;  /* true if block header must be written */\\n{\\n  bi_windup(s);        /* align on byte boundary */\\n\\n  if (header) {\\n    put_short(s, len);\\n    put_short(s, ~len);\\n  }\\n//  while (len--) {\\n//    put_byte(s, *buf++);\\n//  }\\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\\n  s.pending += len;\\n}\\n\\n/* ===========================================================================\\n * Compares to subtrees, using the tree depth as tie breaker when\\n * the subtrees have equal frequency. This minimizes the worst case length.\\n */\\nfunction smaller(tree, n, m, depth) {\\n  var _n2 = n * 2;\\n  var _m2 = m * 2;\\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\\n}\\n\\n/* ===========================================================================\\n * Restore the heap property by moving down the tree starting at node k,\\n * exchanging a node with the smallest of its two sons if necessary, stopping\\n * when the heap property is re-established (each father smaller than its\\n * two sons).\\n */\\nfunction pqdownheap(s, tree, k)\\n//    deflate_state *s;\\n//    ct_data *tree;  /* the tree to restore */\\n//    int k;               /* node to move down */\\n{\\n  var v = s.heap[k];\\n  var j = k << 1;  /* left son of k */\\n  while (j <= s.heap_len) {\\n    /* Set j to the smallest of the two sons: */\\n    if (j < s.heap_len &&\\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\\n      j++;\\n    }\\n    /* Exit if v is smaller than both sons */\\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\\n\\n    /* Exchange v with the smallest son */\\n    s.heap[k] = s.heap[j];\\n    k = j;\\n\\n    /* And continue down the tree, setting j to the left son of k */\\n    j <<= 1;\\n  }\\n  s.heap[k] = v;\\n}\\n\\n\\n// inlined manually\\n// var SMALLEST = 1;\\n\\n/* ===========================================================================\\n * Send the block data compressed using the given Huffman trees\\n */\\nfunction compress_block(s, ltree, dtree)\\n//    deflate_state *s;\\n//    const ct_data *ltree; /* literal tree */\\n//    const ct_data *dtree; /* distance tree */\\n{\\n  var dist;           /* distance of matched string */\\n  var lc;             /* match length or unmatched char (if dist == 0) */\\n  var lx = 0;         /* running index in l_buf */\\n  var code;           /* the code to send */\\n  var extra;          /* number of extra bits to send */\\n\\n  if (s.last_lit !== 0) {\\n    do {\\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\\n      lc = s.pending_buf[s.l_buf + lx];\\n      lx++;\\n\\n      if (dist === 0) {\\n        send_code(s, lc, ltree); /* send a literal byte */\\n        //Tracecv(isgraph(lc), (stderr,\\\" '%c' \\\", lc));\\n      } else {\\n        /* Here, lc is the match length - MIN_MATCH */\\n        code = _length_code[lc];\\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\\n        extra = extra_lbits[code];\\n        if (extra !== 0) {\\n          lc -= base_length[code];\\n          send_bits(s, lc, extra);       /* send the extra length bits */\\n        }\\n        dist--; /* dist is now the match distance - 1 */\\n        code = d_code(dist);\\n        //Assert (code < D_CODES, \\\"bad d_code\\\");\\n\\n        send_code(s, code, dtree);       /* send the distance code */\\n        extra = extra_dbits[code];\\n        if (extra !== 0) {\\n          dist -= base_dist[code];\\n          send_bits(s, dist, extra);   /* send the extra distance bits */\\n        }\\n      } /* literal or match pair ? */\\n\\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\\n      //       \\\"pendingBuf overflow\\\");\\n\\n    } while (lx < s.last_lit);\\n  }\\n\\n  send_code(s, END_BLOCK, ltree);\\n}\\n\\n\\n/* ===========================================================================\\n * Construct one Huffman tree and assigns the code bit strings and lengths.\\n * Update the total bit length for the current block.\\n * IN assertion: the field freq is set for all tree elements.\\n * OUT assertions: the fields len and code are set to the optimal bit length\\n *     and corresponding code. The length opt_len is updated; static_len is\\n *     also updated if stree is not null. The field max_code is set.\\n */\\nfunction build_tree(s, desc)\\n//    deflate_state *s;\\n//    tree_desc *desc; /* the tree descriptor */\\n{\\n  var tree     = desc.dyn_tree;\\n  var stree    = desc.stat_desc.static_tree;\\n  var has_stree = desc.stat_desc.has_stree;\\n  var elems    = desc.stat_desc.elems;\\n  var n, m;          /* iterate over heap elements */\\n  var max_code = -1; /* largest code with non zero frequency */\\n  var node;          /* new node being created */\\n\\n  /* Construct the initial heap, with least frequent element in\\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\\n   * heap[0] is not used.\\n   */\\n  s.heap_len = 0;\\n  s.heap_max = HEAP_SIZE;\\n\\n  for (n = 0; n < elems; n++) {\\n    if (tree[n * 2]/*.Freq*/ !== 0) {\\n      s.heap[++s.heap_len] = max_code = n;\\n      s.depth[n] = 0;\\n\\n    } else {\\n      tree[n * 2 + 1]/*.Len*/ = 0;\\n    }\\n  }\\n\\n  /* The pkzip format requires that at least one distance code exists,\\n   * and that at least one bit should be sent even if there is only one\\n   * possible code. So to avoid special checks later on we force at least\\n   * two codes of non zero frequency.\\n   */\\n  while (s.heap_len < 2) {\\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\\n    tree[node * 2]/*.Freq*/ = 1;\\n    s.depth[node] = 0;\\n    s.opt_len--;\\n\\n    if (has_stree) {\\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\\n    }\\n    /* node is 0 or 1 so it does not have extra bits */\\n  }\\n  desc.max_code = max_code;\\n\\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\\n   * establish sub-heaps of increasing lengths:\\n   */\\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\\n\\n  /* Construct the Huffman tree by repeatedly combining the least two\\n   * frequent nodes.\\n   */\\n  node = elems;              /* next internal node of the tree */\\n  do {\\n    //pqremove(s, tree, n);  /* n = node of least frequency */\\n    /*** pqremove ***/\\n    n = s.heap[1/*SMALLEST*/];\\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\\n    pqdownheap(s, tree, 1/*SMALLEST*/);\\n    /***/\\n\\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\\n\\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\\n    s.heap[--s.heap_max] = m;\\n\\n    /* Create a new node father of n and m */\\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\\n\\n    /* and insert the new node in the heap */\\n    s.heap[1/*SMALLEST*/] = node++;\\n    pqdownheap(s, tree, 1/*SMALLEST*/);\\n\\n  } while (s.heap_len >= 2);\\n\\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\\n\\n  /* At this point, the fields freq and dad are set. We can now\\n   * generate the bit lengths.\\n   */\\n  gen_bitlen(s, desc);\\n\\n  /* The field len is now set, we can generate the bit codes */\\n  gen_codes(tree, max_code, s.bl_count);\\n}\\n\\n\\n/* ===========================================================================\\n * Scan a literal or distance tree to determine the frequencies of the codes\\n * in the bit length tree.\\n */\\nfunction scan_tree(s, tree, max_code)\\n//    deflate_state *s;\\n//    ct_data *tree;   /* the tree to be scanned */\\n//    int max_code;    /* and its largest code of non zero frequency */\\n{\\n  var n;                     /* iterates over all tree elements */\\n  var prevlen = -1;          /* last emitted length */\\n  var curlen;                /* length of current code */\\n\\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\\n\\n  var count = 0;             /* repeat count of the current code */\\n  var max_count = 7;         /* max repeat count */\\n  var min_count = 4;         /* min repeat count */\\n\\n  if (nextlen === 0) {\\n    max_count = 138;\\n    min_count = 3;\\n  }\\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\\n\\n  for (n = 0; n <= max_code; n++) {\\n    curlen = nextlen;\\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\\n\\n    if (++count < max_count && curlen === nextlen) {\\n      continue;\\n\\n    } else if (count < min_count) {\\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\\n\\n    } else if (curlen !== 0) {\\n\\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\\n\\n    } else if (count <= 10) {\\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\\n\\n    } else {\\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\\n    }\\n\\n    count = 0;\\n    prevlen = curlen;\\n\\n    if (nextlen === 0) {\\n      max_count = 138;\\n      min_count = 3;\\n\\n    } else if (curlen === nextlen) {\\n      max_count = 6;\\n      min_count = 3;\\n\\n    } else {\\n      max_count = 7;\\n      min_count = 4;\\n    }\\n  }\\n}\\n\\n\\n/* ===========================================================================\\n * Send a literal or distance tree in compressed form, using the codes in\\n * bl_tree.\\n */\\nfunction send_tree(s, tree, max_code)\\n//    deflate_state *s;\\n//    ct_data *tree; /* the tree to be scanned */\\n//    int max_code;       /* and its largest code of non zero frequency */\\n{\\n  var n;                     /* iterates over all tree elements */\\n  var prevlen = -1;          /* last emitted length */\\n  var curlen;                /* length of current code */\\n\\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\\n\\n  var count = 0;             /* repeat count of the current code */\\n  var max_count = 7;         /* max repeat count */\\n  var min_count = 4;         /* min repeat count */\\n\\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\\n  if (nextlen === 0) {\\n    max_count = 138;\\n    min_count = 3;\\n  }\\n\\n  for (n = 0; n <= max_code; n++) {\\n    curlen = nextlen;\\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\\n\\n    if (++count < max_count && curlen === nextlen) {\\n      continue;\\n\\n    } else if (count < min_count) {\\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\\n\\n    } else if (curlen !== 0) {\\n      if (curlen !== prevlen) {\\n        send_code(s, curlen, s.bl_tree);\\n        count--;\\n      }\\n      //Assert(count >= 3 && count <= 6, \\\" 3_6?\\\");\\n      send_code(s, REP_3_6, s.bl_tree);\\n      send_bits(s, count - 3, 2);\\n\\n    } else if (count <= 10) {\\n      send_code(s, REPZ_3_10, s.bl_tree);\\n      send_bits(s, count - 3, 3);\\n\\n    } else {\\n      send_code(s, REPZ_11_138, s.bl_tree);\\n      send_bits(s, count - 11, 7);\\n    }\\n\\n    count = 0;\\n    prevlen = curlen;\\n    if (nextlen === 0) {\\n      max_count = 138;\\n      min_count = 3;\\n\\n    } else if (curlen === nextlen) {\\n      max_count = 6;\\n      min_count = 3;\\n\\n    } else {\\n      max_count = 7;\\n      min_count = 4;\\n    }\\n  }\\n}\\n\\n\\n/* ===========================================================================\\n * Construct the Huffman tree for the bit lengths and return the index in\\n * bl_order of the last bit length code to send.\\n */\\nfunction build_bl_tree(s) {\\n  var max_blindex;  /* index of last bit length code of non zero freq */\\n\\n  /* Determine the bit length frequencies for literal and distance trees */\\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\\n\\n  /* Build the bit length tree: */\\n  build_tree(s, s.bl_desc);\\n  /* opt_len now includes the length of the tree representations, except\\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\\n   */\\n\\n  /* Determine the number of bit length codes to send. The pkzip format\\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\\n   * 3 but the actual value used is 4.)\\n   */\\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\\n      break;\\n    }\\n  }\\n  /* Update opt_len to include the bit length tree and counts */\\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\\n  //Tracev((stderr, \\\"\\\\ndyn trees: dyn %ld, stat %ld\\\",\\n  //        s->opt_len, s->static_len));\\n\\n  return max_blindex;\\n}\\n\\n\\n/* ===========================================================================\\n * Send the header for a block using dynamic Huffman trees: the counts, the\\n * lengths of the bit length codes, the literal tree and the distance tree.\\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\\n */\\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\\n//    deflate_state *s;\\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\\n{\\n  var rank;                    /* index in bl_order */\\n\\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \\\"not enough codes\\\");\\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\\n  //        \\\"too many codes\\\");\\n  //Tracev((stderr, \\\"\\\\nbl counts: \\\"));\\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\\n  send_bits(s, dcodes - 1,   5);\\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\\n  for (rank = 0; rank < blcodes; rank++) {\\n    //Tracev((stderr, \\\"\\\\nbl code %2d \\\", bl_order[rank]));\\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\\n  }\\n  //Tracev((stderr, \\\"\\\\nbl tree: sent %ld\\\", s->bits_sent));\\n\\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\\n  //Tracev((stderr, \\\"\\\\nlit tree: sent %ld\\\", s->bits_sent));\\n\\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\\n  //Tracev((stderr, \\\"\\\\ndist tree: sent %ld\\\", s->bits_sent));\\n}\\n\\n\\n/* ===========================================================================\\n * Check if the data type is TEXT or BINARY, using the following algorithm:\\n * - TEXT if the two conditions below are satisfied:\\n *    a) There are no non-portable control characters belonging to the\\n *       \\\"black list\\\" (0..6, 14..25, 28..31).\\n *    b) There is at least one printable character belonging to the\\n *       \\\"white list\\\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\\n * - BINARY otherwise.\\n * - The following partially-portable control characters form a\\n *   \\\"gray list\\\" that is ignored in this detection algorithm:\\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\\n * IN assertion: the fields Freq of dyn_ltree are set.\\n */\\nfunction detect_data_type(s) {\\n  /* black_mask is the bit mask of black-listed bytes\\n   * set bits 0..6, 14..25, and 28..31\\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\\n   */\\n  var black_mask = 0xf3ffc07f;\\n  var n;\\n\\n  /* Check for non-textual (\\\"black-listed\\\") bytes. */\\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\\n      return Z_BINARY;\\n    }\\n  }\\n\\n  /* Check for textual (\\\"white-listed\\\") bytes. */\\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\\n    return Z_TEXT;\\n  }\\n  for (n = 32; n < LITERALS; n++) {\\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\\n      return Z_TEXT;\\n    }\\n  }\\n\\n  /* There are no \\\"black-listed\\\" or \\\"white-listed\\\" bytes:\\n   * this stream either is empty or has tolerated (\\\"gray-listed\\\") bytes only.\\n   */\\n  return Z_BINARY;\\n}\\n\\n\\nvar static_init_done = false;\\n\\n/* ===========================================================================\\n * Initialize the tree data structures for a new zlib stream.\\n */\\nfunction _tr_init(s)\\n{\\n\\n  if (!static_init_done) {\\n    tr_static_init();\\n    static_init_done = true;\\n  }\\n\\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\\n\\n  s.bi_buf = 0;\\n  s.bi_valid = 0;\\n\\n  /* Initialize the first block of the first file: */\\n  init_block(s);\\n}\\n\\n\\n/* ===========================================================================\\n * Send a stored block\\n */\\nfunction _tr_stored_block(s, buf, stored_len, last)\\n//DeflateState *s;\\n//charf *buf;       /* input block */\\n//ulg stored_len;   /* length of input block */\\n//int last;         /* one if this is the last block for a file */\\n{\\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\\n  copy_block(s, buf, stored_len, true); /* with header */\\n}\\n\\n\\n/* ===========================================================================\\n * Send one empty static block to give enough lookahead for inflate.\\n * This takes 10 bits, of which 7 may remain in the bit buffer.\\n */\\nfunction _tr_align(s) {\\n  send_bits(s, STATIC_TREES << 1, 3);\\n  send_code(s, END_BLOCK, static_ltree);\\n  bi_flush(s);\\n}\\n\\n\\n/* ===========================================================================\\n * Determine the best encoding for the current block: dynamic trees, static\\n * trees or store, and output the encoded block to the zip file.\\n */\\nfunction _tr_flush_block(s, buf, stored_len, last)\\n//DeflateState *s;\\n//charf *buf;       /* input block, or NULL if too old */\\n//ulg stored_len;   /* length of input block */\\n//int last;         /* one if this is the last block for a file */\\n{\\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\\n\\n  /* Build the Huffman trees unless a stored block is forced */\\n  if (s.level > 0) {\\n\\n    /* Check if the file is binary or text */\\n    if (s.strm.data_type === Z_UNKNOWN) {\\n      s.strm.data_type = detect_data_type(s);\\n    }\\n\\n    /* Construct the literal and distance trees */\\n    build_tree(s, s.l_desc);\\n    // Tracev((stderr, \\\"\\\\nlit data: dyn %ld, stat %ld\\\", s->opt_len,\\n    //        s->static_len));\\n\\n    build_tree(s, s.d_desc);\\n    // Tracev((stderr, \\\"\\\\ndist data: dyn %ld, stat %ld\\\", s->opt_len,\\n    //        s->static_len));\\n    /* At this point, opt_len and static_len are the total bit lengths of\\n     * the compressed block data, excluding the tree representations.\\n     */\\n\\n    /* Build the bit length tree for the above two trees, and get the index\\n     * in bl_order of the last bit length code to send.\\n     */\\n    max_blindex = build_bl_tree(s);\\n\\n    /* Determine the best encoding. Compute the block lengths in bytes. */\\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\\n\\n    // Tracev((stderr, \\\"\\\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \\\",\\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\\n    //        s->last_lit));\\n\\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\\n\\n  } else {\\n    // Assert(buf != (char*)0, \\\"lost buf\\\");\\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\\n  }\\n\\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\\n    /* 4: two words for the lengths */\\n\\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\\n     * Otherwise we can't have processed more than WSIZE input bytes since\\n     * the last block flush, because compression would have been\\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\\n     * transform a block into a stored block.\\n     */\\n    _tr_stored_block(s, buf, stored_len, last);\\n\\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\\n\\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\\n    compress_block(s, static_ltree, static_dtree);\\n\\n  } else {\\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\\n  }\\n  // Assert (s->compressed_len == s->bits_sent, \\\"bad compressed size\\\");\\n  /* The above check is made mod 2^32, for files larger than 512 MB\\n   * and uLong implemented on 32 bits.\\n   */\\n  init_block(s);\\n\\n  if (last) {\\n    bi_windup(s);\\n  }\\n  // Tracev((stderr,\\\"\\\\ncomprlen %lu(%lu) \\\", s->compressed_len>>3,\\n  //       s->compressed_len-7*last));\\n}\\n\\n/* ===========================================================================\\n * Save the match info and tally the frequency counts. Return true if\\n * the current block must be flushed.\\n */\\nfunction _tr_tally(s, dist, lc)\\n//    deflate_state *s;\\n//    unsigned dist;  /* distance of matched string */\\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\\n{\\n  //var out_length, in_length, dcode;\\n\\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\\n\\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\\n  s.last_lit++;\\n\\n  if (dist === 0) {\\n    /* lc is the unmatched char */\\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\\n  } else {\\n    s.matches++;\\n    /* Here, lc is the match length - MIN_MATCH */\\n    dist--;             /* dist = match distance - 1 */\\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\\n    //       (ush)d_code(dist) < (ush)D_CODES,  \\\"_tr_tally: bad match\\\");\\n\\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\\n  }\\n\\n// (!) This block is disabled in zlib defaults,\\n// don't enable it for binary compatibility\\n\\n//#ifdef TRUNCATE_BLOCK\\n//  /* Try to guess if it is profitable to stop the current block here */\\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\\n//    /* Compute an upper bound for the compressed length */\\n//    out_length = s.last_lit*8;\\n//    in_length = s.strstart - s.block_start;\\n//\\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\\n//    }\\n//    out_length >>>= 3;\\n//    //Tracev((stderr,\\\"\\\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \\\",\\n//    //       s->last_lit, in_length, out_length,\\n//    //       100L - out_length*100L/in_length));\\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\\n//      return true;\\n//    }\\n//  }\\n//#endif\\n\\n  return (s.last_lit === s.lit_bufsize - 1);\\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\\n   * on 16 bit machines and because stored blocks are restricted to\\n   * 64K-1 bytes.\\n   */\\n}\\n\\nexports._tr_init  = _tr_init;\\nexports._tr_stored_block = _tr_stored_block;\\nexports._tr_flush_block  = _tr_flush_block;\\nexports._tr_tally = _tr_tally;\\nexports._tr_align = _tr_align;\\n\\n},{\\\"../utils/common\\\":68}],80:[function(require,module,exports){\\n'use strict';\\n\\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\\n//\\n// This software is provided 'as-is', without any express or implied\\n// warranty. In no event will the authors be held liable for any damages\\n// arising from the use of this software.\\n//\\n// Permission is granted to anyone to use this software for any purpose,\\n// including commercial applications, and to alter it and redistribute it\\n// freely, subject to the following restrictions:\\n//\\n// 1. The origin of this software must not be misrepresented; you must not\\n//   claim that you wrote the original software. If you use this software\\n//   in a product, an acknowledgment in the product documentation would be\\n//   appreciated but is not required.\\n// 2. Altered source versions must be plainly marked as such, and must not be\\n//   misrepresented as being the original software.\\n// 3. This notice may not be removed or altered from any source distribution.\\n\\nfunction ZStream() {\\n  /* next input byte */\\n  this.input = null; // JS specific, because we have no pointers\\n  this.next_in = 0;\\n  /* number of bytes available at input */\\n  this.avail_in = 0;\\n  /* total number of input bytes read so far */\\n  this.total_in = 0;\\n  /* next output byte should be put there */\\n  this.output = null; // JS specific, because we have no pointers\\n  this.next_out = 0;\\n  /* remaining free space at output */\\n  this.avail_out = 0;\\n  /* total number of bytes output so far */\\n  this.total_out = 0;\\n  /* last error message, NULL if no error */\\n  this.msg = ''/*Z_NULL*/;\\n  /* not visible by applications */\\n  this.state = null;\\n  /* best guess about the data type: binary or text */\\n  this.data_type = 2/*Z_UNKNOWN*/;\\n  /* adler32 value of the uncompressed data */\\n  this.adler = 0;\\n}\\n\\nmodule.exports = ZStream;\\n\\n},{}],81:[function(require,module,exports){\\n/**\\n * Copyright (c) 2014-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nvar runtime = (function (exports) {\\n  \\\"use strict\\\";\\n\\n  var Op = Object.prototype;\\n  var hasOwn = Op.hasOwnProperty;\\n  var undefined; // More compressible than void 0.\\n  var $Symbol = typeof Symbol === \\\"function\\\" ? Symbol : {};\\n  var iteratorSymbol = $Symbol.iterator || \\\"@@iterator\\\";\\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \\\"@@asyncIterator\\\";\\n  var toStringTagSymbol = $Symbol.toStringTag || \\\"@@toStringTag\\\";\\n\\n  function wrap(innerFn, outerFn, self, tryLocsList) {\\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\\n    var generator = Object.create(protoGenerator.prototype);\\n    var context = new Context(tryLocsList || []);\\n\\n    // The ._invoke method unifies the implementations of the .next,\\n    // .throw, and .return methods.\\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\\n\\n    return generator;\\n  }\\n  exports.wrap = wrap;\\n\\n  // Try/catch helper to minimize deoptimizations. Returns a completion\\n  // record like context.tryEntries[i].completion. This interface could\\n  // have been (and was previously) designed to take a closure to be\\n  // invoked without arguments, but in all the cases we care about we\\n  // already have an existing method we want to call, so there's no need\\n  // to create a new function object. We can even get away with assuming\\n  // the method takes exactly one argument, since that happens to be true\\n  // in every case, so we don't have to touch the arguments object. The\\n  // only additional allocation required is the completion record, which\\n  // has a stable shape and so hopefully should be cheap to allocate.\\n  function tryCatch(fn, obj, arg) {\\n    try {\\n      return { type: \\\"normal\\\", arg: fn.call(obj, arg) };\\n    } catch (err) {\\n      return { type: \\\"throw\\\", arg: err };\\n    }\\n  }\\n\\n  var GenStateSuspendedStart = \\\"suspendedStart\\\";\\n  var GenStateSuspendedYield = \\\"suspendedYield\\\";\\n  var GenStateExecuting = \\\"executing\\\";\\n  var GenStateCompleted = \\\"completed\\\";\\n\\n  // Returning this object from the innerFn has the same effect as\\n  // breaking out of the dispatch switch statement.\\n  var ContinueSentinel = {};\\n\\n  // Dummy constructor functions that we use as the .constructor and\\n  // .constructor.prototype properties for functions that return Generator\\n  // objects. For full spec compliance, you may wish to configure your\\n  // minifier not to mangle the names of these two functions.\\n  function Generator() {}\\n  function GeneratorFunction() {}\\n  function GeneratorFunctionPrototype() {}\\n\\n  // This is a polyfill for %IteratorPrototype% for environments that\\n  // don't natively support it.\\n  var IteratorPrototype = {};\\n  IteratorPrototype[iteratorSymbol] = function () {\\n    return this;\\n  };\\n\\n  var getProto = Object.getPrototypeOf;\\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\\n  if (NativeIteratorPrototype &&\\n      NativeIteratorPrototype !== Op &&\\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\\n    // This environment has a native %IteratorPrototype%; use it instead\\n    // of the polyfill.\\n    IteratorPrototype = NativeIteratorPrototype;\\n  }\\n\\n  var Gp = GeneratorFunctionPrototype.prototype =\\n    Generator.prototype = Object.create(IteratorPrototype);\\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\\n  GeneratorFunctionPrototype[toStringTagSymbol] =\\n    GeneratorFunction.displayName = \\\"GeneratorFunction\\\";\\n\\n  // Helper for defining the .next, .throw, and .return methods of the\\n  // Iterator interface in terms of a single ._invoke method.\\n  function defineIteratorMethods(prototype) {\\n    [\\\"next\\\", \\\"throw\\\", \\\"return\\\"].forEach(function(method) {\\n      prototype[method] = function(arg) {\\n        return this._invoke(method, arg);\\n      };\\n    });\\n  }\\n\\n  exports.isGeneratorFunction = function(genFun) {\\n    var ctor = typeof genFun === \\\"function\\\" && genFun.constructor;\\n    return ctor\\n      ? ctor === GeneratorFunction ||\\n        // For the native GeneratorFunction constructor, the best we can\\n        // do is to check its .name property.\\n        (ctor.displayName || ctor.name) === \\\"GeneratorFunction\\\"\\n      : false;\\n  };\\n\\n  exports.mark = function(genFun) {\\n    if (Object.setPrototypeOf) {\\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\\n    } else {\\n      genFun.__proto__ = GeneratorFunctionPrototype;\\n      if (!(toStringTagSymbol in genFun)) {\\n        genFun[toStringTagSymbol] = \\\"GeneratorFunction\\\";\\n      }\\n    }\\n    genFun.prototype = Object.create(Gp);\\n    return genFun;\\n  };\\n\\n  // Within the body of any async function, `await x` is transformed to\\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\\n  // `hasOwn.call(value, \\\"__await\\\")` to determine if the yielded value is\\n  // meant to be awaited.\\n  exports.awrap = function(arg) {\\n    return { __await: arg };\\n  };\\n\\n  function AsyncIterator(generator, PromiseImpl) {\\n    function invoke(method, arg, resolve, reject) {\\n      var record = tryCatch(generator[method], generator, arg);\\n      if (record.type === \\\"throw\\\") {\\n        reject(record.arg);\\n      } else {\\n        var result = record.arg;\\n        var value = result.value;\\n        if (value &&\\n            typeof value === \\\"object\\\" &&\\n            hasOwn.call(value, \\\"__await\\\")) {\\n          return PromiseImpl.resolve(value.__await).then(function(value) {\\n            invoke(\\\"next\\\", value, resolve, reject);\\n          }, function(err) {\\n            invoke(\\\"throw\\\", err, resolve, reject);\\n          });\\n        }\\n\\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\\n          // When a yielded Promise is resolved, its final value becomes\\n          // the .value of the Promise<{value,done}> result for the\\n          // current iteration.\\n          result.value = unwrapped;\\n          resolve(result);\\n        }, function(error) {\\n          // If a rejected Promise was yielded, throw the rejection back\\n          // into the async generator function so it can be handled there.\\n          return invoke(\\\"throw\\\", error, resolve, reject);\\n        });\\n      }\\n    }\\n\\n    var previousPromise;\\n\\n    function enqueue(method, arg) {\\n      function callInvokeWithMethodAndArg() {\\n        return new PromiseImpl(function(resolve, reject) {\\n          invoke(method, arg, resolve, reject);\\n        });\\n      }\\n\\n      return previousPromise =\\n        // If enqueue has been called before, then we want to wait until\\n        // all previous Promises have been resolved before calling invoke,\\n        // so that results are always delivered in the correct order. If\\n        // enqueue has not been called before, then it is important to\\n        // call invoke immediately, without waiting on a callback to fire,\\n        // so that the async generator function has the opportunity to do\\n        // any necessary setup in a predictable way. This predictability\\n        // is why the Promise constructor synchronously invokes its\\n        // executor callback, and why async functions synchronously\\n        // execute code before the first await. Since we implement simple\\n        // async functions in terms of async generators, it is especially\\n        // important to get this right, even though it requires care.\\n        previousPromise ? previousPromise.then(\\n          callInvokeWithMethodAndArg,\\n          // Avoid propagating failures to Promises returned by later\\n          // invocations of the iterator.\\n          callInvokeWithMethodAndArg\\n        ) : callInvokeWithMethodAndArg();\\n    }\\n\\n    // Define the unified helper method that is used to implement .next,\\n    // .throw, and .return (see defineIteratorMethods).\\n    this._invoke = enqueue;\\n  }\\n\\n  defineIteratorMethods(AsyncIterator.prototype);\\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\\n    return this;\\n  };\\n  exports.AsyncIterator = AsyncIterator;\\n\\n  // Note that simple async functions are implemented on top of\\n  // AsyncIterator objects; they just return a Promise for the value of\\n  // the final result produced by the iterator.\\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\\n\\n    var iter = new AsyncIterator(\\n      wrap(innerFn, outerFn, self, tryLocsList),\\n      PromiseImpl\\n    );\\n\\n    return exports.isGeneratorFunction(outerFn)\\n      ? iter // If outerFn is a generator, return the full iterator.\\n      : iter.next().then(function(result) {\\n          return result.done ? result.value : iter.next();\\n        });\\n  };\\n\\n  function makeInvokeMethod(innerFn, self, context) {\\n    var state = GenStateSuspendedStart;\\n\\n    return function invoke(method, arg) {\\n      if (state === GenStateExecuting) {\\n        throw new Error(\\\"Generator is already running\\\");\\n      }\\n\\n      if (state === GenStateCompleted) {\\n        if (method === \\\"throw\\\") {\\n          throw arg;\\n        }\\n\\n        // Be forgiving, per 25.3.3.3.3 of the spec:\\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\\n        return doneResult();\\n      }\\n\\n      context.method = method;\\n      context.arg = arg;\\n\\n      while (true) {\\n        var delegate = context.delegate;\\n        if (delegate) {\\n          var delegateResult = maybeInvokeDelegate(delegate, context);\\n          if (delegateResult) {\\n            if (delegateResult === ContinueSentinel) continue;\\n            return delegateResult;\\n          }\\n        }\\n\\n        if (context.method === \\\"next\\\") {\\n          // Setting context._sent for legacy support of Babel's\\n          // function.sent implementation.\\n          context.sent = context._sent = context.arg;\\n\\n        } else if (context.method === \\\"throw\\\") {\\n          if (state === GenStateSuspendedStart) {\\n            state = GenStateCompleted;\\n            throw context.arg;\\n          }\\n\\n          context.dispatchException(context.arg);\\n\\n        } else if (context.method === \\\"return\\\") {\\n          context.abrupt(\\\"return\\\", context.arg);\\n        }\\n\\n        state = GenStateExecuting;\\n\\n        var record = tryCatch(innerFn, self, context);\\n        if (record.type === \\\"normal\\\") {\\n          // If an exception is thrown from innerFn, we leave state ===\\n          // GenStateExecuting and loop back for another invocation.\\n          state = context.done\\n            ? GenStateCompleted\\n            : GenStateSuspendedYield;\\n\\n          if (record.arg === ContinueSentinel) {\\n            continue;\\n          }\\n\\n          return {\\n            value: record.arg,\\n            done: context.done\\n          };\\n\\n        } else if (record.type === \\\"throw\\\") {\\n          state = GenStateCompleted;\\n          // Dispatch the exception by looping back around to the\\n          // context.dispatchException(context.arg) call above.\\n          context.method = \\\"throw\\\";\\n          context.arg = record.arg;\\n        }\\n      }\\n    };\\n  }\\n\\n  // Call delegate.iterator[context.method](context.arg) and handle the\\n  // result, either by returning a { value, done } result from the\\n  // delegate iterator, or by modifying context.method and context.arg,\\n  // setting context.delegate to null, and returning the ContinueSentinel.\\n  function maybeInvokeDelegate(delegate, context) {\\n    var method = delegate.iterator[context.method];\\n    if (method === undefined) {\\n      // A .throw or .return when the delegate iterator has no .throw\\n      // method always terminates the yield* loop.\\n      context.delegate = null;\\n\\n      if (context.method === \\\"throw\\\") {\\n        // Note: [\\\"return\\\"] must be used for ES3 parsing compatibility.\\n        if (delegate.iterator[\\\"return\\\"]) {\\n          // If the delegate iterator has a return method, give it a\\n          // chance to clean up.\\n          context.method = \\\"return\\\";\\n          context.arg = undefined;\\n          maybeInvokeDelegate(delegate, context);\\n\\n          if (context.method === \\\"throw\\\") {\\n            // If maybeInvokeDelegate(context) changed context.method from\\n            // \\\"return\\\" to \\\"throw\\\", let that override the TypeError below.\\n            return ContinueSentinel;\\n          }\\n        }\\n\\n        context.method = \\\"throw\\\";\\n        context.arg = new TypeError(\\n          \\\"The iterator does not provide a 'throw' method\\\");\\n      }\\n\\n      return ContinueSentinel;\\n    }\\n\\n    var record = tryCatch(method, delegate.iterator, context.arg);\\n\\n    if (record.type === \\\"throw\\\") {\\n      context.method = \\\"throw\\\";\\n      context.arg = record.arg;\\n      context.delegate = null;\\n      return ContinueSentinel;\\n    }\\n\\n    var info = record.arg;\\n\\n    if (! info) {\\n      context.method = \\\"throw\\\";\\n      context.arg = new TypeError(\\\"iterator result is not an object\\\");\\n      context.delegate = null;\\n      return ContinueSentinel;\\n    }\\n\\n    if (info.done) {\\n      // Assign the result of the finished delegate to the temporary\\n      // variable specified by delegate.resultName (see delegateYield).\\n      context[delegate.resultName] = info.value;\\n\\n      // Resume execution at the desired location (see delegateYield).\\n      context.next = delegate.nextLoc;\\n\\n      // If context.method was \\\"throw\\\" but the delegate handled the\\n      // exception, let the outer generator proceed normally. If\\n      // context.method was \\\"next\\\", forget context.arg since it has been\\n      // \\\"consumed\\\" by the delegate iterator. If context.method was\\n      // \\\"return\\\", allow the original .return call to continue in the\\n      // outer generator.\\n      if (context.method !== \\\"return\\\") {\\n        context.method = \\\"next\\\";\\n        context.arg = undefined;\\n      }\\n\\n    } else {\\n      // Re-yield the result returned by the delegate method.\\n      return info;\\n    }\\n\\n    // The delegate iterator is finished, so forget it and continue with\\n    // the outer generator.\\n    context.delegate = null;\\n    return ContinueSentinel;\\n  }\\n\\n  // Define Generator.prototype.{next,throw,return} in terms of the\\n  // unified ._invoke helper method.\\n  defineIteratorMethods(Gp);\\n\\n  Gp[toStringTagSymbol] = \\\"Generator\\\";\\n\\n  // A Generator should always return itself as the iterator object when the\\n  // @@iterator function is called on it. Some browsers' implementations of the\\n  // iterator prototype chain incorrectly implement this, causing the Generator\\n  // object to not be returned from this call. This ensures that doesn't happen.\\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\\n  Gp[iteratorSymbol] = function() {\\n    return this;\\n  };\\n\\n  Gp.toString = function() {\\n    return \\\"[object Generator]\\\";\\n  };\\n\\n  function pushTryEntry(locs) {\\n    var entry = { tryLoc: locs[0] };\\n\\n    if (1 in locs) {\\n      entry.catchLoc = locs[1];\\n    }\\n\\n    if (2 in locs) {\\n      entry.finallyLoc = locs[2];\\n      entry.afterLoc = locs[3];\\n    }\\n\\n    this.tryEntries.push(entry);\\n  }\\n\\n  function resetTryEntry(entry) {\\n    var record = entry.completion || {};\\n    record.type = \\\"normal\\\";\\n    delete record.arg;\\n    entry.completion = record;\\n  }\\n\\n  function Context(tryLocsList) {\\n    // The root entry object (effectively a try statement without a catch\\n    // or a finally block) gives us a place to store values thrown from\\n    // locations where there is no enclosing try statement.\\n    this.tryEntries = [{ tryLoc: \\\"root\\\" }];\\n    tryLocsList.forEach(pushTryEntry, this);\\n    this.reset(true);\\n  }\\n\\n  exports.keys = function(object) {\\n    var keys = [];\\n    for (var key in object) {\\n      keys.push(key);\\n    }\\n    keys.reverse();\\n\\n    // Rather than returning an object with a next method, we keep\\n    // things simple and return the next function itself.\\n    return function next() {\\n      while (keys.length) {\\n        var key = keys.pop();\\n        if (key in object) {\\n          next.value = key;\\n          next.done = false;\\n          return next;\\n        }\\n      }\\n\\n      // To avoid creating an additional object, we just hang the .value\\n      // and .done properties off the next function object itself. This\\n      // also ensures that the minifier will not anonymize the function.\\n      next.done = true;\\n      return next;\\n    };\\n  };\\n\\n  function values(iterable) {\\n    if (iterable) {\\n      var iteratorMethod = iterable[iteratorSymbol];\\n      if (iteratorMethod) {\\n        return iteratorMethod.call(iterable);\\n      }\\n\\n      if (typeof iterable.next === \\\"function\\\") {\\n        return iterable;\\n      }\\n\\n      if (!isNaN(iterable.length)) {\\n        var i = -1, next = function next() {\\n          while (++i < iterable.length) {\\n            if (hasOwn.call(iterable, i)) {\\n              next.value = iterable[i];\\n              next.done = false;\\n              return next;\\n            }\\n          }\\n\\n          next.value = undefined;\\n          next.done = true;\\n\\n          return next;\\n        };\\n\\n        return next.next = next;\\n      }\\n    }\\n\\n    // Return an iterator with no values.\\n    return { next: doneResult };\\n  }\\n  exports.values = values;\\n\\n  function doneResult() {\\n    return { value: undefined, done: true };\\n  }\\n\\n  Context.prototype = {\\n    constructor: Context,\\n\\n    reset: function(skipTempReset) {\\n      this.prev = 0;\\n      this.next = 0;\\n      // Resetting context._sent for legacy support of Babel's\\n      // function.sent implementation.\\n      this.sent = this._sent = undefined;\\n      this.done = false;\\n      this.delegate = null;\\n\\n      this.method = \\\"next\\\";\\n      this.arg = undefined;\\n\\n      this.tryEntries.forEach(resetTryEntry);\\n\\n      if (!skipTempReset) {\\n        for (var name in this) {\\n          // Not sure about the optimal order of these conditions:\\n          if (name.charAt(0) === \\\"t\\\" &&\\n              hasOwn.call(this, name) &&\\n              !isNaN(+name.slice(1))) {\\n            this[name] = undefined;\\n          }\\n        }\\n      }\\n    },\\n\\n    stop: function() {\\n      this.done = true;\\n\\n      var rootEntry = this.tryEntries[0];\\n      var rootRecord = rootEntry.completion;\\n      if (rootRecord.type === \\\"throw\\\") {\\n        throw rootRecord.arg;\\n      }\\n\\n      return this.rval;\\n    },\\n\\n    dispatchException: function(exception) {\\n      if (this.done) {\\n        throw exception;\\n      }\\n\\n      var context = this;\\n      function handle(loc, caught) {\\n        record.type = \\\"throw\\\";\\n        record.arg = exception;\\n        context.next = loc;\\n\\n        if (caught) {\\n          // If the dispatched exception was caught by a catch block,\\n          // then let that catch block handle the exception normally.\\n          context.method = \\\"next\\\";\\n          context.arg = undefined;\\n        }\\n\\n        return !! caught;\\n      }\\n\\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\\n        var entry = this.tryEntries[i];\\n        var record = entry.completion;\\n\\n        if (entry.tryLoc === \\\"root\\\") {\\n          // Exception thrown outside of any try block that could handle\\n          // it, so set the completion value of the entire function to\\n          // throw the exception.\\n          return handle(\\\"end\\\");\\n        }\\n\\n        if (entry.tryLoc <= this.prev) {\\n          var hasCatch = hasOwn.call(entry, \\\"catchLoc\\\");\\n          var hasFinally = hasOwn.call(entry, \\\"finallyLoc\\\");\\n\\n          if (hasCatch && hasFinally) {\\n            if (this.prev < entry.catchLoc) {\\n              return handle(entry.catchLoc, true);\\n            } else if (this.prev < entry.finallyLoc) {\\n              return handle(entry.finallyLoc);\\n            }\\n\\n          } else if (hasCatch) {\\n            if (this.prev < entry.catchLoc) {\\n              return handle(entry.catchLoc, true);\\n            }\\n\\n          } else if (hasFinally) {\\n            if (this.prev < entry.finallyLoc) {\\n              return handle(entry.finallyLoc);\\n            }\\n\\n          } else {\\n            throw new Error(\\\"try statement without catch or finally\\\");\\n          }\\n        }\\n      }\\n    },\\n\\n    abrupt: function(type, arg) {\\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\\n        var entry = this.tryEntries[i];\\n        if (entry.tryLoc <= this.prev &&\\n            hasOwn.call(entry, \\\"finallyLoc\\\") &&\\n            this.prev < entry.finallyLoc) {\\n          var finallyEntry = entry;\\n          break;\\n        }\\n      }\\n\\n      if (finallyEntry &&\\n          (type === \\\"break\\\" ||\\n           type === \\\"continue\\\") &&\\n          finallyEntry.tryLoc <= arg &&\\n          arg <= finallyEntry.finallyLoc) {\\n        // Ignore the finally entry if control is not jumping to a\\n        // location outside the try/catch block.\\n        finallyEntry = null;\\n      }\\n\\n      var record = finallyEntry ? finallyEntry.completion : {};\\n      record.type = type;\\n      record.arg = arg;\\n\\n      if (finallyEntry) {\\n        this.method = \\\"next\\\";\\n        this.next = finallyEntry.finallyLoc;\\n        return ContinueSentinel;\\n      }\\n\\n      return this.complete(record);\\n    },\\n\\n    complete: function(record, afterLoc) {\\n      if (record.type === \\\"throw\\\") {\\n        throw record.arg;\\n      }\\n\\n      if (record.type === \\\"break\\\" ||\\n          record.type === \\\"continue\\\") {\\n        this.next = record.arg;\\n      } else if (record.type === \\\"return\\\") {\\n        this.rval = this.arg = record.arg;\\n        this.method = \\\"return\\\";\\n        this.next = \\\"end\\\";\\n      } else if (record.type === \\\"normal\\\" && afterLoc) {\\n        this.next = afterLoc;\\n      }\\n\\n      return ContinueSentinel;\\n    },\\n\\n    finish: function(finallyLoc) {\\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\\n        var entry = this.tryEntries[i];\\n        if (entry.finallyLoc === finallyLoc) {\\n          this.complete(entry.completion, entry.afterLoc);\\n          resetTryEntry(entry);\\n          return ContinueSentinel;\\n        }\\n      }\\n    },\\n\\n    \\\"catch\\\": function(tryLoc) {\\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\\n        var entry = this.tryEntries[i];\\n        if (entry.tryLoc === tryLoc) {\\n          var record = entry.completion;\\n          if (record.type === \\\"throw\\\") {\\n            var thrown = record.arg;\\n            resetTryEntry(entry);\\n          }\\n          return thrown;\\n        }\\n      }\\n\\n      // The context.catch method must only be called with a location\\n      // argument that corresponds to a known catch block.\\n      throw new Error(\\\"illegal catch attempt\\\");\\n    },\\n\\n    delegateYield: function(iterable, resultName, nextLoc) {\\n      this.delegate = {\\n        iterator: values(iterable),\\n        resultName: resultName,\\n        nextLoc: nextLoc\\n      };\\n\\n      if (this.method === \\\"next\\\") {\\n        // Deliberately forget the last sent value so that we don't\\n        // accidentally pass it on to the delegate.\\n        this.arg = undefined;\\n      }\\n\\n      return ContinueSentinel;\\n    }\\n  };\\n\\n  // Regardless of whether this script is executing as a CommonJS module\\n  // or not, return the runtime object so that we can declare the variable\\n  // regeneratorRuntime in the outer scope, which allows this module to be\\n  // injected easily by `bin/regenerator --include-runtime script.js`.\\n  return exports;\\n\\n}(\\n  // If this script is executing as a CommonJS module, use module.exports\\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\\n  // object. Either way, the resulting object will be used to initialize\\n  // the regeneratorRuntime variable at the top of this file.\\n  typeof module === \\\"object\\\" ? module.exports : {}\\n));\\n\\ntry {\\n  regeneratorRuntime = runtime;\\n} catch (accidentalStrictMode) {\\n  // This module should not be running in strict mode, so the above\\n  // assignment should always work unless something is misconfigured. Just\\n  // in case runtime.js accidentally runs in strict mode, we can escape\\n  // strict mode using a global Function call. This could conceivably fail\\n  // if a Content Security Policy forbids using Function, but in that case\\n  // the proper solution is to fix the accidental strict mode problem. If\\n  // you've misconfigured your bundler to force strict mode and applied a\\n  // CSP to forbid Function, and you're not willing to fix either of those\\n  // problems, please detail your unique predicament in a GitHub issue.\\n  Function(\\\"r\\\", \\\"regeneratorRuntime = r\\\")(runtime);\\n}\\n\\n},{}],82:[function(require,module,exports){\\n/* eslint-disable node/no-deprecated-api */\\nvar buffer = require('buffer')\\nvar Buffer = buffer.Buffer\\n\\n// alternative to using Object.keys for old browsers\\nfunction copyProps (src, dst) {\\n  for (var key in src) {\\n    dst[key] = src[key]\\n  }\\n}\\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\\n  module.exports = buffer\\n} else {\\n  // Copy properties from require('buffer')\\n  copyProps(buffer, exports)\\n  exports.Buffer = SafeBuffer\\n}\\n\\nfunction SafeBuffer (arg, encodingOrOffset, length) {\\n  return Buffer(arg, encodingOrOffset, length)\\n}\\n\\nSafeBuffer.prototype = Object.create(Buffer.prototype)\\n\\n// Copy static methods from Buffer\\ncopyProps(Buffer, SafeBuffer)\\n\\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\\n  if (typeof arg === 'number') {\\n    throw new TypeError('Argument must not be a number')\\n  }\\n  return Buffer(arg, encodingOrOffset, length)\\n}\\n\\nSafeBuffer.alloc = function (size, fill, encoding) {\\n  if (typeof size !== 'number') {\\n    throw new TypeError('Argument must be a number')\\n  }\\n  var buf = Buffer(size)\\n  if (fill !== undefined) {\\n    if (typeof encoding === 'string') {\\n      buf.fill(fill, encoding)\\n    } else {\\n      buf.fill(fill)\\n    }\\n  } else {\\n    buf.fill(0)\\n  }\\n  return buf\\n}\\n\\nSafeBuffer.allocUnsafe = function (size) {\\n  if (typeof size !== 'number') {\\n    throw new TypeError('Argument must be a number')\\n  }\\n  return Buffer(size)\\n}\\n\\nSafeBuffer.allocUnsafeSlow = function (size) {\\n  if (typeof size !== 'number') {\\n    throw new TypeError('Argument must be a number')\\n  }\\n  return buffer.SlowBuffer(size)\\n}\\n\\n},{\\\"buffer\\\":7}],83:[function(require,module,exports){\\n(function (global){\\n\\\"use strict\\\";\\nvar g;\\n\\n\\n\\nif (typeof window !== \\\"undefined\\\")\\n{\\n\\tg = window;\\n}\\nelse if (typeof global !== \\\"undefined\\\")\\n{\\n\\tg = global;\\n}\\nelse if (typeof self !== \\\"undefined\\\")\\n{\\n\\tg = self;\\n}\\nelse\\n{\\n\\tg = this;\\n}\\n\\n\\n\\nvar output =\\n{\\n\\tshim: function(){},\\n\\tURL: g.URL,\\n\\tURLSearchParams: g.URLSearchParams\\n};\\n\\n\\n\\nif (typeof define === \\\"function\\\" && define.amd)\\n{\\n\\tdefine(function(){ return output });\\n}\\nelse if (typeof exports === \\\"object\\\")\\n{\\n\\tmodule.exports = output;\\n}\\nelse\\n{\\n\\tg.UniversalURL = output;\\n}\\n\\n}).call(this,typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {})\\n},{}],84:[function(require,module,exports){\\nmodule.exports = read\\n\\nvar MSB = 0x80\\n  , REST = 0x7F\\n\\nfunction read(buf, offset) {\\n  var res    = 0\\n    , offset = offset || 0\\n    , shift  = 0\\n    , counter = offset\\n    , b\\n    , l = buf.length\\n\\n  do {\\n    if (counter >= l) {\\n      read.bytes = 0\\n      throw new RangeError('Could not decode varint')\\n    }\\n    b = buf[counter++]\\n    res += shift < 28\\n      ? (b & REST) << shift\\n      : (b & REST) * Math.pow(2, shift)\\n    shift += 7\\n  } while (b >= MSB)\\n\\n  read.bytes = counter - offset\\n\\n  return res\\n}\\n\\n},{}],85:[function(require,module,exports){\\nmodule.exports = encode\\n\\nvar MSB = 0x80\\n  , REST = 0x7F\\n  , MSBALL = ~REST\\n  , INT = Math.pow(2, 31)\\n\\nfunction encode(num, out, offset) {\\n  out = out || []\\n  offset = offset || 0\\n  var oldOffset = offset\\n\\n  while(num >= INT) {\\n    out[offset++] = (num & 0xFF) | MSB\\n    num /= 128\\n  }\\n  while(num & MSBALL) {\\n    out[offset++] = (num & 0xFF) | MSB\\n    num >>>= 7\\n  }\\n  out[offset] = num | 0\\n  \\n  encode.bytes = offset - oldOffset + 1\\n  \\n  return out\\n}\\n\\n},{}],86:[function(require,module,exports){\\nmodule.exports = {\\n    encode: require('./encode.js')\\n  , decode: require('./decode.js')\\n  , encodingLength: require('./length.js')\\n}\\n\\n},{\\\"./decode.js\\\":84,\\\"./encode.js\\\":85,\\\"./length.js\\\":87}],87:[function(require,module,exports){\\n\\nvar N1 = Math.pow(2,  7)\\nvar N2 = Math.pow(2, 14)\\nvar N3 = Math.pow(2, 21)\\nvar N4 = Math.pow(2, 28)\\nvar N5 = Math.pow(2, 35)\\nvar N6 = Math.pow(2, 42)\\nvar N7 = Math.pow(2, 49)\\nvar N8 = Math.pow(2, 56)\\nvar N9 = Math.pow(2, 63)\\n\\nmodule.exports = function (value) {\\n  return (\\n    value < N1 ? 1\\n  : value < N2 ? 2\\n  : value < N3 ? 3\\n  : value < N4 ? 4\\n  : value < N5 ? 5\\n  : value < N6 ? 6\\n  : value < N7 ? 7\\n  : value < N8 ? 8\\n  : value < N9 ? 9\\n  :              10\\n  )\\n}\\n\\n},{}],88:[function(require,module,exports){\\n(function (global){\\n'use strict'\\nmodule.exports = (typeof self === 'object' && self.self === self && self) ||\\n  (typeof global === 'object' && global.global === global && global) ||\\n  this\\n\\n}).call(this,typeof global !== \\\"undefined\\\" ? global : typeof self !== \\\"undefined\\\" ? self : typeof window !== \\\"undefined\\\" ? window : {})\\n},{}],89:[function(require,module,exports){\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nvar _regenerator = _interopRequireDefault(require(\\\"@babel/runtime/regenerator\\\"));\\n\\nvar _asyncToGenerator2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/asyncToGenerator\\\"));\\n\\nvar _cids = _interopRequireDefault(require(\\\"cids\\\"));\\n\\nvar _contentHash = _interopRequireDefault(require(\\\"content-hash\\\"));\\n\\nvar _windowOrGlobal = _interopRequireDefault(require(\\\"window-or-global\\\"));\\n\\n(function () {\\n  /*jslint node: true, browser: true*/\\n  \\\"use strict\\\";\\n\\n  var name = \\\"ens-library\\\";\\n\\n  var EnsLibrary = function EnsLibrary(ipfsLoader) {\\n    this.ipfsLoader = ipfsLoader;\\n    this.network = {\\n      1: \\\"Ethereum Main Network: 'Mainnet', chainId: '1'\\\",\\n      3: \\\"Ethereum Test Network (PoW): 'Ropsten', chainId: '3'\\\",\\n      4: \\\"Ethereum Test Network (PoA): 'Rinkeby', chainId: '4'\\\",\\n      5: \\\"Ethereum Test Network (PoA): 'Goerli', chainId: '5'\\\",\\n      42: \\\"Ethereum Test Network (PoA): 'Kovan', chainId: '42'\\\"\\n    };\\n    this.etherscan = {\\n      1: \\\"https://etherscan.io\\\",\\n      3: \\\"https://ropsten.etherscan.io\\\",\\n      4: \\\"https://rinkeby.etherscan.io\\\",\\n      5: \\\"https://goerli.etherscan.io\\\",\\n      42: \\\"https://kovan.etherscan.io\\\"\\n    }; // https://docs.ens.domains/ens-deployments\\n    // https://github.com/ensdomains/ui/blob/master/src/ens.js\\n\\n    this.registry = {\\n      1: \\\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\\\",\\n      3: \\\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\\\",\\n      4: \\\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\\\",\\n      5: \\\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\\\"\\n    };\\n  };\\n\\n  EnsLibrary.prototype.getLogger = function () {\\n    return _windowOrGlobal[\\\"default\\\"].log.getLogger(name);\\n  };\\n\\n  EnsLibrary.prototype.getEtherscanRegistry = function () {\\n    return this.etherscan;\\n  };\\n\\n  EnsLibrary.prototype.getNetwork = function () {\\n    return this.network;\\n  };\\n\\n  EnsLibrary.prototype.getENSRegistry = function () {\\n    return this.registry;\\n  };\\n\\n  EnsLibrary.prototype.getLogger = function () {\\n    return _windowOrGlobal[\\\"default\\\"].log.getLogger(name);\\n  };\\n\\n  EnsLibrary.prototype.loadEthers = /*#__PURE__*/(0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee() {\\n    return _regenerator[\\\"default\\\"].wrap(function _callee$(_context) {\\n      while (1) {\\n        switch (_context.prev = _context.next) {\\n          case 0:\\n            if (!(_windowOrGlobal[\\\"default\\\"].ethers == undefined || _windowOrGlobal[\\\"default\\\"].ethers == null)) {\\n              _context.next = 12;\\n              break;\\n            }\\n\\n            _context.prev = 1;\\n            _context.next = 4;\\n            return this.ipfsLoader.loadEtherJsLibrary();\\n\\n          case 4:\\n            if (!(_windowOrGlobal[\\\"default\\\"].ethers !== undefined && _windowOrGlobal[\\\"default\\\"].ethers !== null)) {\\n              _context.next = 6;\\n              break;\\n            }\\n\\n            return _context.abrupt(\\\"return\\\");\\n\\n          case 6:\\n            _context.next = 11;\\n            break;\\n\\n          case 8:\\n            _context.prev = 8;\\n            _context.t0 = _context[\\\"catch\\\"](1);\\n            this.getLogger().error(_context.t0);\\n\\n          case 11:\\n            throw new Error(\\\"Unavailable Ethereum library...\\\");\\n\\n          case 12:\\n          case \\\"end\\\":\\n            return _context.stop();\\n        }\\n      }\\n    }, _callee, this, [[1, 8]]);\\n  })); // https://github.com/ensdomains/ui/blob/master/src/utils/contents.js\\n\\n  EnsLibrary.prototype.decodeContenthash = function (content) {\\n    var decoded = null;\\n    var protocol = null;\\n\\n    if (content.error) {\\n      throw new Error(content.error);\\n    }\\n\\n    if (content) {\\n      var codec = _contentHash[\\\"default\\\"].getCodec(content);\\n\\n      decoded = _contentHash[\\\"default\\\"].decode(content);\\n\\n      if (codec === \\\"ipfs-ns\\\") {\\n        protocol = \\\"ipfs\\\";\\n      } else if (codec === \\\"swarm-ns\\\") {\\n        protocol = \\\"bzz\\\";\\n      } else if (codec === \\\"onion\\\") {\\n        protocol = \\\"onion\\\";\\n      } else if (codec === \\\"onion3\\\") {\\n        protocol = \\\"onion3\\\";\\n      }\\n    }\\n\\n    return {\\n      decoded: decoded,\\n      protocol: protocol\\n    };\\n  }; // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1577.md\\n\\n\\n  EnsLibrary.prototype.encodeContenthash = function (content) {\\n    var type = null;\\n    var text = null;\\n    var encoded = null;\\n\\n    if (!!content) {\\n      var matched = content.match(/^(ipfs|bzz|onion|onion3):\\\\/\\\\/(.*)/) || content.match(/\\\\/(ipfs)\\\\/(.*)/);\\n\\n      if (matched) {\\n        type = matched[1];\\n        text = matched[2];\\n      }\\n\\n      if (type === \\\"ipfs\\\") {\\n        if (text.length >= 4) {\\n          var cid = new _cids[\\\"default\\\"](text);\\n\\n          if (cid.version !== 0) {\\n            throw new Error(\\\"ENS domain content should be Base58 (CidV0): \\\" + text);\\n          }\\n\\n          encoded = \\\"0x\\\" + _contentHash[\\\"default\\\"].fromIpfs(text);\\n        }\\n      } else {\\n        throw new Error(\\\"Unsupported ENS domain protocol: \\\" + type);\\n      }\\n    }\\n\\n    return {\\n      encoded: encoded\\n    };\\n  };\\n\\n  EnsLibrary.prototype.enableProvider = /*#__PURE__*/function () {\\n    var _ref2 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee2(provider) {\\n      var accounts;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee2$(_context2) {\\n        while (1) {\\n          switch (_context2.prev = _context2.next) {\\n            case 0:\\n              if (!(provider == undefined || provider == null)) {\\n                _context2.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined Ethereum provider...\\\");\\n\\n            case 2:\\n              // Enable Provider\\n              accounts = null; // Handle connection, per EIP 1102\\n\\n              if (!(typeof provider.send === \\\"function\\\")) {\\n                _context2.next = 20;\\n                break;\\n              }\\n\\n              _context2.prev = 4;\\n              _context2.next = 7;\\n              return provider.send(\\\"eth_requestAccounts\\\");\\n\\n            case 7:\\n              _context2.next = 14;\\n              break;\\n\\n            case 9:\\n              _context2.prev = 9;\\n              _context2.t0 = _context2[\\\"catch\\\"](4);\\n\\n              if (!(_context2.t0.code === 4001)) {\\n                _context2.next = 13;\\n                break;\\n              }\\n\\n              throw new Error(\\\"User rejected request...\\\");\\n\\n            case 13:\\n              throw new Error(_context2.t0.message);\\n\\n            case 14:\\n              _context2.next = 16;\\n              return provider.send(\\\"eth_accounts\\\");\\n\\n            case 16:\\n              accounts = _context2.sent;\\n\\n              // https://medium.com/metamask/breaking-changes-to-the-metamask-inpage-provider-b4dde069dd0a\\n              // Metamask returns accounts.results rather than an array as described in their above communication\\n              if (accounts !== undefined && accounts !== null && typeof accounts.result !== \\\"undefined\\\" && Array.isArray(accounts.result)) {\\n                accounts = accounts.result;\\n              } // Legacy\\n\\n\\n              _context2.next = 24;\\n              break;\\n\\n            case 20:\\n              if (!(typeof provider.enable === \\\"function\\\")) {\\n                _context2.next = 24;\\n                break;\\n              }\\n\\n              _context2.next = 23;\\n              return provider.enable();\\n\\n            case 23:\\n              accounts = _context2.sent;\\n\\n            case 24:\\n              if (!(accounts == undefined || accounts == null || Array.isArray(accounts) == false || accounts.length == 0)) {\\n                _context2.next = 26;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Unable to retrieve an Ethereum account...\\\");\\n\\n            case 26:\\n              return _context2.abrupt(\\\"return\\\", accounts[0]);\\n\\n            case 27:\\n            case \\\"end\\\":\\n              return _context2.stop();\\n          }\\n        }\\n      }, _callee2, null, [[4, 9]]);\\n    }));\\n\\n    return function (_x) {\\n      return _ref2.apply(this, arguments);\\n    };\\n  }();\\n\\n  EnsLibrary.prototype.getProvider = function () {\\n    // Retrieve an available Ethereum provider\\n    var provider = null;\\n\\n    if (typeof _windowOrGlobal[\\\"default\\\"].ethereum !== \\\"undefined\\\") {\\n      provider = _windowOrGlobal[\\\"default\\\"].ethereum;\\n      this.getLogger().info(\\\"Ethereum provider: 'window.ethereum'...\\\");\\n    }\\n\\n    if (provider == null && _windowOrGlobal[\\\"default\\\"].web3 !== undefined && _windowOrGlobal[\\\"default\\\"].web3.currentProvider !== undefined) {\\n      provider = _windowOrGlobal[\\\"default\\\"].web3.currentProvider;\\n      this.getLogger().info(\\\"Ethereum provider: 'window.web3.currentProvider'...\\\");\\n    }\\n\\n    if (provider == null) {\\n      throw new Error(\\\"Unable to retrieve an Ethereum provider...\\\");\\n    } // https://docs.metamask.io/guide/ethereum-provider.html#methods-current-api\\n\\n\\n    if (provider.isMetaMask) {\\n      provider.autoRefreshOnNetworkChange = false;\\n    } // return provider\\n\\n\\n    return provider;\\n  };\\n\\n  EnsLibrary.prototype.getEnabledWeb3Provider = /*#__PURE__*/function () {\\n    var _ref3 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee3(provider) {\\n      var account, web3, network;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee3$(_context3) {\\n        while (1) {\\n          switch (_context3.prev = _context3.next) {\\n            case 0:\\n              if (!(provider == undefined || provider == null)) {\\n                _context3.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined Ethereum provider...\\\");\\n\\n            case 2:\\n              if (!(_windowOrGlobal[\\\"default\\\"].ethers == undefined || _windowOrGlobal[\\\"default\\\"].ethers == null)) {\\n                _context3.next = 5;\\n                break;\\n              }\\n\\n              _context3.next = 5;\\n              return this.loadEthers();\\n\\n            case 5:\\n              _context3.next = 7;\\n              return this.enableProvider(provider);\\n\\n            case 7:\\n              account = _context3.sent;\\n              // Instantiate a Web3Provider\\n              web3 = new _windowOrGlobal[\\\"default\\\"].ethers.providers.Web3Provider(provider); // Retrieve current network\\n\\n              _context3.next = 11;\\n              return web3.getNetwork();\\n\\n            case 11:\\n              network = _context3.sent;\\n              return _context3.abrupt(\\\"return\\\", {\\n                web3: web3,\\n                chainId: network.chainId,\\n                account: account\\n              });\\n\\n            case 13:\\n            case \\\"end\\\":\\n              return _context3.stop();\\n          }\\n        }\\n      }, _callee3, this);\\n    }));\\n\\n    return function (_x2) {\\n      return _ref3.apply(this, arguments);\\n    };\\n  }();\\n\\n  EnsLibrary.prototype.getWeb3Provider = /*#__PURE__*/function () {\\n    var _ref4 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee4(provider) {\\n      var web3, network;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee4$(_context4) {\\n        while (1) {\\n          switch (_context4.prev = _context4.next) {\\n            case 0:\\n              if (!(provider == undefined || provider == null)) {\\n                _context4.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined Ethereum provider...\\\");\\n\\n            case 2:\\n              if (!(_windowOrGlobal[\\\"default\\\"].ethers == undefined || _windowOrGlobal[\\\"default\\\"].ethers == null)) {\\n                _context4.next = 5;\\n                break;\\n              }\\n\\n              _context4.next = 5;\\n              return this.loadEthers();\\n\\n            case 5:\\n              // Instantiate an ethers Web3Provider\\n              web3 = new _windowOrGlobal[\\\"default\\\"].ethers.providers.Web3Provider(provider); // Retrieve the current network\\n\\n              _context4.next = 8;\\n              return web3.getNetwork();\\n\\n            case 8:\\n              network = _context4.sent;\\n              return _context4.abrupt(\\\"return\\\", {\\n                web3: web3,\\n                chainId: network.chainId\\n              });\\n\\n            case 10:\\n            case \\\"end\\\":\\n              return _context4.stop();\\n          }\\n        }\\n      }, _callee4, this);\\n    }));\\n\\n    return function (_x3) {\\n      return _ref4.apply(this, arguments);\\n    };\\n  }();\\n\\n  EnsLibrary.prototype.getRegistry = /*#__PURE__*/function () {\\n    var _ref5 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee5(web3) {\\n      var network, registry;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee5$(_context5) {\\n        while (1) {\\n          switch (_context5.prev = _context5.next) {\\n            case 0:\\n              if (!(web3 == undefined || web3 == null)) {\\n                _context5.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined Web3 provider...\\\");\\n\\n            case 2:\\n              _context5.next = 4;\\n              return web3.getNetwork();\\n\\n            case 4:\\n              network = _context5.sent;\\n              // Retrieve an Ethereum ENS Registry address\\n              registry = null;\\n\\n              try {\\n                registry = this.registry[network.chainId];\\n              } catch (error) {\\n                this.getLogger().error(error);\\n              }\\n\\n              if (!(registry == undefined || registry == null)) {\\n                _context5.next = 9;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Unsupported Ethereum network: \\\" + network.chainId);\\n\\n            case 9:\\n              return _context5.abrupt(\\\"return\\\", {\\n                chainId: network.chainId,\\n                registry: registry\\n              });\\n\\n            case 10:\\n            case \\\"end\\\":\\n              return _context5.stop();\\n          }\\n        }\\n      }, _callee5, this);\\n    }));\\n\\n    return function (_x4) {\\n      return _ref5.apply(this, arguments);\\n    };\\n  }();\\n\\n  EnsLibrary.prototype.getResolver = /*#__PURE__*/function () {\\n    var _ref6 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee6(web3, registry, node) {\\n      var abi, iface, data, result, decoded;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee6$(_context6) {\\n        while (1) {\\n          switch (_context6.prev = _context6.next) {\\n            case 0:\\n              if (!(web3 == undefined || web3 == null)) {\\n                _context6.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined Web3 provider...\\\");\\n\\n            case 2:\\n              if (!(registry == undefined || registry == null || registry.trim() === \\\"\\\")) {\\n                _context6.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined ENS registry address...\\\");\\n\\n            case 4:\\n              if (!(node == undefined || node == null || node.trim() === \\\"\\\")) {\\n                _context6.next = 6;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined ENS domain resolver...\\\");\\n\\n            case 6:\\n              if (!(_windowOrGlobal[\\\"default\\\"].ethers == undefined || _windowOrGlobal[\\\"default\\\"].ethers == null)) {\\n                _context6.next = 9;\\n                break;\\n              }\\n\\n              _context6.next = 9;\\n              return this.loadEthers();\\n\\n            case 9:\\n              // Low level call\\n              abi = [{\\n                name: \\\"resolver\\\",\\n                type: \\\"function\\\",\\n                inputs: [{\\n                  type: \\\"bytes32\\\"\\n                }]\\n              }];\\n              iface = new _windowOrGlobal[\\\"default\\\"].ethers.utils.Interface(abi);\\n              data = iface.functions.resolver.encode([node]);\\n              _context6.next = 14;\\n              return web3.call({\\n                to: registry,\\n                data: data\\n              });\\n\\n            case 14:\\n              result = _context6.sent;\\n\\n              if (!(result == undefined || result == null || result === \\\"0x\\\")) {\\n                _context6.next = 17;\\n                break;\\n              }\\n\\n              return _context6.abrupt(\\\"return\\\", null);\\n\\n            case 17:\\n              _context6.prev = 17;\\n              decoded = _windowOrGlobal[\\\"default\\\"].ethers.utils.defaultAbiCoder.decode([\\\"address\\\"], result);\\n              return _context6.abrupt(\\\"return\\\", decoded[0]);\\n\\n            case 22:\\n              _context6.prev = 22;\\n              _context6.t0 = _context6[\\\"catch\\\"](17);\\n              this.getLogger().error(_context6.t0);\\n\\n            case 25:\\n              return _context6.abrupt(\\\"return\\\", null);\\n\\n            case 26:\\n            case \\\"end\\\":\\n              return _context6.stop();\\n          }\\n        }\\n      }, _callee6, this, [[17, 22]]);\\n    }));\\n\\n    return function (_x5, _x6, _x7) {\\n      return _ref6.apply(this, arguments);\\n    };\\n  }(); // https://eips.ethereum.org/EIPS/eip-165\\n\\n\\n  EnsLibrary.prototype.checkEip165 = /*#__PURE__*/function () {\\n    var _ref7 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee7(web3, address) {\\n      var abi, iface, data, result, decoded;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee7$(_context7) {\\n        while (1) {\\n          switch (_context7.prev = _context7.next) {\\n            case 0:\\n              if (!(web3 == undefined || web3 == null)) {\\n                _context7.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined Web3 provider...\\\");\\n\\n            case 2:\\n              if (!(address == undefined || address == null || address.trim() === \\\"\\\")) {\\n                _context7.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined Ethereum address...\\\");\\n\\n            case 4:\\n              if (!(_windowOrGlobal[\\\"default\\\"].ethers == undefined || _windowOrGlobal[\\\"default\\\"].ethers == null)) {\\n                _context7.next = 7;\\n                break;\\n              }\\n\\n              _context7.next = 7;\\n              return this.loadEthers();\\n\\n            case 7:\\n              // true when interfaceID is 0x01ffc9a7\\n              abi = [{\\n                name: \\\"supportsInterface\\\",\\n                type: \\\"function\\\",\\n                inputs: [{\\n                  type: \\\"bytes4\\\"\\n                }]\\n              }];\\n              iface = new _windowOrGlobal[\\\"default\\\"].ethers.utils.Interface(abi);\\n              data = iface.functions.supportsInterface.encode([\\\"0x01ffc9a7\\\"]);\\n              _context7.next = 12;\\n              return web3.call({\\n                to: address,\\n                data: data\\n              });\\n\\n            case 12:\\n              result = _context7.sent;\\n\\n              if (!(result == undefined || result == null || result === \\\"0x\\\")) {\\n                _context7.next = 15;\\n                break;\\n              }\\n\\n              return _context7.abrupt(\\\"return\\\", false);\\n\\n            case 15:\\n              _context7.prev = 15;\\n              decoded = _windowOrGlobal[\\\"default\\\"].ethers.utils.defaultAbiCoder.decode([\\\"bool\\\"], result);\\n\\n              if (!(decoded[0] == false)) {\\n                _context7.next = 19;\\n                break;\\n              }\\n\\n              return _context7.abrupt(\\\"return\\\", false);\\n\\n            case 19:\\n              _context7.next = 25;\\n              break;\\n\\n            case 21:\\n              _context7.prev = 21;\\n              _context7.t0 = _context7[\\\"catch\\\"](15);\\n              this.getLogger().error(_context7.t0);\\n              return _context7.abrupt(\\\"return\\\", false);\\n\\n            case 25:\\n              // false when interfaceID is 0xffffffff\\n              data = iface.functions.supportsInterface.encode([\\\"0xffffffff\\\"]);\\n              _context7.next = 28;\\n              return web3.call({\\n                to: address,\\n                data: data\\n              });\\n\\n            case 28:\\n              result = _context7.sent;\\n\\n              if (!(result == undefined || result == null || result === \\\"0x\\\")) {\\n                _context7.next = 31;\\n                break;\\n              }\\n\\n              return _context7.abrupt(\\\"return\\\", false);\\n\\n            case 31:\\n              _context7.prev = 31;\\n              decoded = _windowOrGlobal[\\\"default\\\"].ethers.utils.defaultAbiCoder.decode([\\\"bool\\\"], result); // conform to spec\\n\\n              if (!(decoded[0] == false)) {\\n                _context7.next = 35;\\n                break;\\n              }\\n\\n              return _context7.abrupt(\\\"return\\\", true);\\n\\n            case 35:\\n              _context7.next = 40;\\n              break;\\n\\n            case 37:\\n              _context7.prev = 37;\\n              _context7.t1 = _context7[\\\"catch\\\"](31);\\n              this.getLogger().error(_context7.t1);\\n\\n            case 40:\\n              return _context7.abrupt(\\\"return\\\", false);\\n\\n            case 41:\\n            case \\\"end\\\":\\n              return _context7.stop();\\n          }\\n        }\\n      }, _callee7, this, [[15, 21], [31, 37]]);\\n    }));\\n\\n    return function (_x8, _x9) {\\n      return _ref7.apply(this, arguments);\\n    };\\n  }(); // https://eips.ethereum.org/EIPS/eip-1577\\n\\n\\n  EnsLibrary.prototype.checkEip1577 = /*#__PURE__*/function () {\\n    var _ref8 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee8(web3, address) {\\n      var abi, iface, data, result, decoded;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee8$(_context8) {\\n        while (1) {\\n          switch (_context8.prev = _context8.next) {\\n            case 0:\\n              if (!(web3 == undefined || web3 == null)) {\\n                _context8.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined Web3 provider...\\\");\\n\\n            case 2:\\n              if (!(address == undefined || address == null || address.trim() === \\\"\\\")) {\\n                _context8.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined Ethereum address...\\\");\\n\\n            case 4:\\n              if (!(_windowOrGlobal[\\\"default\\\"].ethers == undefined || _windowOrGlobal[\\\"default\\\"].ethers == null)) {\\n                _context8.next = 7;\\n                break;\\n              }\\n\\n              _context8.next = 7;\\n              return this.loadEthers();\\n\\n            case 7:\\n              // contenthash, true when interfaceID is 0xbc1c58d1\\n              abi = [{\\n                name: \\\"supportsInterface\\\",\\n                type: \\\"function\\\",\\n                inputs: [{\\n                  type: \\\"bytes4\\\"\\n                }]\\n              }];\\n              iface = new _windowOrGlobal[\\\"default\\\"].ethers.utils.Interface(abi);\\n              data = iface.functions.supportsInterface.encode([\\\"0xbc1c58d1\\\"]);\\n              _context8.next = 12;\\n              return web3.call({\\n                to: address,\\n                data: data\\n              });\\n\\n            case 12:\\n              result = _context8.sent;\\n\\n              if (!(result == undefined || result == null || result === \\\"0x\\\")) {\\n                _context8.next = 15;\\n                break;\\n              }\\n\\n              return _context8.abrupt(\\\"return\\\", false);\\n\\n            case 15:\\n              _context8.prev = 15;\\n              // decode\\n              decoded = _windowOrGlobal[\\\"default\\\"].ethers.utils.defaultAbiCoder.decode([\\\"bool\\\"], result);\\n\\n              if (!(decoded[0] == false)) {\\n                _context8.next = 19;\\n                break;\\n              }\\n\\n              return _context8.abrupt(\\\"return\\\", false);\\n\\n            case 19:\\n              _context8.next = 25;\\n              break;\\n\\n            case 21:\\n              _context8.prev = 21;\\n              _context8.t0 = _context8[\\\"catch\\\"](15);\\n              this.getLogger().error(_context8.t0);\\n              return _context8.abrupt(\\\"return\\\", false);\\n\\n            case 25:\\n              return _context8.abrupt(\\\"return\\\", true);\\n\\n            case 26:\\n            case \\\"end\\\":\\n              return _context8.stop();\\n          }\\n        }\\n      }, _callee8, this, [[15, 21]]);\\n    }));\\n\\n    return function (_x10, _x11) {\\n      return _ref8.apply(this, arguments);\\n    };\\n  }();\\n\\n  EnsLibrary.prototype.getContentHash = /*#__PURE__*/function () {\\n    var _ref9 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee9(domain, web3) {\\n      var _yield$this$getWeb3Pr, domainHash, _yield$this$getRegist, chainId, registry, resolver, eip165, eip1577, abi, iface, data, result, content, _this$decodeContentha, decoded, protocol;\\n\\n      return _regenerator[\\\"default\\\"].wrap(function _callee9$(_context9) {\\n        while (1) {\\n          switch (_context9.prev = _context9.next) {\\n            case 0:\\n              if (!(domain == undefined || domain == null)) {\\n                _context9.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined ENS domain...\\\");\\n\\n            case 2:\\n              if (!(_windowOrGlobal[\\\"default\\\"].ethers == undefined || _windowOrGlobal[\\\"default\\\"].ethers == null)) {\\n                _context9.next = 5;\\n                break;\\n              }\\n\\n              _context9.next = 5;\\n              return this.loadEthers();\\n\\n            case 5:\\n              if (!(web3 == undefined)) {\\n                _context9.next = 10;\\n                break;\\n              }\\n\\n              _context9.next = 8;\\n              return this.getWeb3Provider();\\n\\n            case 8:\\n              _yield$this$getWeb3Pr = _context9.sent;\\n              web3 = _yield$this$getWeb3Pr.web3;\\n\\n            case 10:\\n              // Resolve domain as namehash\\n              domainHash = _windowOrGlobal[\\\"default\\\"].ethers.utils.namehash(domain); // Fetch ens registry address\\n\\n              _context9.next = 13;\\n              return this.getRegistry(web3);\\n\\n            case 13:\\n              _yield$this$getRegist = _context9.sent;\\n              chainId = _yield$this$getRegist.chainId;\\n              registry = _yield$this$getRegist.registry;\\n              // Log\\n              this.getLogger().info(\\\"ENS registry:\\\" + \\\"\\\\n \\\" + this.etherscan[chainId] + \\\"/address/\\\" + registry); // Fetch resolver address\\n\\n              _context9.next = 19;\\n              return this.getResolver(web3, registry, domainHash);\\n\\n            case 19:\\n              resolver = _context9.sent;\\n\\n              if (!(resolver == null || /^0x0+$/.test(resolver) == true)) {\\n                _context9.next = 22;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined ENS domain resolver...\\\");\\n\\n            case 22:\\n              // Log\\n              this.getLogger().info(\\\"ENS domain resolver:\\\" + \\\"\\\\n \\\" + this.etherscan[chainId] + \\\"/address/\\\" + resolver); // Check if resolver is EIP165\\n\\n              _context9.next = 25;\\n              return this.checkEip165(web3, resolver);\\n\\n            case 25:\\n              eip165 = _context9.sent;\\n\\n              if (!(eip165 == false)) {\\n                _context9.next = 28;\\n                break;\\n              }\\n\\n              throw new Error(\\\"ENS domain resolver do not conform to EIP165...\\\");\\n\\n            case 28:\\n              _context9.next = 30;\\n              return this.checkEip1577(web3, resolver);\\n\\n            case 30:\\n              eip1577 = _context9.sent;\\n\\n              if (!(eip1577 == false)) {\\n                _context9.next = 33;\\n                break;\\n              }\\n\\n              throw new Error(\\\"ENS domain resolver do not conform to EIP1577...\\\");\\n\\n            case 33:\\n              // retrieve content hash\\n              this.getLogger().info(\\\"Processing ENS domain content...\\\");\\n              abi = [{\\n                name: \\\"contenthash\\\",\\n                type: \\\"function\\\",\\n                inputs: [{\\n                  type: \\\"bytes32\\\"\\n                }]\\n              }];\\n              iface = new _windowOrGlobal[\\\"default\\\"].ethers.utils.Interface(abi);\\n              data = iface.functions.contenthash.encode([domainHash]);\\n              _context9.next = 39;\\n              return web3.call({\\n                to: resolver,\\n                data: data\\n              });\\n\\n            case 39:\\n              result = _context9.sent;\\n\\n              if (!(result == undefined || result == null || result === \\\"0x\\\")) {\\n                _context9.next = 42;\\n                break;\\n              }\\n\\n              return _context9.abrupt(\\\"return\\\", {\\n                content: null,\\n                protocol: null\\n              });\\n\\n            case 42:\\n              // decode bytes result\\n              content = _windowOrGlobal[\\\"default\\\"].ethers.utils.defaultAbiCoder.decode([\\\"bytes\\\"], result);\\n\\n              if (!(content == undefined || content == null || Array.isArray(content) === false || content[0] === \\\"0x\\\")) {\\n                _context9.next = 45;\\n                break;\\n              }\\n\\n              return _context9.abrupt(\\\"return\\\", {\\n                content: null,\\n                protocol: null\\n              });\\n\\n            case 45:\\n              // decode content hash\\n              _this$decodeContentha = this.decodeContenthash(content[0]), decoded = _this$decodeContentha.decoded, protocol = _this$decodeContentha.protocol;\\n              return _context9.abrupt(\\\"return\\\", {\\n                content: decoded,\\n                protocol: protocol\\n              });\\n\\n            case 47:\\n            case \\\"end\\\":\\n              return _context9.stop();\\n          }\\n        }\\n      }, _callee9, this);\\n    }));\\n\\n    return function (_x12, _x13) {\\n      return _ref9.apply(this, arguments);\\n    };\\n  }();\\n\\n  EnsLibrary.prototype.setContentHash = /*#__PURE__*/function () {\\n    var _ref10 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee10(domain, cid, web3, account) {\\n      var _yield$this$getEnable, domainHash, _yield$this$getRegist2, chainId, registry, resolver, eip165, eip1577, _this$encodeContentha, encoded, abi, iface, data, signer, tx;\\n\\n      return _regenerator[\\\"default\\\"].wrap(function _callee10$(_context10) {\\n        while (1) {\\n          switch (_context10.prev = _context10.next) {\\n            case 0:\\n              if (!(domain == undefined || domain == null)) {\\n                _context10.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined ENS domain...\\\");\\n\\n            case 2:\\n              if (!(cid == undefined || cid == null)) {\\n                _context10.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS identifier...\\\");\\n\\n            case 4:\\n              if (!(web3 == undefined || account == undefined)) {\\n                _context10.next = 10;\\n                break;\\n              }\\n\\n              _context10.next = 7;\\n              return this.getEnabledWeb3Provider();\\n\\n            case 7:\\n              _yield$this$getEnable = _context10.sent;\\n              web3 = _yield$this$getEnable.web3;\\n              account = _yield$this$getEnable.account;\\n\\n            case 10:\\n              // Resolve domain as namehash\\n              domainHash = _windowOrGlobal[\\\"default\\\"].ethers.utils.namehash(domain); // Fetch ens registry address\\n\\n              _context10.next = 13;\\n              return this.getRegistry(web3);\\n\\n            case 13:\\n              _yield$this$getRegist2 = _context10.sent;\\n              chainId = _yield$this$getRegist2.chainId;\\n              registry = _yield$this$getRegist2.registry;\\n              // Log\\n              this.getLogger().info(\\\"ENS registry:\\\" + \\\"\\\\n \\\" + this.etherscan[chainId] + \\\"/address/\\\" + registry); // Fetch resolver address\\n\\n              _context10.next = 19;\\n              return this.getResolver(web3, registry, domainHash);\\n\\n            case 19:\\n              resolver = _context10.sent;\\n\\n              if (!(resolver == null || /^0x0+$/.test(resolver) == true)) {\\n                _context10.next = 22;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined ENS resolver...\\\");\\n\\n            case 22:\\n              // Log\\n              this.getLogger().info(\\\"ENS domain resolver:\\\" + \\\"\\\\n \\\" + this.etherscan[chainId] + \\\"/address/\\\" + resolver); // Check if resolver is EIP165\\n\\n              _context10.next = 25;\\n              return this.checkEip165(web3, resolver);\\n\\n            case 25:\\n              eip165 = _context10.sent;\\n\\n              if (!(eip165 == false)) {\\n                _context10.next = 28;\\n                break;\\n              }\\n\\n              throw new Error(\\\"ENS resolver do not conform to EIP165...\\\");\\n\\n            case 28:\\n              _context10.next = 30;\\n              return this.checkEip1577(web3, resolver);\\n\\n            case 30:\\n              eip1577 = _context10.sent;\\n\\n              if (!(eip1577 == false)) {\\n                _context10.next = 33;\\n                break;\\n              }\\n\\n              throw new Error(\\\"ENS resolver do not conform to EIP1577...\\\");\\n\\n            case 33:\\n              // Encode cid\\n              _this$encodeContentha = this.encodeContenthash(\\\"ipfs://\\\" + cid), encoded = _this$encodeContentha.encoded; // Set Contenthash\\n\\n              this.getLogger().info(\\\"Processing ENS domain content...\\\");\\n              abi = [{\\n                name: \\\"setContenthash\\\",\\n                type: \\\"function\\\",\\n                inputs: [{\\n                  type: \\\"bytes32\\\"\\n                }, {\\n                  type: \\\"bytes\\\"\\n                }]\\n              }];\\n              iface = new _windowOrGlobal[\\\"default\\\"].ethers.utils.Interface(abi);\\n              data = iface.functions.setContenthash.encode([domainHash, encoded]);\\n              signer = web3.getSigner();\\n              _context10.next = 41;\\n              return signer.sendTransaction({\\n                to: resolver,\\n                data: data\\n              });\\n\\n            case 41:\\n              tx = _context10.sent;\\n              this.getLogger().info(\\\"Processing Transaction:\\\" + \\\"\\\\n \\\" + this.etherscan[chainId] + \\\"/tx/\\\" + tx.hash); // Wait for transaction completion\\n\\n              _context10.next = 45;\\n              return tx.wait();\\n\\n            case 45:\\n              this.getLogger().info(\\\"Processed ENS domain content...\\\");\\n              return _context10.abrupt(\\\"return\\\");\\n\\n            case 47:\\n            case \\\"end\\\":\\n              return _context10.stop();\\n          }\\n        }\\n      }, _callee10, this);\\n    }));\\n\\n    return function (_x14, _x15, _x16, _x17) {\\n      return _ref10.apply(this, arguments);\\n    };\\n  }();\\n\\n  module.exports = EnsLibrary;\\n})();\\n\\n},{\\\"@babel/runtime/helpers/asyncToGenerator\\\":2,\\\"@babel/runtime/helpers/interopRequireDefault\\\":3,\\\"@babel/runtime/regenerator\\\":4,\\\"cids\\\":9,\\\"content-hash\\\":34,\\\"window-or-global\\\":88}],90:[function(require,module,exports){\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nvar _regenerator = _interopRequireDefault(require(\\\"@babel/runtime/regenerator\\\"));\\n\\nvar _asyncToGenerator2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/asyncToGenerator\\\"));\\n\\nvar _cids = _interopRequireDefault(require(\\\"cids\\\"));\\n\\nvar _pako = _interopRequireDefault(require(\\\"pako\\\"));\\n\\nvar _windowOrGlobal = _interopRequireDefault(require(\\\"window-or-global\\\"));\\n\\nvar _ensLibrary = _interopRequireDefault(require(\\\"./ens-library\\\"));\\n\\nvar _ipfsLibrary = _interopRequireDefault(require(\\\"./ipfs-library\\\"));\\n\\nvar _ipfsLoader = _interopRequireDefault(require(\\\"./ipfs-loader\\\"));\\n\\nvar _ipfsUrl = _interopRequireDefault(require(\\\"./ipfs-url\\\"));\\n\\n/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-bundle.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Bundle\\n\\n\\\\*/\\n(function () {\\n  /*jslint node: true, browser: true*/\\n\\n  /*global $tw: false*/\\n  \\\"use strict\\\";\\n\\n  var cidAnalyser = \\\"https://cid.ipfs.io/#\\\";\\n  var name = \\\"ipfs-bundle\\\";\\n\\n  var IpfsBundle = function IpfsBundle() {\\n    this.once = false;\\n  };\\n\\n  IpfsBundle.prototype.getLogger = function () {\\n    return _windowOrGlobal[\\\"default\\\"].log.getLogger(name);\\n  };\\n\\n  IpfsBundle.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return;\\n    }\\n\\n    this.ipfsLoader = new _ipfsLoader[\\\"default\\\"](this);\\n    this.ensLibrary = new _ensLibrary[\\\"default\\\"](this.ipfsLoader);\\n    this.ipfsLibrary = new _ipfsLibrary[\\\"default\\\"](this);\\n    this.ipfsUrl = new _ipfsUrl[\\\"default\\\"](); // Init once\\n\\n    this.once = true;\\n  };\\n\\n  IpfsBundle.prototype.isJson = function (content) {\\n    return this.ipfsLoader.isJson(content);\\n  };\\n\\n  IpfsBundle.prototype.loadToBase64 = /*#__PURE__*/function () {\\n    var _ref = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee(url) {\\n      return _regenerator[\\\"default\\\"].wrap(function _callee$(_context) {\\n        while (1) {\\n          switch (_context.prev = _context.next) {\\n            case 0:\\n              return _context.abrupt(\\\"return\\\", this.ipfsLoader.loadToBase64(url));\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context.stop();\\n          }\\n        }\\n      }, _callee, this);\\n    }));\\n\\n    return function (_x) {\\n      return _ref.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsBundle.prototype.loadToUtf8 = /*#__PURE__*/function () {\\n    var _ref2 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee2(url) {\\n      return _regenerator[\\\"default\\\"].wrap(function _callee2$(_context2) {\\n        while (1) {\\n          switch (_context2.prev = _context2.next) {\\n            case 0:\\n              return _context2.abrupt(\\\"return\\\", this.ipfsLoader.loadToUtf8(url));\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context2.stop();\\n          }\\n        }\\n      }, _callee2, this);\\n    }));\\n\\n    return function (_x2) {\\n      return _ref2.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsBundle.prototype.decodeCid = function (pathname) {\\n    // Check\\n    if (pathname == undefined || pathname == null || pathname.trim() === \\\"\\\" || pathname.trim() === \\\"/\\\") {\\n      return {\\n        cid: null,\\n        ipnsIdentifier: null,\\n        protocol: null\\n      };\\n    }\\n\\n    var identifier = null;\\n    var protocol = null; // Parse\\n\\n    var members = pathname.trim().split(\\\"/\\\");\\n\\n    for (var i = 0; i < members.length; i++) {\\n      // Ignore\\n      if (members[i].trim() === \\\"\\\") {\\n        continue;\\n      } // First non empty member\\n\\n\\n      if (protocol == null) {\\n        protocol = members[i];\\n        continue;\\n      } // Second non empty member\\n\\n\\n      if (identifier == null) {\\n        identifier = members[i];\\n        break;\\n      } // Nothing to process\\n\\n\\n      break;\\n    } // Check\\n\\n\\n    if (protocol == null || identifier == null) {\\n      return {\\n        cid: null,\\n        ipnsIdentifier: null,\\n        protocol: null\\n      };\\n    } // Check protocol\\n\\n\\n    if (protocol !== \\\"ipfs\\\" && protocol !== \\\"ipns\\\") {\\n      return {\\n        cid: null,\\n        ipnsIdentifier: null,\\n        protocol: null\\n      };\\n    } // Check\\n\\n\\n    var cid = null;\\n    var ipnsIdentifier = null;\\n\\n    if (protocol === \\\"ipns\\\") {\\n      ipnsIdentifier = identifier;\\n    } else if (this.isCid(identifier)) {\\n      cid = identifier;\\n    } // All good\\n\\n\\n    return {\\n      cid: cid,\\n      ipnsIdentifier: ipnsIdentifier,\\n      protocol: protocol\\n    };\\n  };\\n\\n  IpfsBundle.prototype.isCid = function (cid) {\\n    try {\\n      var newCid = new _cids[\\\"default\\\"](cid);\\n      return _cids[\\\"default\\\"].isCID(newCid);\\n    } catch (error) {\\n      return false;\\n    }\\n  };\\n\\n  IpfsBundle.prototype.cidV1ToCidV0 = function (cidv1) {\\n    var cidv0 = new _cids[\\\"default\\\"](cidv1);\\n\\n    if (cidv0.codec !== \\\"dag-pb\\\") {\\n      throw new Error(\\\"This 'cid' is not 'dag-pb' encoded: \\\" + cidAnalyser + cidv0);\\n    }\\n\\n    if (cidv0.version === 1) {\\n      cidv0 = cidv0.toV0(); // Log\\n\\n      this.getLogger().info(\\\"Converted: \\\" + \\\"\\\\n 'cidv1' (Base32):\\\" + \\\"\\\\n  \\\" + cidAnalyser + cidv1 + \\\"\\\\n to 'cidv0' (Base58):\\\" + \\\"\\\\n  \\\" + cidAnalyser + cidv0);\\n    } else {\\n      // Log\\n      this.getLogger().info(\\\"'cidv0' (Base58):\\\" + \\\"\\\\n \\\" + cidAnalyser + cidv0);\\n    }\\n\\n    return cidv0.toString();\\n  };\\n\\n  IpfsBundle.prototype.cidV0ToCidV1 = function (cidv0) {\\n    var cidv1 = new _cids[\\\"default\\\"](cidv0);\\n\\n    if (cidv1.codec !== \\\"dag-pb\\\") {\\n      throw new Error(\\\"This 'cid' is not 'dag-pb' encoded: \\\" + cidAnalyser + cidv1);\\n    }\\n\\n    if (cidv1.version === 0) {\\n      cidv1 = cidv1.toV1();\\n      this.getLogger().info(\\\"Converted: \\\" + \\\"\\\\n 'cidv0' (Base58):\\\" + \\\"\\\\n  \\\" + cidAnalyser + cidv0 + \\\"\\\\n to 'cidv1' (Base32):\\\" + \\\"\\\\n  \\\" + cidAnalyser + cidv1);\\n    } else {\\n      // Log\\n      this.getLogger().info(\\\"'cidv1' (Base32): \\\" + \\\"\\\\n \\\" + cidAnalyser + cidv1);\\n    }\\n\\n    return cidv1.toString();\\n  };\\n\\n  IpfsBundle.prototype.Base64ToUint8Array = function (base64) {\\n    var raw = atob(base64);\\n    var ua = new Uint8Array(raw.length);\\n\\n    for (var i = 0; i < raw.length; i++) {\\n      ua[i] = raw.charCodeAt(i);\\n    }\\n\\n    return ua;\\n  };\\n\\n  IpfsBundle.prototype.Uint8ArrayToBase64 = function (uint8) {\\n    var CHUNK_SIZE = 0x8000; //arbitrary number\\n\\n    var index = 0;\\n    var length = uint8.length;\\n    var str = \\\"\\\";\\n    var slice;\\n\\n    while (index < length) {\\n      slice = uint8.subarray(index, Math.min(index + CHUNK_SIZE, length));\\n      str += String.fromCharCode.apply(null, slice);\\n      index += CHUNK_SIZE;\\n    }\\n\\n    return btoa(str);\\n  }; // String to uint array\\n\\n\\n  IpfsBundle.prototype.StringToUint8Array = function (string) {\\n    var escstr = encodeURIComponent(string);\\n    var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) {\\n      return String.fromCharCode(\\\"0x\\\" + p1);\\n    });\\n    var ua = new Uint8Array(binstr.length);\\n    Array.prototype.forEach.call(binstr, function (ch, i) {\\n      ua[i] = ch.charCodeAt(0);\\n    });\\n    return ua;\\n  }; // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\\n\\n  /*\\n   * utf.js - UTF-8 <=> UTF-16 convertion\\n   *\\n   * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\\n   * Version: 1.0\\n   * LastModified: Dec 25 1999\\n   * This library is free.  You can redistribute it and/or modify it.\\n   */\\n\\n\\n  IpfsBundle.prototype.Utf8ArrayToStr = function (array) {\\n    var c, char2, char3;\\n    var out = \\\"\\\";\\n    var len = array.length;\\n    var i = 0;\\n\\n    while (i < len) {\\n      c = array[i++];\\n\\n      switch (c >> 4) {\\n        case 0:\\n        case 1:\\n        case 2:\\n        case 3:\\n        case 4:\\n        case 5:\\n        case 6:\\n        case 7:\\n          // 0xxxxxxx\\n          out += String.fromCharCode(c);\\n          break;\\n\\n        case 12:\\n        case 13:\\n          // 110x xxxx   10xx xxxx\\n          char2 = array[i++];\\n          out += String.fromCharCode((c & 0x1f) << 6 | char2 & 0x3f);\\n          break;\\n\\n        case 14:\\n          // 1110 xxxx  10xx xxxx  10xx xxxx\\n          char2 = array[i++];\\n          char3 = array[i++];\\n          out += String.fromCharCode((c & 0x0f) << 12 | (char2 & 0x3f) << 6 | (char3 & 0x3f) << 0);\\n          break;\\n      }\\n    }\\n\\n    return out;\\n  };\\n\\n  module.exports = {\\n    IpfsBundle: IpfsBundle\\n  };\\n})();\\n\\n},{\\\"./ens-library\\\":89,\\\"./ipfs-library\\\":91,\\\"./ipfs-loader\\\":92,\\\"./ipfs-url\\\":93,\\\"@babel/runtime/helpers/asyncToGenerator\\\":2,\\\"@babel/runtime/helpers/interopRequireDefault\\\":3,\\\"@babel/runtime/regenerator\\\":4,\\\"cids\\\":9,\\\"pako\\\":65,\\\"window-or-global\\\":88}],91:[function(require,module,exports){\\n(function (Buffer){\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nvar _regenerator = _interopRequireDefault(require(\\\"@babel/runtime/regenerator\\\"));\\n\\nvar _asyncToGenerator2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/asyncToGenerator\\\"));\\n\\nvar _asyncIterator2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/asyncIterator\\\"));\\n\\nvar _ipfsProvider = require(\\\"ipfs-provider\\\");\\n\\nvar _windowOrGlobal = _interopRequireDefault(require(\\\"window-or-global\\\"));\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  \\\"use strict\\\";\\n\\n  var name = \\\"ipfs-library\\\";\\n  /*\\n   * https://github.com/ipfs/js-ipfs/tree/master/docs/core-api\\n   **/\\n\\n  var IpfsLibrary = function IpfsLibrary(ipfsBundle) {\\n    this.ipfsBundle = ipfsBundle;\\n    this.ipfsLoader = ipfsBundle.ipfsLoader;\\n  };\\n\\n  IpfsLibrary.prototype.getLogger = function () {\\n    return _windowOrGlobal[\\\"default\\\"].log.getLogger(name);\\n  };\\n\\n  IpfsLibrary.prototype.loadIpfsHttpClient = /*#__PURE__*/(0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee() {\\n    var self;\\n    return _regenerator[\\\"default\\\"].wrap(function _callee$(_context) {\\n      while (1) {\\n        switch (_context.prev = _context.next) {\\n          case 0:\\n            self = this;\\n\\n            if (!(typeof _windowOrGlobal[\\\"default\\\"].IpfsHttpClient === \\\"undefined\\\")) {\\n              _context.next = 13;\\n              break;\\n            }\\n\\n            _context.prev = 2;\\n            _context.next = 5;\\n            return this.ipfsLoader.loadIpfsHttpLibrary();\\n\\n          case 5:\\n            if (!(typeof _windowOrGlobal[\\\"default\\\"].IpfsHttpClient !== \\\"undefined\\\")) {\\n              _context.next = 7;\\n              break;\\n            }\\n\\n            return _context.abrupt(\\\"return\\\");\\n\\n          case 7:\\n            _context.next = 12;\\n            break;\\n\\n          case 9:\\n            _context.prev = 9;\\n            _context.t0 = _context[\\\"catch\\\"](2);\\n            self.getLogger().error(_context.t0);\\n\\n          case 12:\\n            throw new Error(\\\"Unavailable IPFS HTTP Client library...\\\");\\n\\n          case 13:\\n          case \\\"end\\\":\\n            return _context.stop();\\n        }\\n      }\\n    }, _callee, this, [[2, 9]]);\\n  })); // Default\\n\\n  IpfsLibrary.prototype.getDefaultIpfs = /*#__PURE__*/function () {\\n    var _ref2 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee2(apiUrl) {\\n      var _yield$this$getWindow, ipfs, provider, _yield$this$getHttpIp, _ipfs, _provider;\\n\\n      return _regenerator[\\\"default\\\"].wrap(function _callee2$(_context2) {\\n        while (1) {\\n          switch (_context2.prev = _context2.next) {\\n            case 0:\\n              _context2.prev = 0;\\n              _context2.next = 3;\\n              return this.getWindowIpfs();\\n\\n            case 3:\\n              _yield$this$getWindow = _context2.sent;\\n              ipfs = _yield$this$getWindow.ipfs;\\n              provider = _yield$this$getWindow.provider;\\n\\n              if (!(ipfs !== null)) {\\n                _context2.next = 8;\\n                break;\\n              }\\n\\n              return _context2.abrupt(\\\"return\\\", {\\n                ipfs: ipfs,\\n                provider: provider\\n              });\\n\\n            case 8:\\n              _context2.next = 12;\\n              break;\\n\\n            case 10:\\n              _context2.prev = 10;\\n              _context2.t0 = _context2[\\\"catch\\\"](0);\\n\\n            case 12:\\n              if (!(apiUrl == undefined || apiUrl == null || apiUrl.href === \\\"\\\")) {\\n                _context2.next = 14;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS API URL...\\\");\\n\\n            case 14:\\n              _context2.prev = 14;\\n              _context2.next = 17;\\n              return this.getHttpIpfs(apiUrl.href);\\n\\n            case 17:\\n              _yield$this$getHttpIp = _context2.sent;\\n              _ipfs = _yield$this$getHttpIp.ipfs;\\n              _provider = _yield$this$getHttpIp.provider;\\n\\n              if (!(_ipfs !== null)) {\\n                _context2.next = 22;\\n                break;\\n              }\\n\\n              return _context2.abrupt(\\\"return\\\", {\\n                ipfs: _ipfs,\\n                provider: _provider\\n              });\\n\\n            case 22:\\n              _context2.next = 26;\\n              break;\\n\\n            case 24:\\n              _context2.prev = 24;\\n              _context2.t1 = _context2[\\\"catch\\\"](14);\\n\\n            case 26:\\n              throw new Error(\\\"Unable to retrieve IPFS Companion and IPFS API URL...\\\");\\n\\n            case 27:\\n            case \\\"end\\\":\\n              return _context2.stop();\\n          }\\n        }\\n      }, _callee2, this, [[0, 10], [14, 24]]);\\n    }));\\n\\n    return function (_x) {\\n      return _ref2.apply(this, arguments);\\n    };\\n  }(); // IPFS companion\\n\\n\\n  IpfsLibrary.prototype.getWindowIpfs = /*#__PURE__*/(0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee3() {\\n    var self, windowIpfs, _yield$getIpfs, ipfs, provider;\\n\\n    return _regenerator[\\\"default\\\"].wrap(function _callee3$(_context3) {\\n      while (1) {\\n        switch (_context3.prev = _context3.next) {\\n          case 0:\\n            self = this;\\n            _context3.prev = 1;\\n            windowIpfs = _ipfsProvider.providers.windowIpfs;\\n            this.getLogger().info(\\\"Processing connection to IPFS Companion...\\\");\\n            _context3.next = 6;\\n            return (0, _ipfsProvider.getIpfs)({\\n              providers: [windowIpfs()]\\n            });\\n\\n          case 6:\\n            _yield$getIpfs = _context3.sent;\\n            ipfs = _yield$getIpfs.ipfs;\\n            provider = _yield$getIpfs.provider;\\n            return _context3.abrupt(\\\"return\\\", {\\n              ipfs: ipfs,\\n              provider: provider\\n            });\\n\\n          case 12:\\n            _context3.prev = 12;\\n            _context3.t0 = _context3[\\\"catch\\\"](1);\\n            self.getLogger().error(_context3.t0);\\n\\n          case 15:\\n            throw new Error(\\\"Unreachable IPFS Companion...\\\");\\n\\n          case 16:\\n          case \\\"end\\\":\\n            return _context3.stop();\\n        }\\n      }\\n    }, _callee3, this, [[1, 12]]);\\n  })); // ipfs-http-client\\n\\n  IpfsLibrary.prototype.getHttpIpfs = /*#__PURE__*/function () {\\n    var _ref4 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee4(url) {\\n      var httpClient, _yield$getIpfs2, ipfs, provider;\\n\\n      return _regenerator[\\\"default\\\"].wrap(function _callee4$(_context4) {\\n        while (1) {\\n          switch (_context4.prev = _context4.next) {\\n            case 0:\\n              if (!(url == undefined || url == null || url.href === \\\"\\\")) {\\n                _context4.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS API URL...\\\");\\n\\n            case 2:\\n              _context4.prev = 2;\\n\\n              if (!(typeof _windowOrGlobal[\\\"default\\\"].IpfsHttpClient === \\\"undefined\\\")) {\\n                _context4.next = 6;\\n                break;\\n              }\\n\\n              _context4.next = 6;\\n              return this.loadIpfsHttpClient();\\n\\n            case 6:\\n              // Instantiate client\\n              httpClient = _ipfsProvider.providers.httpClient;\\n              this.getLogger().info(\\\"Processing connection to IPFS API URL:\\\" + \\\"\\\\n \\\" + url);\\n              _context4.next = 10;\\n              return (0, _ipfsProvider.getIpfs)({\\n                providers: [httpClient({\\n                  timeout: \\\"2m\\\",\\n                  apiAddress: url.href\\n                })]\\n              });\\n\\n            case 10:\\n              _yield$getIpfs2 = _context4.sent;\\n              ipfs = _yield$getIpfs2.ipfs;\\n              provider = _yield$getIpfs2.provider;\\n              return _context4.abrupt(\\\"return\\\", {\\n                ipfs: ipfs,\\n                provider: provider + \\\", \\\" + url\\n              });\\n\\n            case 16:\\n              _context4.prev = 16;\\n              _context4.t0 = _context4[\\\"catch\\\"](2);\\n              this.getLogger().error(_context4.t0);\\n\\n            case 19:\\n              throw new Error(\\\"Unreachable IPFS API URL...\\\");\\n\\n            case 20:\\n            case \\\"end\\\":\\n              return _context4.stop();\\n          }\\n        }\\n      }, _callee4, this, [[2, 16]]);\\n    }));\\n\\n    return function (_x2) {\\n      return _ref4.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLibrary.prototype.add = /*#__PURE__*/function () {\\n    var _ref5 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee5(client, content) {\\n      var buffer, addSource, lastResult, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, added;\\n\\n      return _regenerator[\\\"default\\\"].wrap(function _callee5$(_context5) {\\n        while (1) {\\n          switch (_context5.prev = _context5.next) {\\n            case 0:\\n              if (!(client == undefined || client == null)) {\\n                _context5.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS provider...\\\");\\n\\n            case 2:\\n              if (!(content == undefined || content == null)) {\\n                _context5.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined content...\\\");\\n\\n            case 4:\\n              if (!client.enable) {\\n                _context5.next = 8;\\n                break;\\n              }\\n\\n              _context5.next = 7;\\n              return client.enable({\\n                commands: [\\\"add\\\"]\\n              });\\n\\n            case 7:\\n              client = _context5.sent;\\n\\n            case 8:\\n              if (!(client !== undefined && client.add !== undefined)) {\\n                _context5.next = 51;\\n                break;\\n              }\\n\\n              // Process\\n              buffer = Buffer.from(content);\\n              this.getLogger().info(\\\"Processing IPFS add...\\\"); // 1 - https://github.com/ipfs/go-ipfs/issues/5683\\n              // default chunker: \\\"size-262144\\\"\\n              // chunker: \\\"rabin-262144-524288-1048576\\\"\\n              // 2 - TODO: small content generates a wrong cid when cidVersion: 1 is set:\\n              // Not a 'dag-pb' but a 'raw' multicodec instead\\n              // We generate a V0 and convert it to a V1\\n              // https://github.com/xmaysonnave/tiddlywiki-ipfs/issues/14\\n\\n              _context5.next = 13;\\n              return client.add(buffer, {\\n                cidVersion: 0,\\n                hashAlg: \\\"sha2-256\\\",\\n                chunker: \\\"rabin-262144-524288-1048576\\\",\\n                pin: false\\n              });\\n\\n            case 13:\\n              addSource = _context5.sent;\\n              // https://gist.github.com/alanshaw/04b2ddc35a6fff25c040c011ac6acf26\\n              lastResult = null;\\n              _iteratorNormalCompletion = true;\\n              _didIteratorError = false;\\n              _context5.prev = 17;\\n              _iterator = (0, _asyncIterator2[\\\"default\\\"])(addSource);\\n\\n            case 19:\\n              _context5.next = 21;\\n              return _iterator.next();\\n\\n            case 21:\\n              _step = _context5.sent;\\n              _iteratorNormalCompletion = _step.done;\\n              _context5.next = 25;\\n              return _step.value;\\n\\n            case 25:\\n              _value = _context5.sent;\\n\\n              if (_iteratorNormalCompletion) {\\n                _context5.next = 32;\\n                break;\\n              }\\n\\n              added = _value;\\n              lastResult = added;\\n\\n            case 29:\\n              _iteratorNormalCompletion = true;\\n              _context5.next = 19;\\n              break;\\n\\n            case 32:\\n              _context5.next = 38;\\n              break;\\n\\n            case 34:\\n              _context5.prev = 34;\\n              _context5.t0 = _context5[\\\"catch\\\"](17);\\n              _didIteratorError = true;\\n              _iteratorError = _context5.t0;\\n\\n            case 38:\\n              _context5.prev = 38;\\n              _context5.prev = 39;\\n\\n              if (!(!_iteratorNormalCompletion && _iterator[\\\"return\\\"] != null)) {\\n                _context5.next = 43;\\n                break;\\n              }\\n\\n              _context5.next = 43;\\n              return _iterator[\\\"return\\\"]();\\n\\n            case 43:\\n              _context5.prev = 43;\\n\\n              if (!_didIteratorError) {\\n                _context5.next = 46;\\n                break;\\n              }\\n\\n              throw _iteratorError;\\n\\n            case 46:\\n              return _context5.finish(43);\\n\\n            case 47:\\n              return _context5.finish(38);\\n\\n            case 48:\\n              if (!(lastResult == null || lastResult.path == undefined || lastResult.path == null)) {\\n                _context5.next = 50;\\n                break;\\n              }\\n\\n              throw new Error(\\\"IPFS client returned an unknown result...\\\");\\n\\n            case 50:\\n              return _context5.abrupt(\\\"return\\\", {\\n                hash: this.ipfsBundle.cidV0ToCidV1(lastResult.path),\\n                size: lastResult.size\\n              });\\n\\n            case 51:\\n              throw new Error(\\\"Undefined IPFS command add...\\\");\\n\\n            case 52:\\n            case \\\"end\\\":\\n              return _context5.stop();\\n          }\\n        }\\n      }, _callee5, this, [[17, 34, 38, 48], [39,, 43, 47]]);\\n    }));\\n\\n    return function (_x3, _x4) {\\n      return _ref5.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLibrary.prototype.pin = /*#__PURE__*/function () {\\n    var _ref6 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee6(client, cid) {\\n      var result;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee6$(_context6) {\\n        while (1) {\\n          switch (_context6.prev = _context6.next) {\\n            case 0:\\n              if (!(client == undefined || client == null)) {\\n                _context6.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS provider...\\\");\\n\\n            case 2:\\n              if (!(cid == undefined || cid == null || cid.trim() === \\\"\\\")) {\\n                _context6.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS identifier...\\\");\\n\\n            case 4:\\n              if (!client.enable) {\\n                _context6.next = 8;\\n                break;\\n              }\\n\\n              _context6.next = 7;\\n              return client.enable({\\n                commands: [\\\"pin\\\"]\\n              });\\n\\n            case 7:\\n              client = _context6.sent;\\n\\n            case 8:\\n              if (!(client !== undefined && client.pin !== undefined && client.pin.add !== undefined)) {\\n                _context6.next = 16;\\n                break;\\n              }\\n\\n              this.getLogger().info(\\\"Processing IPFS pin add...\\\");\\n              _context6.next = 12;\\n              return client.pin.add(cid.trim());\\n\\n            case 12:\\n              result = _context6.sent;\\n\\n              if (!(result == undefined || result == null)) {\\n                _context6.next = 15;\\n                break;\\n              }\\n\\n              throw new Error(\\\"IPFS client returned an unknown result...\\\");\\n\\n            case 15:\\n              return _context6.abrupt(\\\"return\\\", result);\\n\\n            case 16:\\n              throw new Error(\\\"Undefined IPFS pin add...\\\");\\n\\n            case 17:\\n            case \\\"end\\\":\\n              return _context6.stop();\\n          }\\n        }\\n      }, _callee6, this);\\n    }));\\n\\n    return function (_x5, _x6) {\\n      return _ref6.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLibrary.prototype.unpin = /*#__PURE__*/function () {\\n    var _ref7 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee7(client, cid) {\\n      var result;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee7$(_context7) {\\n        while (1) {\\n          switch (_context7.prev = _context7.next) {\\n            case 0:\\n              if (!(client == undefined || client == null)) {\\n                _context7.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS provider...\\\");\\n\\n            case 2:\\n              if (!(cid == undefined || cid == null || cid.trim() === \\\"\\\")) {\\n                _context7.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS identifier...\\\");\\n\\n            case 4:\\n              if (!client.enable) {\\n                _context7.next = 8;\\n                break;\\n              }\\n\\n              _context7.next = 7;\\n              return client.enable({\\n                commands: [\\\"pin\\\"]\\n              });\\n\\n            case 7:\\n              client = _context7.sent;\\n\\n            case 8:\\n              if (!(client !== undefined && client.pin !== undefined && client.pin.rm !== undefined)) {\\n                _context7.next = 16;\\n                break;\\n              }\\n\\n              this.getLogger().info(\\\"Processing IPFS pin rm...\\\");\\n              _context7.next = 12;\\n              return client.pin.rm(cid.trim());\\n\\n            case 12:\\n              result = _context7.sent;\\n\\n              if (!(result == undefined || result == null)) {\\n                _context7.next = 15;\\n                break;\\n              }\\n\\n              throw new Error(\\\"IPFS client returned an unknown result...\\\");\\n\\n            case 15:\\n              return _context7.abrupt(\\\"return\\\", result);\\n\\n            case 16:\\n              throw new Error(\\\"Undefined IPFS pin rm\\\");\\n\\n            case 17:\\n            case \\\"end\\\":\\n              return _context7.stop();\\n          }\\n        }\\n      }, _callee7, this);\\n    }));\\n\\n    return function (_x7, _x8) {\\n      return _ref7.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLibrary.prototype.publish = /*#__PURE__*/function () {\\n    var _ref8 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee8(client, ipnsName, cid) {\\n      var result;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee8$(_context8) {\\n        while (1) {\\n          switch (_context8.prev = _context8.next) {\\n            case 0:\\n              if (!(client == undefined || client == null)) {\\n                _context8.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS provider...\\\");\\n\\n            case 2:\\n              if (!(ipnsName == undefined || ipnsName == null || ipnsName.trim() === \\\"\\\")) {\\n                _context8.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPNS name...\\\");\\n\\n            case 4:\\n              if (!(cid == undefined || cid == null || cid.trim() === \\\"\\\")) {\\n                _context8.next = 6;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPNS identifier...\\\");\\n\\n            case 6:\\n              if (!client.enable) {\\n                _context8.next = 10;\\n                break;\\n              }\\n\\n              _context8.next = 9;\\n              return client.enable({\\n                commands: [\\\"name\\\"]\\n              });\\n\\n            case 9:\\n              client = _context8.sent;\\n\\n            case 10:\\n              if (!(client !== undefined && client.name !== undefined && client.name.publish !== undefined)) {\\n                _context8.next = 18;\\n                break;\\n              }\\n\\n              this.getLogger().info(\\\"Processing IPNS name publish...\\\");\\n              _context8.next = 14;\\n              return client.name.publish(cid, {\\n                resolve: true,\\n                key: ipnsName.trim(),\\n                allowOffline: false\\n              });\\n\\n            case 14:\\n              result = _context8.sent;\\n\\n              if (!(result == undefined || result == null)) {\\n                _context8.next = 17;\\n                break;\\n              }\\n\\n              throw new Error(\\\"IPFS client returned an unknown result...\\\");\\n\\n            case 17:\\n              return _context8.abrupt(\\\"return\\\", {\\n                name: result.name,\\n                value: result.value\\n              });\\n\\n            case 18:\\n              throw new Error(\\\"Undefined IPNS name publish...\\\");\\n\\n            case 19:\\n            case \\\"end\\\":\\n              return _context8.stop();\\n          }\\n        }\\n      }, _callee8, this);\\n    }));\\n\\n    return function (_x9, _x10, _x11) {\\n      return _ref8.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLibrary.prototype.resolve = /*#__PURE__*/function () {\\n    var _ref9 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee9(client, id) {\\n      var resolvedSource, lastResult, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, resolved;\\n\\n      return _regenerator[\\\"default\\\"].wrap(function _callee9$(_context9) {\\n        while (1) {\\n          switch (_context9.prev = _context9.next) {\\n            case 0:\\n              if (!(client == undefined || client == null)) {\\n                _context9.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS provider...\\\");\\n\\n            case 2:\\n              if (!(id == undefined || id == null || id.trim() === \\\"\\\")) {\\n                _context9.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPNS key...\\\");\\n\\n            case 4:\\n              if (!client.enable) {\\n                _context9.next = 8;\\n                break;\\n              }\\n\\n              _context9.next = 7;\\n              return client.enable({\\n                commands: [\\\"name\\\"]\\n              });\\n\\n            case 7:\\n              client = _context9.sent;\\n\\n            case 8:\\n              if (!(client !== undefined && client.name !== undefined && client.name.resolve !== undefined)) {\\n                _context9.next = 50;\\n                break;\\n              }\\n\\n              this.getLogger().info(\\\"Processing IPNS name resolve...\\\");\\n              _context9.next = 12;\\n              return client.name.resolve(id.trim(), {\\n                recursive: true,\\n                nocache: false\\n              });\\n\\n            case 12:\\n              resolvedSource = _context9.sent;\\n              // https://gist.github.com/alanshaw/04b2ddc35a6fff25c040c011ac6acf26\\n              lastResult = null;\\n              _iteratorNormalCompletion2 = true;\\n              _didIteratorError2 = false;\\n              _context9.prev = 16;\\n              _iterator2 = (0, _asyncIterator2[\\\"default\\\"])(resolvedSource);\\n\\n            case 18:\\n              _context9.next = 20;\\n              return _iterator2.next();\\n\\n            case 20:\\n              _step2 = _context9.sent;\\n              _iteratorNormalCompletion2 = _step2.done;\\n              _context9.next = 24;\\n              return _step2.value;\\n\\n            case 24:\\n              _value2 = _context9.sent;\\n\\n              if (_iteratorNormalCompletion2) {\\n                _context9.next = 31;\\n                break;\\n              }\\n\\n              resolved = _value2;\\n              lastResult = resolved;\\n\\n            case 28:\\n              _iteratorNormalCompletion2 = true;\\n              _context9.next = 18;\\n              break;\\n\\n            case 31:\\n              _context9.next = 37;\\n              break;\\n\\n            case 33:\\n              _context9.prev = 33;\\n              _context9.t0 = _context9[\\\"catch\\\"](16);\\n              _didIteratorError2 = true;\\n              _iteratorError2 = _context9.t0;\\n\\n            case 37:\\n              _context9.prev = 37;\\n              _context9.prev = 38;\\n\\n              if (!(!_iteratorNormalCompletion2 && _iterator2[\\\"return\\\"] != null)) {\\n                _context9.next = 42;\\n                break;\\n              }\\n\\n              _context9.next = 42;\\n              return _iterator2[\\\"return\\\"]();\\n\\n            case 42:\\n              _context9.prev = 42;\\n\\n              if (!_didIteratorError2) {\\n                _context9.next = 45;\\n                break;\\n              }\\n\\n              throw _iteratorError2;\\n\\n            case 45:\\n              return _context9.finish(42);\\n\\n            case 46:\\n              return _context9.finish(37);\\n\\n            case 47:\\n              if (!(lastResult == null || lastResult == undefined || lastResult.trim() === \\\"\\\")) {\\n                _context9.next = 49;\\n                break;\\n              }\\n\\n              throw new Error(\\\"IPFS client returned an unknown result...\\\");\\n\\n            case 49:\\n              return _context9.abrupt(\\\"return\\\", lastResult);\\n\\n            case 50:\\n              throw new Error(\\\"Undefined IPNS name resolve...\\\");\\n\\n            case 51:\\n            case \\\"end\\\":\\n              return _context9.stop();\\n          }\\n        }\\n      }, _callee9, this, [[16, 33, 37, 47], [38,, 42, 46]]);\\n    }));\\n\\n    return function (_x12, _x13) {\\n      return _ref9.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLibrary.prototype.getKeys = /*#__PURE__*/function () {\\n    var _ref10 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee10(client) {\\n      var result;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee10$(_context10) {\\n        while (1) {\\n          switch (_context10.prev = _context10.next) {\\n            case 0:\\n              if (!(client == undefined || client == null)) {\\n                _context10.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS provider...\\\");\\n\\n            case 2:\\n              if (!client.enable) {\\n                _context10.next = 6;\\n                break;\\n              }\\n\\n              _context10.next = 5;\\n              return client.enable({\\n                commands: [\\\"key\\\"]\\n              });\\n\\n            case 5:\\n              client = _context10.sent;\\n\\n            case 6:\\n              if (!(client !== undefined && client.key !== undefined && client.key.list !== undefined)) {\\n                _context10.next = 14;\\n                break;\\n              }\\n\\n              this.getLogger().info(\\\"Processing IPNS key list...\\\");\\n              _context10.next = 10;\\n              return client.key.list();\\n\\n            case 10:\\n              result = _context10.sent;\\n\\n              if (!(result == undefined || result == null || Array.isArray(result) == false)) {\\n                _context10.next = 13;\\n                break;\\n              }\\n\\n              throw new Error(\\\"IPFS client returned an unknown result...\\\");\\n\\n            case 13:\\n              return _context10.abrupt(\\\"return\\\", result);\\n\\n            case 14:\\n              throw new Error(\\\"Undefined IPNS key list...\\\");\\n\\n            case 15:\\n            case \\\"end\\\":\\n              return _context10.stop();\\n          }\\n        }\\n      }, _callee10, this);\\n    }));\\n\\n    return function (_x14) {\\n      return _ref10.apply(this, arguments);\\n    };\\n  }(); // Only rsa is supported yet...\\n  // https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/KEY.md#keygen\\n  // https://github.com/libp2p/js-libp2p-crypto/issues/145\\n\\n\\n  IpfsLibrary.prototype.genKey = /*#__PURE__*/function () {\\n    var _ref11 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee11(client, ipnsName) {\\n      var key;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee11$(_context11) {\\n        while (1) {\\n          switch (_context11.prev = _context11.next) {\\n            case 0:\\n              if (!(client == undefined || client == null)) {\\n                _context11.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS provider...\\\");\\n\\n            case 2:\\n              if (!(ipnsName == undefined || ipnsName == null || ipnsName.trim() === \\\"\\\")) {\\n                _context11.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPNS name...\\\");\\n\\n            case 4:\\n              if (!client.enable) {\\n                _context11.next = 8;\\n                break;\\n              }\\n\\n              _context11.next = 7;\\n              return client.enable({\\n                commands: [\\\"key\\\"]\\n              });\\n\\n            case 7:\\n              client = _context11.sent;\\n\\n            case 8:\\n              if (!(client !== undefined && client.key !== undefined && client.key.gen !== undefined)) {\\n                _context11.next = 16;\\n                break;\\n              }\\n\\n              this.getLogger().info(\\\"Processing IPNS key gen...\\\");\\n              _context11.next = 12;\\n              return client.key.gen(ipnsName.trim(), {\\n                type: \\\"rsa\\\",\\n                size: 2048\\n              });\\n\\n            case 12:\\n              key = _context11.sent;\\n\\n              if (!(key == undefined || key == null || key.id == undefined || key.id == null)) {\\n                _context11.next = 15;\\n                break;\\n              }\\n\\n              throw new Error(\\\"IPFS client returned an unknown result...\\\");\\n\\n            case 15:\\n              return _context11.abrupt(\\\"return\\\", key.id);\\n\\n            case 16:\\n              throw new Error(\\\"Undefined IPNS key gen...\\\");\\n\\n            case 17:\\n            case \\\"end\\\":\\n              return _context11.stop();\\n          }\\n        }\\n      }, _callee11, this);\\n    }));\\n\\n    return function (_x15, _x16) {\\n      return _ref11.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLibrary.prototype.rmKey = /*#__PURE__*/function () {\\n    var _ref12 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee12(client, ipnsName) {\\n      var key;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee12$(_context12) {\\n        while (1) {\\n          switch (_context12.prev = _context12.next) {\\n            case 0:\\n              if (!(client == undefined || client == null)) {\\n                _context12.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS provider...\\\");\\n\\n            case 2:\\n              if (!(ipnsName == undefined || ipnsName == null || ipnsName.trim() === \\\"\\\")) {\\n                _context12.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPNS name...\\\");\\n\\n            case 4:\\n              if (!client.enable) {\\n                _context12.next = 8;\\n                break;\\n              }\\n\\n              _context12.next = 7;\\n              return client.enable({\\n                commands: [\\\"key\\\"]\\n              });\\n\\n            case 7:\\n              client = _context12.sent;\\n\\n            case 8:\\n              if (!(client !== undefined && client.key !== undefined && client.key.rm !== undefined)) {\\n                _context12.next = 16;\\n                break;\\n              }\\n\\n              this.getLogger().info(\\\"Processing IPNS key rm...\\\");\\n              _context12.next = 12;\\n              return client.key.rm(ipnsName.trim());\\n\\n            case 12:\\n              key = _context12.sent;\\n\\n              if (!(key == undefined || key == null || key.id == undefined || key.id == null)) {\\n                _context12.next = 15;\\n                break;\\n              }\\n\\n              throw new Error(\\\"IPFS client returned an unknown result...\\\");\\n\\n            case 15:\\n              return _context12.abrupt(\\\"return\\\", key.id);\\n\\n            case 16:\\n              throw new Error(\\\"Undefined IPNS key rm...\\\");\\n\\n            case 17:\\n            case \\\"end\\\":\\n              return _context12.stop();\\n          }\\n        }\\n      }, _callee12, this);\\n    }));\\n\\n    return function (_x17, _x18) {\\n      return _ref12.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLibrary.prototype.renameKey = /*#__PURE__*/function () {\\n    var _ref13 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee13(client, oldIpnsName, newIpnsName) {\\n      var key, id, was, now, overwrite;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee13$(_context13) {\\n        while (1) {\\n          switch (_context13.prev = _context13.next) {\\n            case 0:\\n              if (!(client == undefined || client == null)) {\\n                _context13.next = 2;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPFS provider...\\\");\\n\\n            case 2:\\n              if (!(oldIpnsName == undefined || oldIpnsName == null || oldIpnsName.trim() === \\\"\\\")) {\\n                _context13.next = 4;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPNS old name...\\\");\\n\\n            case 4:\\n              if (!(newIpnsName == undefined || newIpnsName == null || newIpnsName.trim() === \\\"\\\")) {\\n                _context13.next = 6;\\n                break;\\n              }\\n\\n              throw new Error(\\\"Undefined IPNS nem name...\\\");\\n\\n            case 6:\\n              if (!client.enable) {\\n                _context13.next = 10;\\n                break;\\n              }\\n\\n              _context13.next = 9;\\n              return client.enable({\\n                commands: [\\\"key\\\"]\\n              });\\n\\n            case 9:\\n              client = _context13.sent;\\n\\n            case 10:\\n              if (!(client !== undefined && client.key !== undefined && client.key.rename !== undefined)) {\\n                _context13.next = 26;\\n                break;\\n              }\\n\\n              this.getLogger().info(\\\"Processing IPNS key rename...\\\");\\n              _context13.next = 14;\\n              return client.key.rename(oldIpnsName.trim(), newIpnsName.trim());\\n\\n            case 14:\\n              key = _context13.sent;\\n\\n              if (!(key == undefined || key == null)) {\\n                _context13.next = 17;\\n                break;\\n              }\\n\\n              throw new Error(\\\"IPFS client returned an unknown result...\\\");\\n\\n            case 17:\\n              id = null;\\n\\n              if (key.id !== undefined && key.id !== null) {\\n                id = key.id;\\n              }\\n\\n              was = null;\\n\\n              if (key.was !== undefined && key.was !== null) {\\n                was = key.was;\\n              }\\n\\n              now = null;\\n\\n              if (key.now !== undefined && key.now !== null) {\\n                now = key.now;\\n              }\\n\\n              overwrite = null;\\n\\n              if (key.overwrite !== undefined && key.overwrite !== null) {\\n                overwrite = key.overwrite;\\n              }\\n\\n              return _context13.abrupt(\\\"return\\\", {\\n                id: id,\\n                was: was,\\n                now: now,\\n                overwrite: overwrite\\n              });\\n\\n            case 26:\\n              throw new Error(\\\"Undefined IPNS key rename...\\\");\\n\\n            case 27:\\n            case \\\"end\\\":\\n              return _context13.stop();\\n          }\\n        }\\n      }, _callee13, this);\\n    }));\\n\\n    return function (_x19, _x20, _x21) {\\n      return _ref13.apply(this, arguments);\\n    };\\n  }();\\n\\n  module.exports = IpfsLibrary;\\n})();\\n\\n}).call(this,require(\\\"buffer\\\").Buffer)\\n},{\\\"@babel/runtime/helpers/asyncIterator\\\":1,\\\"@babel/runtime/helpers/asyncToGenerator\\\":2,\\\"@babel/runtime/helpers/interopRequireDefault\\\":3,\\\"@babel/runtime/regenerator\\\":4,\\\"buffer\\\":7,\\\"ipfs-provider\\\":40,\\\"window-or-global\\\":88}],92:[function(require,module,exports){\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nvar _regenerator = _interopRequireDefault(require(\\\"@babel/runtime/regenerator\\\"));\\n\\nvar _asyncToGenerator2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/asyncToGenerator\\\"));\\n\\nvar _windowOrGlobal = _interopRequireDefault(require(\\\"window-or-global\\\"));\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  \\\"use strict\\\";\\n\\n  var name = \\\"ipfs-loader\\\";\\n  var eruda = \\\"https://cdn.jsdelivr.net/npm/eruda@2.3.3/eruda.min.js\\\";\\n  var eruda_sri = \\\"sha384-O4NQOgwNPEet1/xZmB7hYYb/vMdpWyVJcqL+47zpRWuXtRlhwnEoNM/w3/C3HCoP\\\";\\n  var ethers = \\\"https://cdn.jsdelivr.net/npm/ethers@4.0.47/dist/ethers.min.js\\\";\\n  var ethers_sri = \\\"sha384-Gqf9kLa8S94/ZNsQCadoW0KeT6tg+fapxds7gOiSL72KeOtfgTOmHvJENrQljse5\\\";\\n  var ipfs_http_client = \\\"https://cdn.jsdelivr.net/npm/ipfs-http-client@44.0.3/dist/index.min.js\\\";\\n  var ipfs_http_client_sri = \\\"sha384-xdAnH1MjCW7O7L2RyKVCGt9ODi4oqT/XUT4mFqctEW438NrZuqIJD68cFPx0VZb/\\\";\\n\\n  var IpfsLoader = function IpfsLoader(ipfsBundle) {\\n    this.ipfsBundle = ipfsBundle;\\n  };\\n\\n  IpfsLoader.prototype.getLogger = function () {\\n    return _windowOrGlobal[\\\"default\\\"].log.getLogger(name);\\n  }; // https://www.srihash.org/\\n  // https://github.com/liriliri/eruda\\n\\n\\n  IpfsLoader.prototype.loadErudaLibrary = /*#__PURE__*/(0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee() {\\n    return _regenerator[\\\"default\\\"].wrap(function _callee$(_context) {\\n      while (1) {\\n        switch (_context.prev = _context.next) {\\n          case 0:\\n            if (!(typeof _windowOrGlobal[\\\"default\\\"].eruda === \\\"undefined\\\")) {\\n              _context.next = 4;\\n              break;\\n            }\\n\\n            _context.next = 3;\\n            return this.loadLibrary(\\\"ErudaLibrary\\\", eruda, eruda_sri, true);\\n\\n          case 3:\\n            if (typeof _windowOrGlobal[\\\"default\\\"].eruda !== \\\"undefined\\\") {\\n              this.getLogger().info(\\\"Loaded ErudaLibrary:\\\" + \\\"\\\\n \\\" + eruda);\\n            }\\n\\n          case 4:\\n          case \\\"end\\\":\\n            return _context.stop();\\n        }\\n      }\\n    }, _callee, this);\\n  })); // https://www.srihash.org/\\n  // https://github.com/ethers-io/ethers.js/\\n\\n  IpfsLoader.prototype.loadEtherJsLibrary = /*#__PURE__*/(0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee2() {\\n    return _regenerator[\\\"default\\\"].wrap(function _callee2$(_context2) {\\n      while (1) {\\n        switch (_context2.prev = _context2.next) {\\n          case 0:\\n            if (!(typeof _windowOrGlobal[\\\"default\\\"].ethers === \\\"undefined\\\")) {\\n              _context2.next = 4;\\n              break;\\n            }\\n\\n            _context2.next = 3;\\n            return this.loadLibrary(\\\"EtherJsLibrary\\\", ethers, ethers_sri, true);\\n\\n          case 3:\\n            if (typeof _windowOrGlobal[\\\"default\\\"].ethers !== \\\"undefined\\\") {\\n              this.getLogger().info(\\\"Loaded EtherJsLibrary:\\\" + \\\"\\\\n \\\" + ethers);\\n            }\\n\\n          case 4:\\n          case \\\"end\\\":\\n            return _context2.stop();\\n        }\\n      }\\n    }, _callee2, this);\\n  })); // https://www.srihash.org/\\n  // https://github.com/ipfs/js-ipfs-http-client\\n\\n  IpfsLoader.prototype.loadIpfsHttpLibrary = /*#__PURE__*/(0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee3() {\\n    return _regenerator[\\\"default\\\"].wrap(function _callee3$(_context3) {\\n      while (1) {\\n        switch (_context3.prev = _context3.next) {\\n          case 0:\\n            if (!(typeof _windowOrGlobal[\\\"default\\\"].IpfsHttpClient === \\\"undefined\\\")) {\\n              _context3.next = 4;\\n              break;\\n            }\\n\\n            _context3.next = 3;\\n            return this.loadLibrary(\\\"IpfsHttpLibrary\\\", ipfs_http_client, ipfs_http_client_sri, true);\\n\\n          case 3:\\n            this.getLogger().info(\\\"Loaded IpfsHttpLibrary:\\\" + \\\"\\\\n \\\" + ipfs_http_client);\\n\\n          case 4:\\n          case \\\"end\\\":\\n            return _context3.stop();\\n        }\\n      }\\n    }, _callee3, this);\\n  })); // https://gist.github.com/ebidel/3201b36f59f26525eb606663f7b487d0\\n\\n  IpfsLoader.prototype.supportDynamicImport = function () {\\n    try {\\n      new Function('import(\\\"\\\")');\\n      return true;\\n    } catch (error) {\\n      return false;\\n    }\\n  }; // https://observablehq.com/@bryangingechen/dynamic-import-polyfill\\n\\n\\n  IpfsLoader.prototype.loadLibrary = /*#__PURE__*/function () {\\n    var _ref4 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee4(id, url, sri, asModule) {\\n      var _this = this;\\n\\n      var self;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee4$(_context4) {\\n        while (1) {\\n          switch (_context4.prev = _context4.next) {\\n            case 0:\\n              if (!this.supportDynamicImport()) {\\n                _context4.next = 7;\\n                break;\\n              }\\n\\n              _context4.prev = 1;\\n              return _context4.abrupt(\\\"return\\\", new Function(\\\"return import(\\\\\\\"\\\".concat(url, \\\"\\\\\\\")\\\"))());\\n\\n            case 5:\\n              _context4.prev = 5;\\n              _context4.t0 = _context4[\\\"catch\\\"](1);\\n\\n            case 7:\\n              // Fallback\\n              self = this;\\n              return _context4.abrupt(\\\"return\\\", new Promise(function (resolve, reject) {\\n                // Process\\n                var script = _windowOrGlobal[\\\"default\\\"].document.createElement(\\\"script\\\"); // Functions\\n\\n\\n                var cleanup = function cleanup() {\\n                  try {\\n                    delete _windowOrGlobal[\\\"default\\\"][id];\\n                    script.onerror = null;\\n                    script.onload = null;\\n                    script.remove();\\n                    URL.revokeObjectURL(script.src);\\n                    script.src = \\\"\\\";\\n                  } catch (error) {\\n                    _this.getLogger().error(error);\\n                  }\\n                };\\n\\n                script.onload = function () {\\n                  if (asModule) {\\n                    self.getLogger().info(\\\"Loaded Module:\\\" + \\\"\\\\n \\\" + url);\\n                  } else {\\n                    self.getLogger().info(\\\"Loaded Script:\\\" + \\\"\\\\n \\\" + url);\\n                  }\\n\\n                  resolve(_windowOrGlobal[\\\"default\\\"][id]);\\n                  cleanup();\\n                };\\n\\n                script.onerror = function () {\\n                  reject(new Error(\\\"Failed to load: \\\" + url));\\n                  cleanup();\\n                }; // Attributes\\n\\n\\n                if (asModule) {\\n                  script.type = \\\"module\\\";\\n                } else {\\n                  script.type = \\\"text/javascript\\\";\\n                }\\n\\n                script.id = id;\\n                script.async = false;\\n                script.defer = \\\"defer\\\";\\n\\n                if (sri) {\\n                  script.integrity = sri;\\n                }\\n\\n                script.crossOrigin = \\\"anonymous\\\"; // URL\\n\\n                script.src = url; // Load\\n\\n                _windowOrGlobal[\\\"default\\\"].document.head.appendChild(script);\\n              }));\\n\\n            case 9:\\n            case \\\"end\\\":\\n              return _context4.stop();\\n          }\\n        }\\n      }, _callee4, this, [[1, 5]]);\\n    }));\\n\\n    return function (_x, _x2, _x3, _x4) {\\n      return _ref4.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLoader.prototype.isJson = function (content) {\\n    if (content !== undefined && content !== null && typeof content === \\\"string\\\") {\\n      try {\\n        JSON.parse(content);\\n        return true;\\n      } catch (error) {// Ignore\\n      }\\n    }\\n\\n    return false;\\n  };\\n\\n  IpfsLoader.prototype.httpGetToUint8Array = /*#__PURE__*/function () {\\n    var _ref5 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee5(url) {\\n      var self;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee5$(_context5) {\\n        while (1) {\\n          switch (_context5.prev = _context5.next) {\\n            case 0:\\n              self = this;\\n              _context5.next = 3;\\n              return new Promise(function (resolve, reject) {\\n                var xhr = new XMLHttpRequest();\\n                xhr.responseType = \\\"arraybuffer\\\";\\n\\n                xhr.onreadystatechange = function () {\\n                  if (xhr.readyState == 4 && xhr.status !== 0) {\\n                    if (xhr.status >= 300) {\\n                      reject(new Error($tw.language.getString(\\\"NetworkError/XMLHttpRequest\\\")));\\n                      return;\\n                    }\\n\\n                    try {\\n                      var array = new Uint8Array(this.response);\\n                      self.getLogger().info(\\\"[\\\" + xhr.status + \\\"] Loaded:\\\" + \\\"\\\\n \\\" + url);\\n                      resolve(array);\\n                    } catch (error) {\\n                      reject(error);\\n                    }\\n                  }\\n                };\\n\\n                xhr.onerror = function () {\\n                  reject(new Error($tw.language.getString(\\\"NetworkError/XMLHttpRequest\\\")));\\n                };\\n\\n                try {\\n                  xhr.open(\\\"get\\\", url, true);\\n                  xhr.send();\\n                } catch (error) {\\n                  reject(error);\\n                }\\n              });\\n\\n            case 3:\\n              return _context5.abrupt(\\\"return\\\", _context5.sent);\\n\\n            case 4:\\n            case \\\"end\\\":\\n              return _context5.stop();\\n          }\\n        }\\n      }, _callee5, this);\\n    }));\\n\\n    return function (_x5) {\\n      return _ref5.apply(this, arguments);\\n    };\\n  }();\\n  /*\\n   * Load to Base64\\n   */\\n\\n\\n  IpfsLoader.prototype.loadToBase64 = /*#__PURE__*/function () {\\n    var _ref6 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee6(url) {\\n      var array, decrypted, data;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee6$(_context6) {\\n        while (1) {\\n          switch (_context6.prev = _context6.next) {\\n            case 0:\\n              _context6.next = 2;\\n              return this.httpGetToUint8Array(url);\\n\\n            case 2:\\n              array = _context6.sent;\\n\\n              if (!(array.length == 0)) {\\n                _context6.next = 5;\\n                break;\\n              }\\n\\n              return _context6.abrupt(\\\"return\\\", {\\n                data: \\\"\\\",\\n                decrypted: false\\n              });\\n\\n            case 5:\\n              if (!this.isUtf8ArrayEncrypted(array)) {\\n                _context6.next = 10;\\n                break;\\n              }\\n\\n              _context6.next = 8;\\n              return this.decryptUint8ArrayToBase64(array);\\n\\n            case 8:\\n              decrypted = _context6.sent;\\n              return _context6.abrupt(\\\"return\\\", {\\n                data: decrypted,\\n                decrypted: true\\n              });\\n\\n            case 10:\\n              data = this.ipfsBundle.Uint8ArrayToBase64(array);\\n              return _context6.abrupt(\\\"return\\\", {\\n                data: data,\\n                decrypted: false\\n              });\\n\\n            case 12:\\n            case \\\"end\\\":\\n              return _context6.stop();\\n          }\\n        }\\n      }, _callee6, this);\\n    }));\\n\\n    return function (_x6) {\\n      return _ref6.apply(this, arguments);\\n    };\\n  }();\\n  /*\\n   * Load to UTF-8\\n   */\\n\\n\\n  IpfsLoader.prototype.loadToUtf8 = /*#__PURE__*/function () {\\n    var _ref7 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee7(url) {\\n      var array;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee7$(_context7) {\\n        while (1) {\\n          switch (_context7.prev = _context7.next) {\\n            case 0:\\n              _context7.next = 2;\\n              return this.httpGetToUint8Array(url);\\n\\n            case 2:\\n              array = _context7.sent;\\n\\n              if (!(array.length == 0)) {\\n                _context7.next = 5;\\n                break;\\n              }\\n\\n              return _context7.abrupt(\\\"return\\\", {\\n                data: \\\"\\\",\\n                decrypted: false\\n              });\\n\\n            case 5:\\n              if (!this.isUtf8ArrayEncrypted(array)) {\\n                _context7.next = 10;\\n                break;\\n              }\\n\\n              _context7.next = 8;\\n              return this.decryptUint8ArrayToUtf8(array);\\n\\n            case 8:\\n              _context7.t0 = _context7.sent;\\n              return _context7.abrupt(\\\"return\\\", {\\n                data: _context7.t0,\\n                decrypted: true\\n              });\\n\\n            case 10:\\n              return _context7.abrupt(\\\"return\\\", {\\n                data: this.ipfsBundle.Utf8ArrayToStr(array),\\n                decrypted: false\\n              });\\n\\n            case 11:\\n            case \\\"end\\\":\\n              return _context7.stop();\\n          }\\n        }\\n      }, _callee7, this);\\n    }));\\n\\n    return function (_x7) {\\n      return _ref7.apply(this, arguments);\\n    };\\n  }();\\n  /*\\n   * Decrypt Uint8 Array to Base64 String\\n   */\\n\\n\\n  IpfsLoader.prototype.decryptUint8ArrayToBase64 = /*#__PURE__*/function () {\\n    var _ref8 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee8(array) {\\n      var data;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee8$(_context8) {\\n        while (1) {\\n          switch (_context8.prev = _context8.next) {\\n            case 0:\\n              data = this.ipfsBundle.Utf8ArrayToStr(array);\\n\\n              if (!($tw.crypto.hasPassword() == false)) {\\n                _context8.next = 7;\\n                break;\\n              }\\n\\n              _context8.next = 4;\\n              return this.decryptFromPasswordPrompt(data);\\n\\n            case 4:\\n              data = _context8.sent;\\n              _context8.next = 8;\\n              break;\\n\\n            case 7:\\n              data = $tw.crypto.decrypt(data, $tw.crypto.currentPassword);\\n\\n            case 8:\\n              return _context8.abrupt(\\\"return\\\", btoa(data));\\n\\n            case 9:\\n            case \\\"end\\\":\\n              return _context8.stop();\\n          }\\n        }\\n      }, _callee8, this);\\n    }));\\n\\n    return function (_x8) {\\n      return _ref8.apply(this, arguments);\\n    };\\n  }();\\n  /*\\n   * Decrypt Uint8 Array to UTF-8 String\\n   */\\n\\n\\n  IpfsLoader.prototype.decryptUint8ArrayToUtf8 = /*#__PURE__*/function () {\\n    var _ref9 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee9(array) {\\n      var data;\\n      return _regenerator[\\\"default\\\"].wrap(function _callee9$(_context9) {\\n        while (1) {\\n          switch (_context9.prev = _context9.next) {\\n            case 0:\\n              data = this.ipfsBundle.Utf8ArrayToStr(array);\\n\\n              if (!($tw.crypto.hasPassword() == false)) {\\n                _context9.next = 7;\\n                break;\\n              }\\n\\n              _context9.next = 4;\\n              return this.decryptFromPasswordPrompt(data);\\n\\n            case 4:\\n              data = _context9.sent;\\n              _context9.next = 8;\\n              break;\\n\\n            case 7:\\n              data = $tw.crypto.decrypt(data, $tw.crypto.currentPassword);\\n\\n            case 8:\\n              return _context9.abrupt(\\\"return\\\", data);\\n\\n            case 9:\\n            case \\\"end\\\":\\n              return _context9.stop();\\n          }\\n        }\\n      }, _callee9, this);\\n    }));\\n\\n    return function (_x9) {\\n      return _ref9.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLoader.prototype.decryptFromPasswordPrompt = /*#__PURE__*/function () {\\n    var _ref10 = (0, _asyncToGenerator2[\\\"default\\\"])( /*#__PURE__*/_regenerator[\\\"default\\\"].mark(function _callee10(encrypted) {\\n      return _regenerator[\\\"default\\\"].wrap(function _callee10$(_context10) {\\n        while (1) {\\n          switch (_context10.prev = _context10.next) {\\n            case 0:\\n              _context10.next = 2;\\n              return new Promise(function (resolve, reject) {\\n                $tw.passwordPrompt.createPrompt({\\n                  serviceName: \\\"Enter a password to decrypt the imported content!!\\\",\\n                  noUserName: true,\\n                  canCancel: true,\\n                  submitText: \\\"Decrypt\\\",\\n                  callback: function callback(data) {\\n                    if (!data) {\\n                      reject(new Error(\\\"User canceled password input...\\\"));\\n                      return false;\\n                    } // Decrypt\\n\\n\\n                    try {\\n                      var content = $tw.crypto.decrypt(encrypted, data.password);\\n                      resolve(content);\\n                      return true;\\n                    } catch (error) {\\n                      reject(error);\\n                      return false;\\n                    }\\n                  }\\n                });\\n              });\\n\\n            case 2:\\n              return _context10.abrupt(\\\"return\\\", _context10.sent);\\n\\n            case 3:\\n            case \\\"end\\\":\\n              return _context10.stop();\\n          }\\n        }\\n      }, _callee10);\\n    }));\\n\\n    return function (_x10) {\\n      return _ref10.apply(this, arguments);\\n    };\\n  }();\\n\\n  IpfsLoader.prototype.isUtf8ArrayEncrypted = function (content) {\\n    // Check\\n    if (content instanceof Uint8Array == false || content.length == 0) {\\n      return false;\\n    } // Process\\n\\n\\n    var standford = this.ipfsBundle.StringToUint8Array('{\\\"iv\\\":\\\"');\\n    var encrypted = false;\\n\\n    for (var i = 0; i < content.length && i < standford.length; i++) {\\n      if (content[i] == standford[i]) {\\n        encrypted = true;\\n      } else {\\n        encrypted = false;\\n        break;\\n      }\\n    }\\n\\n    return encrypted;\\n  };\\n\\n  module.exports = IpfsLoader;\\n})();\\n\\n},{\\\"@babel/runtime/helpers/asyncToGenerator\\\":2,\\\"@babel/runtime/helpers/interopRequireDefault\\\":3,\\\"@babel/runtime/regenerator\\\":4,\\\"window-or-global\\\":88}],93:[function(require,module,exports){\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nvar _windowOrGlobal = _interopRequireDefault(require(\\\"window-or-global\\\"));\\n\\nvar _universalUrl = require(\\\"universal-url\\\");\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  \\\"use strict\\\";\\n\\n  var name = \\\"ipfs-url\\\";\\n\\n  var IpfsUrl = function IpfsUrl() {\\n    this.defaultApiUrl = null;\\n    this.defaultGatewayUrl = null;\\n  };\\n\\n  IpfsUrl.prototype.getLogger = function () {\\n    return _windowOrGlobal[\\\"default\\\"].log.getLogger(name);\\n  };\\n\\n  IpfsUrl.prototype.getIpfsDefaultApiUrl = function () {\\n    if (this.defaultApiUrl == null) {\\n      this.defaultApiUrl = new _universalUrl.URL(this.getIpfsDefaultApi());\\n    }\\n\\n    return this.defaultApiUrl;\\n  };\\n\\n  IpfsUrl.prototype.getIpfsDefaultGatewayUrl = function () {\\n    if (this.defaultGatewayUrl == null) {\\n      this.defaultGatewayUrl = new _universalUrl.URL(this.getIpfsDefaultGateway());\\n    }\\n\\n    return this.defaultGatewayUrl;\\n  };\\n\\n  IpfsUrl.prototype.getIpfsApiUrl = function () {\\n    try {\\n      return this.getUrl($tw.utils.getIpfsSaverApiUrl());\\n    } catch (error) {\\n      return this.getIpfsDefaultApiUrl();\\n    }\\n  };\\n\\n  IpfsUrl.prototype.getIpfsGatewayUrl = function () {\\n    try {\\n      return this.getUrl($tw.utils.getIpfsSaverGatewayUrl());\\n    } catch (error) {\\n      return this.getIpfsDefaultGatewayUrl();\\n    }\\n  };\\n\\n  IpfsUrl.prototype.getIpfsDefaultApi = function () {\\n    return \\\"https://ipfs.infura.io:5001\\\";\\n  };\\n\\n  IpfsUrl.prototype.getIpfsDefaultGateway = function () {\\n    return \\\"https://gateway.ipfs.io\\\";\\n  };\\n  /**\\n   * url.href;\\n   * url.origin\\n   * url.protocol;\\n   * url.username;\\n   * url.password;\\n   * url.host;\\n   * url.hostname;\\n   * url.port;\\n   * url.pathname;\\n   * url.search;\\n   * url.hash;\\n   * https://jsdom.github.io/whatwg-url/\\n   * https://github.com/stevenvachon/universal-url\\n   * https://github.com/stevenvachon/universal-url-lite\\n   * https://url.spec.whatwg.org/\\n   */\\n\\n\\n  IpfsUrl.prototype.getDocumentUrl = function () {\\n    try {\\n      return new _universalUrl.URL(_windowOrGlobal[\\\"default\\\"].location.href);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n\\n    throw new Error(\\\"Invalid current HTML Document URL...\\\");\\n  };\\n\\n  IpfsUrl.prototype.getUrl = function (url, base) {\\n    try {\\n      return new _universalUrl.URL(url, base);\\n    } catch (error) {// Ignore\\n    }\\n\\n    throw new Error(\\\"Invalid URL...\\\");\\n  };\\n\\n  IpfsUrl.prototype.getIpfsBaseUrl = function () {\\n    var base = this.getIpfsGatewayUrl();\\n\\n    try {\\n      if ($tw.utils.getIpfsUrlPolicy() === \\\"origin\\\") {\\n        base = this.getDocumentUrl();\\n\\n        if (base.protocol === \\\"file:\\\") {\\n          base = this.getIpfsGatewayUrl();\\n        }\\n      }\\n    } catch (error) {\\n      base = this.getIpfsGatewayUrl();\\n    }\\n\\n    return this.getUrl(base.protocol + \\\"//\\\" + base.host);\\n  };\\n\\n  IpfsUrl.prototype.normalizeUrl = function (value, base) {\\n    // Check\\n    if (value == undefined || value == null) {\\n      return null;\\n    } // Parse\\n\\n\\n    var text = false;\\n    var url = null; // Text or ENS\\n\\n    try {\\n      url = this.getUrl(value);\\n    } catch (error) {\\n      if (value.startsWith(\\\"/\\\") === false) {\\n        text = true;\\n\\n        try {\\n          url = this.getUrl(\\\"https://\\\" + value);\\n\\n          if (!url.hostname.endsWith(\\\".eth\\\") && !url.hostname.endsWith(\\\".eth.link\\\")) {\\n            url = null;\\n          } else {\\n            text = false;\\n          }\\n        } catch (error) {// ignore\\n        }\\n      }\\n    }\\n\\n    if (text) {\\n      return null;\\n    } // Invalid URL, try to parse with a Base URL\\n\\n\\n    if (url == null) {\\n      url = this.getUrl(value, base !== undefined && base !== null ? base : this.getIpfsBaseUrl());\\n    } // Remove .link from .eth.link\\n\\n\\n    if (url.hostname.endsWith(\\\".eth.link\\\")) {\\n      url.hostname = url.hostname.substring(0, url.hostname.indexOf(\\\".link\\\"));\\n    }\\n\\n    return url;\\n  };\\n\\n  module.exports = IpfsUrl;\\n})();\\n\\n},{\\\"@babel/runtime/helpers/interopRequireDefault\\\":3,\\\"universal-url\\\":83,\\\"window-or-global\\\":88}]},{},[90])(90)\\n});\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-controller.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-controller.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-controller.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Controller\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const EnsWrapper = require(\\\"$:/plugins/ipfs/ens-wrapper.js\\\").EnsWrapper;\\n  const IpfsBundle = require(\\\"$:/plugins/ipfs/ipfs-bundle.js\\\").IpfsBundle;\\n  const IpfsWrapper = require(\\\"$:/plugins/ipfs/ipfs-wrapper.js\\\").IpfsWrapper;\\n\\n  const ipfsKeyword = \\\"ipfs\\\";\\n  const ipnsKeyword = \\\"ipns\\\";\\n\\n  const name = \\\"ipfs-controller\\\";\\n\\n  var IpfsController = function () {\\n    this.ipfsBundle = new IpfsBundle();\\n    this.ipfsBundle.init();\\n    this.ensWrapper = new EnsWrapper(this.ipfsBundle);\\n    this.ipfsUrl = this.ipfsBundle.ipfsUrl;\\n    this.ipfsWrapper = new IpfsWrapper(this.ipfsBundle);\\n    this.ipfsClients = new Map();\\n    this.pin = [];\\n    this.unpin = [];\\n  };\\n\\n  IpfsController.prototype.getLogger = function () {\\n    return window.log.getLogger(name);\\n  };\\n\\n  IpfsController.prototype.isCid = function (cid) {\\n    return this.ipfsBundle.isCid(cid);\\n  };\\n\\n  IpfsController.prototype.loadToBase64 = async function (url) {\\n    return this.ipfsBundle.loadToBase64(url);\\n  };\\n\\n  IpfsController.prototype.loadToUtf8 = async function (url) {\\n    return this.ipfsBundle.loadToUtf8(url);\\n  };\\n\\n  IpfsController.prototype.Base64ToUint8Array = function (base64) {\\n    return this.ipfsBundle.Base64ToUint8Array(base64);\\n  };\\n\\n  IpfsController.prototype.Uint8ArrayToBase64 = function (uint8) {\\n    return this.ipfsBundle.Uint8ArrayToBase64(uint8);\\n  };\\n\\n  IpfsController.prototype.StringToUint8Array = function (string) {\\n    return this.ipfsBundle.StringToUint8Array(string);\\n  };\\n\\n  IpfsController.prototype.Utf8ArrayToStr = function (array) {\\n    return this.ipfsBundle.Utf8ArrayToStr(array);\\n  };\\n\\n  IpfsController.prototype.requestToPin = async function (cid, ipnsKey, value) {\\n    const self = this;\\n    if (ipnsKey !== undefined && ipnsKey !== null) {\\n      this.resolveUrl(true, true, value)\\n        .then((data) => {\\n          var { cid, resolvedUrl } = data;\\n          if (resolvedUrl !== null && cid !== null && self.addToPin(cid)) {\\n            self.getLogger().info(\\\"Request to Pin:\\\" + \\\"\\\\n \\\" + resolvedUrl);\\n            return true;\\n          }\\n          return false;\\n        })\\n        .catch((error) => {\\n          self.getLogger().warn(error);\\n          $tw.utils.alert(name, error.message);\\n          return false;\\n        });\\n    } else if (cid !== undefined && cid !== null && this.addToPin(cid)) {\\n      const normalizedUrl = this.normalizeUrl(\\\"/\\\" + ipfsKeyword + \\\"/\\\" + cid);\\n      this.getLogger().info(\\\"Request to Pin:\\\" + \\\"\\\\n \\\" + normalizedUrl);\\n      return true;\\n    }\\n    return false;\\n  };\\n\\n  IpfsController.prototype.addToPin = function (cid) {\\n    if (cid !== undefined && cid !== null) {\\n      // Discard\\n      var index = this.unpin.indexOf(cid);\\n      if (index !== -1) {\\n        this.unpin.splice(index, 1);\\n        return false;\\n      }\\n      // Add to pin\\n      if (this.pin.indexOf(cid) === -1) {\\n        this.pin.push(cid);\\n        return true;\\n      }\\n    }\\n    return false;\\n  };\\n\\n  IpfsController.prototype.requestToUnpin = async function (cid, ipnsKey, value) {\\n    if ($tw.utils.getIpfsUnpin() == false) {\\n      return;\\n    }\\n    const self = this;\\n    if (ipnsKey !== undefined && ipnsKey !== null) {\\n      this.resolveUrl(true, true, value)\\n        .then((data) => {\\n          var { cid, resolvedUrl } = data;\\n          if (resolvedUrl !== null && cid !== null && self.addToUnpin(cid)) {\\n            self.getLogger().info(\\\"Request to unpin:\\\" + \\\"\\\\n \\\" + resolvedUrl);\\n            return true;\\n          }\\n          return false;\\n        })\\n        .catch((error) => {\\n          self.getLogger().warn(error);\\n          $tw.utils.alert(name, error.message);\\n          return false;\\n        });\\n    } else if (cid !== undefined && cid !== null && this.addToUnpin(cid)) {\\n      const normalizedUrl = this.normalizeUrl(\\\"/\\\" + ipfsKeyword + \\\"/\\\" + cid);\\n      this.getLogger().info(\\\"Request to unpin:\\\" + \\\"\\\\n \\\" + normalizedUrl);\\n      return true;\\n    }\\n    return false;\\n  };\\n\\n  IpfsController.prototype.addToUnpin = function (cid) {\\n    if (cid !== undefined && cid !== null) {\\n      // Discard\\n      var index = this.pin.indexOf(cid);\\n      if (index !== -1) {\\n        this.pin.splice(index, 1);\\n        return false;\\n      }\\n      // Add to unpin\\n      if (this.unpin.indexOf(cid) === -1) {\\n        this.unpin.push(cid);\\n        return true;\\n      }\\n    }\\n    return false;\\n  };\\n\\n  IpfsController.prototype.removeFromPinUnpin = function (cid) {\\n    if (cid !== undefined && cid !== null) {\\n      var index = this.pin.indexOf(cid);\\n      if (index !== -1) {\\n        this.pin.splice(index, 1);\\n      }\\n      var index = this.unpin.indexOf(cid);\\n      if (index !== -1) {\\n        this.unpin.splice(index, 1);\\n      }\\n    }\\n    return;\\n  };\\n\\n  IpfsController.prototype.pinToIpfs = async function (cid) {\\n    const { ipfs } = await this.getIpfsClient();\\n    return await this.ipfsWrapper.pinToIpfs(ipfs, cid);\\n  };\\n\\n  IpfsController.prototype.unpinFromIpfs = async function (cid) {\\n    const { ipfs } = await this.getIpfsClient();\\n    return await this.ipfsWrapper.unpinFromIpfs(ipfs, cid);\\n  };\\n\\n  IpfsController.prototype.addToIpfs = async function (content) {\\n    const { ipfs } = await this.getIpfsClient();\\n    return await this.ipfsWrapper.addToIpfs(ipfs, content);\\n  };\\n\\n  IpfsController.prototype.generateIpnsKey = async function (ipnsName) {\\n    const { ipfs } = await this.getIpfsClient();\\n    return await this.ipfsWrapper.generateIpnsKey(ipfs, ipnsName);\\n  };\\n\\n  IpfsController.prototype.removeIpnsKey = async function (ipnsName) {\\n    const { ipfs } = await this.getIpfsClient();\\n    return await this.ipfsWrapper.removeIpnsKey(ipfs, ipnsName);\\n  };\\n\\n  IpfsController.prototype.renameIpnsName = async function (oldIpnsName, newIpnsName) {\\n    const { ipfs } = await this.getIpfsClient();\\n    return await this.ipfsWrapper.renameIpnsName(ipfs, oldIpnsName, newIpnsName);\\n  };\\n\\n  IpfsController.prototype.decodeCid = function (pathname) {\\n    return this.ipfsBundle.decodeCid(pathname);\\n  };\\n\\n  IpfsController.prototype.getIpnsIdentifiers = async function (identifier, ipnsName) {\\n    const { ipfs } = await this.getIpfsClient();\\n    return await this.ipfsWrapper.getIpnsIdentifiers(ipfs, identifier, ipnsName);\\n  };\\n\\n  IpfsController.prototype.resolveIpnsKey = async function (ipnsKey) {\\n    const { ipfs } = await this.getIpfsClient();\\n    return await this.ipfsWrapper.resolveIpnsKey(ipfs, ipnsKey);\\n  };\\n\\n  IpfsController.prototype.publishIpnsName = async function (cid, ipnsKey, ipnsName) {\\n    const { ipfs } = await this.getIpfsClient();\\n    return await this.ipfsWrapper.publishIpnsName(cid, ipfs, ipnsKey, ipnsName);\\n  };\\n\\n  IpfsController.prototype.getIpfsBaseUrl = function () {\\n    return this.ipfsUrl.getIpfsBaseUrl();\\n  };\\n\\n  IpfsController.prototype.normalizeUrl = function (value) {\\n    return this.ipfsUrl.normalizeUrl(value);\\n  };\\n\\n  IpfsController.prototype.getDocumentUrl = function () {\\n    return this.ipfsUrl.getDocumentUrl();\\n  };\\n\\n  IpfsController.prototype.getIpfsDefaultApi = function () {\\n    return this.ipfsUrl.getIpfsDefaultApi();\\n  };\\n\\n  IpfsController.prototype.getIpfsDefaultGateway = function () {\\n    return this.ipfsUrl.getIpfsDefaultGateway();\\n  };\\n\\n  IpfsController.prototype.getIpfsApiUrl = function () {\\n    return this.ipfsUrl.getIpfsApiUrl();\\n  };\\n\\n  IpfsController.prototype.getIpfsGatewayUrl = function () {\\n    return this.ipfsUrl.getIpfsGatewayUrl();\\n  };\\n\\n  IpfsController.prototype.resolveUrl = async function (resolveIpns, resolveEns, value) {\\n    var cid = null;\\n    var ipnsKey = null;\\n    var ipnsName = null;\\n    var normalizedUrl = null;\\n    var resolvedUrl = null;\\n    if (value == undefined || value == null || value.toString().trim() === \\\"\\\") {\\n      return {\\n        cid: null,\\n        ipnsKey: null,\\n        ipnsName: null,\\n        normalizedUrl: null,\\n        resolvedUrl: null,\\n      };\\n    }\\n    try {\\n      normalizedUrl = this.normalizeUrl(value);\\n    } catch (error) {\\n      // Ignore\\n    }\\n    if (normalizedUrl == null) {\\n      return {\\n        cid: null,\\n        ipnsKey: null,\\n        ipnsName: null,\\n        normalizedUrl: null,\\n        resolvedUrl: null,\\n      };\\n    }\\n    // Check\\n    var { cid, ipnsIdentifier, protocol } = this.decodeCid(normalizedUrl.pathname);\\n    if (protocol !== null && protocol == ipnsKeyword && ipnsIdentifier !== null) {\\n      var { ipnsKey, ipnsName, normalizedUrl } = await this.getIpnsIdentifiers(ipnsIdentifier);\\n      if (resolveIpns) {\\n        this.getLogger().info(\\\"Resolving IPNS key:\\\" + \\\"\\\\n \\\" + normalizedUrl);\\n        $tw.utils.alert(name, \\\"Resolving an IPNS key...\\\");\\n        try {\\n          cid = await this.resolveIpnsKey(ipnsKey);\\n          if (cid !== null) {\\n            resolvedUrl = this.normalizeUrl(\\\"/\\\" + ipfsKeyword + \\\"/\\\" + cid);\\n            this.getLogger().info(\\\"Successfully resolved IPNS key:\\\" + \\\"\\\\n \\\" + normalizedUrl);\\n            $tw.utils.alert(name, \\\"Successfully resolved an IPNS key...\\\");\\n          }\\n        } catch (error) {\\n          // Unable to resolve the key\\n          // It usually happen when the key is not initialized\\n          cid = null;\\n          this.getLogger().error(error);\\n          $tw.utils.alert(name, error.message);\\n        }\\n      }\\n    } else if (resolveEns && normalizedUrl.hostname.endsWith(\\\".eth\\\")) {\\n      var { content: cid, resolvedUrl: resolvedUrl } = await this.resolveEns(normalizedUrl.hostname);\\n    } else {\\n      resolvedUrl = normalizedUrl;\\n    }\\n    return {\\n      cid: cid,\\n      ipnsKey: ipnsKey,\\n      ipnsName: ipnsName,\\n      normalizedUrl: normalizedUrl,\\n      resolvedUrl: resolvedUrl,\\n    };\\n  };\\n\\n  IpfsController.prototype.getUrl = function (url, base) {\\n    return this.ipfsUrl.getUrl(url, base ? base : this.getIpfsBaseUrl());\\n  };\\n\\n  IpfsController.prototype.isJson = function (content) {\\n    return this.ipfsBundle.isJson(content);\\n  };\\n\\n  IpfsController.prototype.getIpfsClient = async function () {\\n    // Provider\\n    const ipfsProvider = $tw.utils.getIpfsProvider();\\n    // IPFS companion\\n    if (ipfsProvider === \\\"window\\\") {\\n      const client = await this.ipfsWrapper.getWindowIpfsClient();\\n      return {\\n        ipfs: client.ipfs,\\n        provider: client.provider,\\n      };\\n    }\\n    // Default, try IPFS companion\\n    if (ipfsProvider === \\\"default\\\") {\\n      try {\\n        const client = await this.ipfsWrapper.getWindowIpfsClient();\\n        return {\\n          ipfs: client.ipfs,\\n          provider: client.provider,\\n        };\\n      } catch (error) {\\n        // Ignore, fallback to HTTP\\n      }\\n    }\\n    // Current API URL\\n    const url = this.getIpfsApiUrl();\\n    // Check\\n    if (url == undefined || url == null || url === \\\"\\\") {\\n      throw new Error(\\\"Undefined IPFS API URL...\\\");\\n    }\\n    // HTTP Client\\n    const client = this.ipfsClients.get(url.href);\\n    if (client !== undefined) {\\n      // Log\\n      this.getLogger().info(\\\"Reuse IPFS provider:\\\" + \\\"\\\\n \\\" + client.provider);\\n      // Done\\n      return {\\n        ipfs: client.ipfs,\\n        provider: client.provider,\\n      };\\n    }\\n    // Build a new HTTP client\\n    const policy = await this.ipfsWrapper.getHttpIpfsClient(url);\\n    const ipfs = policy.ipfs;\\n    const provider = policy.provider;\\n    // Store\\n    this.ipfsClients.set(url.href, { ipfs, provider });\\n    // Log\\n    this.getLogger().info(\\\"New IPFS provider:\\\" + \\\"\\\\n \\\" + policy.provider);\\n    // Done\\n    return {\\n      ipfs: ipfs,\\n      provider: provider,\\n    };\\n  };\\n\\n  IpfsController.prototype.resolveEns = async function (ensDomain) {\\n    const { web3 } = await this.getWeb3Provider();\\n    const { content, protocol } = await this.ensWrapper.getContentHash(ensDomain, web3);\\n    if (content !== null && protocol !== null) {\\n      const url = this.normalizeUrl(\\\"/\\\" + protocol + \\\"/\\\" + content);\\n      this.getLogger().info(\\\"Successfully fetched ENS domain content:\\\" + \\\"\\\\n \\\" + url + \\\" \\\\n from: \\\" + ensDomain);\\n      return {\\n        content: content,\\n        resolvedUrl: url,\\n        protocol: protocol,\\n      };\\n    }\\n    return {\\n      content: null,\\n      resolvedUrl: null,\\n      protocol: null,\\n    };\\n  };\\n\\n  IpfsController.prototype.setEns = async function (ensDomain, cid) {\\n    const { web3, account } = await this.getEnabledWeb3Provider();\\n    const { cidV0 } = await this.ensWrapper.setContentHash(ensDomain, cid, web3, account);\\n    if (cidV0 !== null) {\\n      const url = this.normalizeUrl(\\\"/ipfs/\\\" + cidV0);\\n      this.getLogger().info(\\\"Successfully set ENS domain content:\\\" + \\\"\\\\n \\\" + url + \\\" \\\\n to: \\\" + ensDomain);\\n      return true;\\n    }\\n    return false;\\n  };\\n\\n  IpfsController.prototype.getEthereumProvider = async function () {\\n    return await this.ensWrapper.getEthereumProvider();\\n  };\\n\\n  IpfsController.prototype.getEnabledWeb3Provider = async function () {\\n    return await this.ensWrapper.getEnabledWeb3Provider();\\n  };\\n\\n  IpfsController.prototype.getWeb3Provider = async function () {\\n    return await this.ensWrapper.getWeb3Provider();\\n  };\\n\\n  exports.IpfsController = IpfsController;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-default.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-default.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-default.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: utils\\n\\nIPFS Default\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const name = \\\"ipfs-default\\\";\\n\\n  /*\\n   * Retrieve ipfs saver export protocol with default value if applicable\\n   */\\n  exports.getIpfsExport = function () {\\n    var output = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/export\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        output = text;\\n      }\\n    }\\n    if (output === null) {\\n      output = $tw.utils.getIpfsDefaultExport();\\n    }\\n    return output;\\n  };\\n\\n  /*\\n   * Default Export\\n   */\\n  exports.getIpfsDefaultExport = function () {\\n    return \\\"json\\\";\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver protocol with default value if applicable\\n   */\\n  exports.getIpfsProtocol = function () {\\n    var protocol = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/protocol\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        protocol = text;\\n      }\\n    }\\n    if (protocol === null) {\\n      protocol = $tw.utils.getIpfsDefaultProtocol();\\n    }\\n    return protocol;\\n  };\\n\\n  /*\\n   * Default Protocol\\n   */\\n  exports.getIpfsDefaultProtocol = function () {\\n    return \\\"ipfs\\\";\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver api url with default value if applicable\\n   */\\n  exports.getIpfsSaverApiUrl = function () {\\n    var api = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/api\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        api = text;\\n      }\\n    }\\n    if (api !== null) {\\n      tiddler = $tw.wiki.getTiddler(api);\\n      if (tiddler !== undefined && tiddler !== null) {\\n        const text = tiddler.getFieldString(\\\"text\\\");\\n        if (text !== undefined && text !== null && text !== \\\"\\\") {\\n          api = text;\\n        }\\n      }\\n    }\\n    if (api === null) {\\n      api = $tw.ipfs.getIpfsDefaultApi();\\n    }\\n    return api;\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver gateway url with default value if applicable\\n   */\\n  exports.getIpfsSaverGatewayUrl = function () {\\n    var gateway = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/gateway\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        gateway = text;\\n      }\\n    }\\n    if (gateway !== null) {\\n      tiddler = $tw.wiki.getTiddler(gateway);\\n      if ($tw.wiki.getTiddler(gateway) !== undefined) {\\n        const text = $tw.wiki.getTiddler(gateway).getFieldString(\\\"text\\\");\\n        if (text !== undefined && text !== null && text !== \\\"\\\") {\\n          gateway = text;\\n        }\\n      }\\n    }\\n    if (gateway === null) {\\n      gateway = $tw.ipfs.getIpfsDefaultGateway();\\n    }\\n    return gateway;\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver ens domain with default value if applicable\\n   */\\n  exports.getIpfsEnsDomain = function () {\\n    var ensDomain = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/ens/domain\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        ensDomain = text;\\n      }\\n    }\\n    return ensDomain;\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver ipns name with default value if applicable\\n   */\\n  exports.getIpfsIpnsName = function () {\\n    var ipnsName = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/ipns/name\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        ipnsName = text;\\n      }\\n    }\\n    return ipnsName;\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver ipns key with default value if applicable\\n   */\\n  exports.getIpfsIpnsKey = function () {\\n    var ipnsKey = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/ipns/key\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        ipnsKey = text;\\n      }\\n    }\\n    return ipnsKey;\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver verbose with default value if applicable\\n   */\\n  exports.getIpfsVerbose = function () {\\n    var verbose = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/verbose\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        verbose = text;\\n      }\\n    }\\n    if (verbose === null) {\\n      verbose = true; // default, see ipfs-saver.tid\\n    } else {\\n      verbose = verbose === \\\"yes\\\";\\n    }\\n    return verbose;\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver unpin with default value if applicable\\n   */\\n  exports.getIpfsUnpin = function () {\\n    var unpin = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/unpin\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        unpin = text;\\n      }\\n    }\\n    if (unpin === null) {\\n      unpin = false; // default, see ipfs-saver.tid\\n    } else {\\n      unpin = unpin === \\\"yes\\\";\\n    }\\n    return unpin;\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver url policy with default value if applicable\\n   */\\n  exports.getIpfsUrlPolicy = function () {\\n    var policy = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/policy\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        policy = text;\\n      }\\n    }\\n    if (policy === null) {\\n      policy = $tw.utils.getIpfsDefaultPolicy();\\n    }\\n    return policy;\\n  };\\n\\n  /*\\n   * Default Policy\\n   */\\n  exports.getIpfsDefaultPolicy = function () {\\n    return \\\"gateway\\\";\\n  };\\n\\n  /*\\n   * Retrieve ipfs saver provider with default value if applicable\\n   */\\n  exports.getIpfsProvider = function () {\\n    var provider = null;\\n    var tiddler = $tw.wiki.getTiddler(\\\"$:/ipfs/saver/provider\\\");\\n    if (tiddler !== undefined && tiddler !== null) {\\n      const text = tiddler.getFieldString(\\\"text\\\");\\n      if (text !== undefined && text !== null && text !== \\\"\\\") {\\n        provider = text;\\n      }\\n    }\\n    if (provider === null) {\\n      provider = $tw.utils.getIpfsDefaultProvider();\\n    }\\n    return provider;\\n  };\\n\\n  /*\\n   * Default Provider\\n   */\\n  exports.getIpfsDefaultProvider = function () {\\n    return \\\"http\\\";\\n  };\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"utils\"\n        },\n        \"$:/plugins/ipfs/ipfs-import.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-import.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-import.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Import\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const name = \\\"ipfs-import\\\";\\n\\n  var IpfsImport = function () {};\\n\\n  IpfsImport.prototype.getLogger = function () {\\n    return window.log.getLogger(name);\\n  };\\n\\n  IpfsImport.prototype.importTiddlers = async function (url) {\\n    var importedTiddlers = null;\\n    var key = null;\\n    var normalizedUrl = null;\\n    if (url == undefined || url == null || url.trim() === \\\"\\\") {\\n      return {\\n        importedTiddlers: null,\\n        key: null,\\n        normalizedUrl: null,\\n      };\\n    }\\n    try {\\n      // Do not resolve and setup a reasonable key\\n      var { cid, ipnsKey, normalizedUrl } = await $tw.ipfs.resolveUrl(false, false, url);\\n      if (cid !== null) {\\n        key = cid;\\n      } else if (ipnsKey !== null) {\\n        key = ipnsKey;\\n      } else if (normalizedUrl !== null && normalizedUrl.hostname.endsWith(\\\".eth\\\")) {\\n        key = normalizedUrl.hostname;\\n      } else {\\n        key = normalizedUrl.href;\\n      }\\n      // Retrieve cached imported Tiddlers\\n      importedTiddlers = this.importedTiddlers.get(key);\\n      if (importedTiddlers !== undefined) {\\n        this.getLogger().info(\\\"Retrieve cached imported Tiddler(s):\\\" + \\\"\\\\n \\\" + key);\\n        return {\\n          importedTiddlers: importedTiddlers,\\n          key,\\n          normalizedUrl: normalizedUrl,\\n        };\\n      }\\n      // Resolve ENS\\n      var { normalizedUrl, resolvedUrl } = await $tw.ipfs.resolveUrl(false, true, url);\\n      var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n      if (url !== null) {\\n        const content = await $tw.ipfs.loadToUtf8(url.href);\\n        if ($tw.ipfs.isJson(content.data)) {\\n          importedTiddlers = $tw.wiki.deserializeTiddlers(\\\".json\\\", content.data, $tw.wiki.getCreationFields());\\n        } else {\\n          importedTiddlers = $tw.wiki.deserializeTiddlers(\\\".tid\\\", content.data, $tw.wiki.getCreationFields());\\n        }\\n        if (importedTiddlers == undefined || importedTiddlers == null) {\\n          return {\\n            importedTiddlers: null,\\n            key,\\n            normalizedUrl: normalizedUrl,\\n          };\\n        }\\n        // Filter out unknown titles and duplicates\\n        var imported = new Map();\\n        for (var i in importedTiddlers) {\\n          var importedTiddler = importedTiddlers[i];\\n          var importedTitle = importedTiddler[\\\"title\\\"];\\n          // Unknown\\n          if (importedTitle == undefined || importedTitle == null || importedTitle.trim() === \\\"\\\") {\\n            continue;\\n          }\\n          // Duplicate\\n          if (imported.get(importedTitle) !== undefined) {\\n            $tw.utils.alert(\\n              name,\\n              'Duplicate imported Tiddler: <a rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" href=\\\"' +\\n                resolvedUrl +\\n                '\\\">' +\\n                importedTitle +\\n                \\\"</a>\\\"\\n            );\\n          } else {\\n            imported.set(importedTitle, importedTiddler);\\n          }\\n        }\\n        // Cache\\n        this.importedTiddlers.set(key, imported);\\n        this.getLogger().info(\\\"Caching imported Tiddler(s):\\\" + \\\"\\\\n \\\" + key);\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n    }\\n    return {\\n      importedTiddlers: importedTiddlers,\\n      key,\\n      normalizedUrl: normalizedUrl,\\n    };\\n  };\\n\\n  IpfsImport.prototype.loadRemoteTiddlers = async function (importUri, canonicalUri, title) {\\n    this.host = title !== undefined && title !== null ? $tw.wiki.getTiddler(title) : null;\\n    if (this.host == undefined) {\\n      this.host = null;\\n    }\\n    this.importedTiddlers = new Map();\\n    this.loadedKeys = new Array();\\n    this.processedImported = new Map();\\n    this.processedTitles = new Map();\\n    this.root = null;\\n    try {\\n      var { added, updated } = await this.loadImportedRemoteTiddlers(importUri, canonicalUri, title);\\n      // Update Tiddly\\n      for (var [title, merged] of this.processedImported.entries()) {\\n        $tw.wiki.addTiddler(merged);\\n      }\\n      // Process deleted\\n      // $tw.wiki.forEachTiddler({ includeSystem: true }, function (title, tiddler) {\\n      //   var value = tiddler.getFieldString(\\\"_canonical_uri\\\");\\n      //   if (value !== undefined && value !== null && value === importedUri && processed.indexOf(title) === -1) {\\n      //     $tw.wiki.deleteTiddler(title);\\n      //     return;\\n      //   }\\n      //   var value = tiddler.getFieldString(\\\"_import_uri\\\");\\n      //   if (value !== undefined && value !== null && value === importedUri && processed.indexOf(title) === -1) {\\n      //     $tw.wiki.deleteTiddler(title);\\n      //     return;\\n      //   }\\n      // });\\n      if (this.processedTitles.size > 0) {\\n        $tw.utils.alert(name, \\\"Successfully Added: \\\" + added + \\\", Updated: \\\" + updated + \\\" Tiddlers...\\\");\\n      }\\n      if (this.host !== null && this.processedTitles.get(this.host.fields.title) == undefined) {\\n        var updatedTiddler = new $tw.Tiddler(this.host);\\n        if (this.root !== null) {\\n          updatedTiddler = $tw.utils.updateTiddler({\\n            tiddler: updatedTiddler,\\n            fields: [{ key: \\\"text\\\", value: \\\"Successfully Imported Tiddlers: [[\\\" + this.root + \\\"]]...\\\" }],\\n          });\\n        } else if (this.processedTitles.size === 0) {\\n          updatedTiddler = $tw.utils.updateTiddler({\\n            tiddler: updatedTiddler,\\n            fields: [{ key: \\\"text\\\", value: \\\"No Tiddlers have been Imported...\\\" }],\\n          });\\n        } else {\\n          updatedTiddler = $tw.utils.updateTiddler({\\n            tiddler: updatedTiddler,\\n            fields: [{ key: \\\"text\\\", value: \\\"Successfully Imported Tiddlers...\\\" }],\\n          });\\n        }\\n        // Update\\n        $tw.wiki.addTiddler(updatedTiddler);\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n    }\\n    // Cleanup\\n    this.host = null;\\n    this.loadedKeys = null;\\n    this.processedImported = null;\\n    this.processedTitles = null;\\n    this.root = null;\\n  };\\n\\n  IpfsImport.prototype.getImportedTiddlers = async function (field, title, url) {\\n    var { importedTiddlers, key, normalizedUrl } = await this.importTiddlers(url);\\n    if (importedTiddlers == null) {\\n      $tw.utils.alert(\\n        name,\\n        'Failed to import : <a rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" href=\\\"' +\\n          normalizedUrl +\\n          '\\\">' +\\n          field +\\n          \\\"</a> from Imported Tiddler [[\\\" +\\n          title +\\n          \\\"]]\\\"\\n      );\\n    }\\n    if (this.loadedKeys.indexOf(key) !== -1) {\\n      var circularImport = new Error(\\n        'Circular import detected : <a rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" href=\\\"' +\\n          normalizedUrl +\\n          '\\\">' +\\n          field +\\n          \\\"</a> from Imported Tiddler [[\\\" +\\n          title +\\n          \\\"]]\\\"\\n      );\\n      circularImport.name = \\\"CircularImport\\\";\\n      throw circularImport;\\n    } else {\\n      this.loadedKeys.push(key);\\n    }\\n    return {\\n      importedTiddlers,\\n      key,\\n      normalizedUrl,\\n    };\\n  };\\n\\n  IpfsImport.prototype.loadImportedRemoteTiddlers = async function (importUri, canonicalUri, title) {\\n    var added = 0;\\n    var key = null;\\n    var importedTiddlers = null;\\n    var normalizedUrl = null;\\n    var updated = 0;\\n    var url = null;\\n    // Load Imported\\n    if (importUri !== undefined && importUri !== null) {\\n      url = importUri;\\n      var { importedTiddlers, key, normalizedUrl } = await this.getImportedTiddlers(\\\"_import_uri\\\", title, url);\\n      // Fallback\\n      if (importedTiddlers == null) {\\n        url = canonicalUri;\\n        if (url !== undefined && url !== null) {\\n          var { importedTiddlers, key, normalizedUrl } = await this.getImportedTiddlers(\\\"_canonical_uri\\\", title, url);\\n        }\\n      }\\n    } else if (canonicalUri !== undefined && canonicalUri !== null) {\\n      url = canonicalUri;\\n      var { importedTiddlers, key, normalizedUrl } = await this.getImportedTiddlers(\\\"_canonical_uri\\\", title, url);\\n    }\\n    // Process Imported\\n    if (importedTiddlers !== null) {\\n      var { added, updated } = await this.processImportedTiddlers(importedTiddlers, key, url, normalizedUrl);\\n    }\\n    return {\\n      added: added,\\n      updated: updated,\\n    };\\n  };\\n\\n  IpfsImport.prototype.processImportedTiddlers = async function (\\n    importedTiddlers,\\n    key,\\n    importedUrl,\\n    importedNormalizedUrl\\n  ) {\\n    var importedAdded = 0;\\n    var importedUpdated = 0;\\n    // Process new and existing\\n    for (var [importedTitle, importedTiddler] of this.importedTiddlers.entries()) {\\n      var merged = null;\\n      var currentTiddler = null;\\n      var importedTags = importedTiddler[\\\"tags\\\"] !== undefined ? importedTiddler[\\\"tags\\\"] : \\\"\\\";\\n      // Type\\n      var type = importedTiddler[\\\"type\\\"];\\n      // Default\\n      if (type == undefined || type == null) {\\n        type = \\\"text/vnd.tiddlywiki\\\";\\n      }\\n      // Content-Type\\n      var info = $tw.config.contentTypeInfo[type];\\n      // Check\\n      if (info == undefined || info == null) {\\n        $tw.utils.alert(\\n          name,\\n          \\\"Unknown Content-Type: '\\\" +\\n            type +\\n            \\\"', default to: 'text/vnd.tiddlywiki', <a rel='noopener noreferrer' target='_blank' href='\\\" +\\n            importedNormalizedUrl +\\n            \\\"'>\\\" +\\n            importedTitle +\\n            \\\"</a>\\\"\\n        );\\n        // Default\\n        type = \\\"text/vnd.tiddlywiki\\\";\\n        info = $tw.config.contentTypeInfo[type];\\n      }\\n      // Load until we reach the leaf\\n      if (info.encoding !== \\\"base64\\\" && type !== \\\"image/svg+xml\\\") {\\n        var uri = importedTiddler[\\\"_import_uri\\\"];\\n        if (uri == undefined || uri == null) {\\n          uri = importedTiddler[\\\"_canonical_uri\\\"];\\n        }\\n        if (uri !== undefined && uri !== null) {\\n          try {\\n            var { added, updated } = await this.loadImportedRemoteTiddlers(\\n              importedTiddler[\\\"_import_uri\\\"],\\n              importedTiddler[\\\"_canonical_uri\\\"],\\n              importedTitle\\n            );\\n            importedAdded += added;\\n            importedUpdated += updated;\\n          } catch (error) {\\n            if (error.name !== undefined && error.name === \\\"CircularImport\\\") {\\n              $tw.utils.alert(name, error.message);\\n              break;\\n            }\\n            throw error;\\n          }\\n        }\\n      }\\n      // Imported root\\n      if (this.host !== null && this.root == null) {\\n        this.root = importedTitle;\\n      }\\n      // Retrieve target host Tiddler\\n      if (this.host !== null && this.host.fields.title === importedTitle) {\\n        currentTiddler = this.host;\\n      } else {\\n        currentTiddler = $tw.wiki.getTiddler(importedTitle);\\n      }\\n      // Retrieve or prepare merged content\\n      merged = this.processedImported.get(importedTitle);\\n      if (merged == undefined) {\\n        merged = new Object();\\n        this.processedImported.set(importedTitle, merged);\\n      }\\n      // Fields\\n      for (var field in importedTiddler) {\\n        // Discard\\n        if (field === \\\"tags\\\") {\\n          continue;\\n        }\\n        // Unknown from leaf to top, we keep the top modified field\\n        if (merged[field] == undefined || merged[field] == null || field === \\\"modified\\\") {\\n          merged[field] = importedTiddler[field];\\n        }\\n        if (field === \\\"type\\\") {\\n          merged[field] = type;\\n        }\\n      }\\n      // Tags,\\n      // We use the target tiddler to manage complex tags like [[IPFS Documentation]]\\n      if (currentTiddler !== undefined && currentTiddler !== null) {\\n        var tags = (currentTiddler.fields.tags || []).slice(0);\\n        for (var i = 0; i < tags.length; i++) {\\n          var tag = tags[i];\\n          if (importedTags.includes(tag) == false) {\\n            importedTags = importedTags + \\\" \\\" + tag;\\n          }\\n        }\\n      }\\n      // IPFS tag\\n      if ($tw.ipfs.isCid(key) && importedTags.includes(\\\"$:/isIpfs\\\") == false) {\\n        importedTags = importedTags + \\\" $:/isIpfs\\\";\\n      }\\n      // Imported tag\\n      if (importedTags.includes(\\\"$:/isImported\\\") == false) {\\n        importedTags = importedTags + \\\" $:/isImported\\\";\\n      }\\n      // Processed tags\\n      merged[\\\"tags\\\"] = importedTags;\\n      // URI\\n      if (info.encoding === \\\"base64\\\" || type === \\\"image/svg+xml\\\") {\\n        merged[\\\"_import_uri\\\"] = importedUrl;\\n      } else {\\n        var canonical_uri = merged[\\\"_canonical_uri\\\"];\\n        if (canonical_uri == undefined || canonical_uri == null) {\\n          merged[\\\"_canonical_uri\\\"] = importedUrl;\\n          // import_uri\\n        } else if (canonical_uri !== importedUrl) {\\n          merged[\\\"_import_uri\\\"] = importedUrl;\\n        }\\n      }\\n      // Count\\n      if (currentTiddler !== undefined && currentTiddler !== null) {\\n        importedUpdated += 1;\\n      } else {\\n        importedAdded += 1;\\n      }\\n      // Processed Titles\\n      var titles = this.processedTitles.get(importedTitle);\\n      if (titles == undefined) {\\n        titles = new Array();\\n        this.processedTitles.set(importedTitle, titles);\\n      }\\n      if (key !== null) {\\n        if (titles.indexOf(key) === -1) {\\n          titles.push(key);\\n        }\\n      } else {\\n        if (titles.indexOf(importedNormalizedUrl) === -1) {\\n          titles.push(importedNormalizedUrl);\\n        }\\n      }\\n    }\\n    return {\\n      added: importedAdded,\\n      updated: importedUpdated,\\n    };\\n  };\\n  exports.IpfsImport = IpfsImport;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/macro/ipfs-info-saver.js\": {\n            \"title\": \"$:/plugins/ipfs/macro/ipfs-info-saver.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/macro/ipfs-info-saver.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: macro\\n\\nIPFS info saver\\n\\n\\\\*/\\n\\n(function() {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  /*\\n   * Information about this macro\\n   */\\n  exports.name = \\\"ipfs-info-saver\\\";\\n\\n  exports.params = [{ name: \\\"tiddler\\\" }];\\n\\n  /*\\n   * Run the macro\\n   */\\n  exports.run = function(tiddler) {\\n    return $tw.saverHandler.getSaver(tiddler).module.info.name;\\n  };\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/plugins/ipfs/modules/widgets/ipfs-link.js\": {\n            \"title\": \"$:/plugins/ipfs/modules/widgets/ipfs-link.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/modules/widgets/ipfs-link.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nIPFS link widget\\n\\n\\\\*/\\n\\n/**\\n * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n *\\n * Copyright (c) 2004-2007, Jeremy Ruston\\n * Copyright (c) 2007-2018, UnaMesa Association\\n * Copyright (c) 2019-2020, Blue Light\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * * Redistributions of source code must retain the above copyright notice, this\\n *   list of conditions and the following disclaimer.\\n *\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n *   this list of conditions and the following disclaimer in the documentation\\n *   and/or other materials provided with the distribution.\\n *\\n * * Neither the name of the copyright holder nor the names of its\\n *   contributors may be used to endorse or promote products derived from\\n *   this software without specific prior written permission.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  var Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\n  const name = \\\"ipfs-link\\\";\\n\\n  var IpfsLinkWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options);\\n  };\\n\\n  /*\\n   * Inherit from the base widget class\\n   */\\n  IpfsLinkWidget.prototype = new Widget();\\n\\n  IpfsLinkWidget.prototype.getLogger = function () {\\n    return window.log.getLogger(name);\\n  };\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  IpfsLinkWidget.prototype.render = function (parent, nextSibling) {\\n    var self = this;\\n    // Save the parent dom node\\n    this.parentDomNode = parent;\\n    // Compute our attributes\\n    this.computeAttributes();\\n    // Execute our logic\\n    this.execute();\\n    // Tiddler link\\n    var tiddler = $tw.wiki.getTiddler(this.value);\\n    if (tiddler !== undefined && tiddler !== null) {\\n      this.renderTiddlerLink(parent, nextSibling);\\n    } else {\\n      this.renderText(parent, nextSibling);\\n      $tw.ipfs\\n        .resolveUrl(false, false, this.value)\\n        .then((data) => {\\n          var { normalizedUrl } = data;\\n          if (normalizedUrl !== null) {\\n            self.removeChildDomNodes();\\n            self.renderExternalLink(parent, nextSibling, normalizedUrl);\\n          }\\n        })\\n        .catch((error) => {\\n          // Ignore\\n        });\\n    }\\n  };\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  IpfsLinkWidget.prototype.renderExternalLink = function (parent, nextSibling, url) {\\n    // Link\\n    var domNode = this.document.createElement(\\\"a\\\");\\n    domNode.setAttribute(\\\"href\\\", url);\\n    // Add a click event handler\\n    $tw.utils.addEventListeners(domNode, [\\n      { name: \\\"click\\\", handlerObject: this, handlerMethod: \\\"handleExternalClickEvent\\\" },\\n    ]);\\n    // Assign classes\\n    var classes = [];\\n    if (this.classes) {\\n      classes.push(this.classes);\\n    }\\n    if (classes.length > 0) {\\n      domNode.setAttribute(\\\"class\\\", classes.join(\\\" \\\"));\\n    }\\n    if (this[\\\"aria-label\\\"]) {\\n      domNode.setAttribute(\\\"aria-label\\\", this[\\\"aria-label\\\"]);\\n    }\\n    // Insert the URL into the DOM and render any children\\n    parent.insertBefore(domNode, nextSibling);\\n    // Process\\n    this.renderChildren(domNode, null);\\n    this.domNodes.push(domNode);\\n  };\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  IpfsLinkWidget.prototype.renderTiddlerLink = function (parent, nextSibling) {\\n    // self\\n    var self = this;\\n    // Sanitise the specified tag\\n    var tag = this.linkTag;\\n    if ($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\\n      tag = \\\"a\\\";\\n    }\\n    // Create our element\\n    var domNode = this.document.createElement(tag);\\n    // Assign classes\\n    var classes = [];\\n    if (this.overrideClasses === undefined) {\\n      classes.push(\\\"tc-tiddlylink\\\");\\n      if (this.isShadow) {\\n        classes.push(\\\"tc-tiddlylink-shadow\\\");\\n      }\\n      if (this.isMissing && !this.isShadow) {\\n        classes.push(\\\"tc-tiddlylink-missing\\\");\\n      } else {\\n        if (!this.isMissing) {\\n          classes.push(\\\"tc-tiddlylink-resolves\\\");\\n        }\\n      }\\n      if (this.linkClasses) {\\n        classes.push(this.linkClasses);\\n      }\\n    } else if (this.overrideClasses !== \\\"\\\") {\\n      classes.push(this.overrideClasses);\\n    }\\n    if (classes.length > 0) {\\n      domNode.setAttribute(\\\"class\\\", classes.join(\\\" \\\"));\\n    }\\n    // Set an href\\n    var wikilinkTransformFilter = this.getVariable(\\\"tv-filter-export-link\\\"),\\n      wikiLinkText;\\n    if (wikilinkTransformFilter) {\\n      // Use the filter to construct the href\\n      wikiLinkText = this.wiki.filterTiddlers(wikilinkTransformFilter, this, function (iterator) {\\n        iterator(self.wiki.getTiddler(self.value), self.value);\\n      })[0];\\n    } else {\\n      // Expand the tv-wikilink-template variable to construct the href\\n      var wikiLinkTemplateMacro = this.getVariable(\\\"tv-wikilink-template\\\"),\\n        wikiLinkTemplate = wikiLinkTemplateMacro ? wikiLinkTemplateMacro.trim() : \\\"#$uri_encoded$\\\";\\n      wikiLinkText = $tw.utils.replaceString(wikiLinkTemplate, \\\"$uri_encoded$\\\", encodeURIComponent(this.value));\\n      wikiLinkText = $tw.utils.replaceString(\\n        wikiLinkText,\\n        \\\"$uri_doubleencoded$\\\",\\n        encodeURIComponent(encodeURIComponent(this.value))\\n      );\\n    }\\n    // Override with the value of tv-get-export-link if defined\\n    wikiLinkText = this.getVariable(\\\"tv-get-export-link\\\", {\\n      params: [{ name: \\\"to\\\", value: this.value }],\\n      defaultValue: wikiLinkText,\\n    });\\n    if (tag === \\\"a\\\") {\\n      domNode.setAttribute(\\\"href\\\", wikiLinkText);\\n    }\\n    // Set the tabindex\\n    if (this.tabIndex) {\\n      domNode.setAttribute(\\\"tabindex\\\", this.tabIndex);\\n    }\\n    // Set the tooltip\\n    // HACK: Performance issues with re-parsing the tooltip prevent us defaulting the tooltip to \\\"<$transclude field='tooltip'><$transclude field='title'/></$transclude>\\\"\\n    var tooltipWikiText = this.tooltip || this.getVariable(\\\"tv-wikilink-tooltip\\\");\\n    if (tooltipWikiText) {\\n      var tooltipText = this.wiki.renderText(\\\"text/plain\\\", \\\"text/vnd.tiddlywiki\\\", tooltipWikiText, {\\n        parseAsInline: true,\\n        variables: {\\n          currentTiddler: this.value,\\n        },\\n        parentWidget: this,\\n      });\\n      domNode.setAttribute(\\\"title\\\", tooltipText);\\n    }\\n    if (this[\\\"aria-label\\\"]) {\\n      domNode.setAttribute(\\\"aria-label\\\", this[\\\"aria-label\\\"]);\\n    }\\n    // Add a click event handler\\n    $tw.utils.addEventListeners(domNode, [\\n      { name: \\\"click\\\", handlerObject: this, handlerMethod: \\\"handleTiddlerClickEvent\\\" },\\n    ]);\\n    // Make the link draggable if required\\n    if (this.draggable === \\\"yes\\\") {\\n      $tw.utils.makeDraggable({\\n        domNode: domNode,\\n        dragTiddlerFn: function () {\\n          return self.value;\\n        },\\n        widget: this,\\n      });\\n    }\\n    // Insert the link into the DOM and render any children\\n    parent.insertBefore(domNode, nextSibling);\\n    // Process\\n    this.renderChildren(domNode, null);\\n    this.domNodes.push(domNode);\\n  };\\n\\n  /*\\n   * Render this widget into the DOM\\n   */\\n  IpfsLinkWidget.prototype.renderText = function (parent, nextSibling) {\\n    var domNode = this.document.createElement(\\\"span\\\");\\n    // Insert the text into the DOM and render any children\\n    parent.insertBefore(domNode, nextSibling);\\n    // Process\\n    this.renderChildren(domNode, null);\\n    this.domNodes.push(domNode);\\n  };\\n\\n  IpfsLinkWidget.prototype.handleExternalClickEvent = function (event) {\\n    $tw.ipfs\\n      .resolveUrl(true, true, this.value)\\n      .then((data) => {\\n        var { resolvedUrl } = data;\\n        if (resolvedUrl !== null) {\\n          window.open(resolvedUrl.href, \\\"_blank\\\", \\\"noopener,noreferrer\\\");\\n        }\\n      })\\n      .catch((error) => {\\n        // Ignore\\n      });\\n    event.preventDefault();\\n    event.stopPropagation();\\n    return false;\\n  };\\n\\n  IpfsLinkWidget.prototype.handleTiddlerClickEvent = function (event) {\\n    // Send the click on its way as a navigate event\\n    var bounds = this.domNodes[0].getBoundingClientRect();\\n    this.dispatchEvent({\\n      type: \\\"tm-navigate\\\",\\n      navigateTo: this.value,\\n      navigateFromTitle: this.getVariable(\\\"storyTiddler\\\"),\\n      navigateFromNode: this,\\n      navigateFromClientRect: {\\n        top: bounds.top,\\n        left: bounds.left,\\n        width: bounds.width,\\n        right: bounds.right,\\n        bottom: bounds.bottom,\\n        height: bounds.height,\\n      },\\n      navigateSuppressNavigation: event.metaKey || event.ctrlKey || event.button === 1,\\n      metaKey: event.metaKey,\\n      ctrlKey: event.ctrlKey,\\n      altKey: event.altKey,\\n      shiftKey: event.shiftKey,\\n    });\\n    if (this.domNodes[0].hasAttribute(\\\"href\\\")) {\\n      event.preventDefault();\\n    }\\n    event.stopPropagation();\\n    return false;\\n  };\\n\\n  /*\\n   * Compute the internal state of the widget\\n   */\\n  IpfsLinkWidget.prototype.execute = function () {\\n    // Tiddler\\n    this.tiddler = this.getAttribute(\\\"tiddler\\\");\\n    // Internal link\\n    this.tooltip = this.getAttribute(\\\"tooltip\\\");\\n    this.overrideClasses = this.getAttribute(\\\"overrideClass\\\");\\n    this.tabIndex = this.getAttribute(\\\"tabindex\\\");\\n    this.draggable = this.getAttribute(\\\"draggable\\\", \\\"yes\\\");\\n    // Determine the link characteristics\\n    this.isMissing = !this.wiki.tiddlerExists(this.to);\\n    this.isShadow = this.wiki.isShadowTiddler(this.to);\\n    this.hideMissingLinks = (this.getVariable(\\\"tv-show-missing-links\\\") || \\\"yes\\\") === \\\"no\\\";\\n    // External link\\n    this.caption = this.getAttribute(\\\"caption\\\");\\n    this.value = this.getAttribute(\\\"value\\\");\\n    this.field = this.getAttribute(\\\"field\\\");\\n    this.linkTag = this.getAttribute(\\\"tag\\\", \\\"a\\\");\\n    const tiddler = $tw.wiki.getTiddler(this.tiddler);\\n    if (this.value == undefined) {\\n      this.value = tiddler.getFieldString(this.field);\\n    }\\n    this.target = this.getAttribute(\\\"target\\\") || \\\"_blank\\\";\\n    this.rel = this.getAttribute(\\\"rel\\\") || \\\"noopener\\\";\\n    this[\\\"aria-label\\\"] = this.getAttribute(\\\"aria-label\\\");\\n    this.classes = this.getAttribute(\\\"class\\\") || \\\"tc-ipfs-link-external\\\";\\n    this.makeChildWidgets([{ type: \\\"text\\\", text: this.caption }]);\\n  };\\n\\n  /*\\n   * Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n   */\\n  IpfsLinkWidget.prototype.refresh = function (changedTiddlers) {\\n    const changedAttributes = this.computeAttributes();\\n    const tiddler = $tw.wiki.getTiddler(this.tiddler);\\n    var value = null;\\n    if (this.field !== undefined && this.field !== null) {\\n      value = tiddler.getFieldString(this.field);\\n    }\\n    if (\\n      changedAttributes.caption ||\\n      changedTiddlers[this.caption] ||\\n      changedAttributes.field ||\\n      changedTiddlers[this.field] ||\\n      changedAttributes.value ||\\n      changedTiddlers[this.value] ||\\n      changedAttributes.to ||\\n      changedTiddlers[this.to] ||\\n      changedAttributes.tooltip ||\\n      changedAttributes[\\\"aria-label\\\"] ||\\n      changedTiddlers[\\\"$:/ipfs/saver/gateway\\\"] ||\\n      changedTiddlers[\\\"$:/ipfs/saver/policy\\\"] ||\\n      (value !== null && value !== this.value)\\n    ) {\\n      this.refreshSelf();\\n      return true;\\n    }\\n    return this.refreshChildren(changedTiddlers);\\n  };\\n\\n  exports.ipfslink = IpfsLinkWidget;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/ipfs/macro/ipfs-plugin-version.js\": {\n            \"title\": \"$:/plugins/ipfs/macro/ipfs-plugin-version.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/macro/ipfs-plugin-version.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: macro\\n\\nIPFS plugin version\\n\\n\\\\*/\\n\\n(function() {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  /*\\n   * Information about this macro\\n   */\\n  exports.name = \\\"ipfs-plugin-version\\\";\\n\\n  exports.params = [];\\n\\n  /*\\n   * Run the macro\\n   */\\n  exports.run = function() {\\n    return $tw.wiki.getTiddler(\\\"$:/plugins/ipfs\\\").fields.version;\\n  };\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"macro\"\n        },\n        \"$:/plugins/ipfs/ipfs-saver.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-saver.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-saver.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: saver\\n\\nIPFS Saver\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const log = require(\\\"$:/plugins/ipfs/loglevel/loglevel.js\\\");\\n\\n  const EnsAction = require(\\\"$:/plugins/ipfs/ens-action.js\\\").EnsAction;\\n  const IpfsAction = require(\\\"$:/plugins/ipfs/ipfs-action.js\\\").IpfsAction;\\n  const IpfsController = require(\\\"$:/plugins/ipfs/ipfs-controller.js\\\").IpfsController;\\n  const IpfsTiddler = require(\\\"$:/plugins/ipfs/ipfs-tiddler.js\\\").IpfsTiddler;\\n\\n  const ensKeyword = \\\"ens\\\";\\n  const ipfsKeyword = \\\"ipfs\\\";\\n  const ipnsKeyword = \\\"ipns\\\";\\n\\n  const name = \\\"ipfs-saver\\\";\\n\\n  /*\\n   * Select the appropriate saver module and set it up\\n   */\\n  var IpfsSaver = function (wiki) {\\n    this.wiki = wiki;\\n    this.apiUrl = null;\\n    this.ipfsProvider = null;\\n    // Loglevel\\n    if (window.log == undefined || window.log == null) {\\n      // Init\\n      window.log = log;\\n      if ($tw.utils.getIpfsVerbose()) {\\n        log.setLevel(\\\"info\\\", false);\\n      } else {\\n        log.setLevel(\\\"warn\\\", false);\\n      }\\n    }\\n    // Controller\\n    $tw.ipfs = new IpfsController();\\n    // Listener\\n    this.ensAction = new EnsAction();\\n    this.ipfsAction = new IpfsAction();\\n    this.ipfsTiddler = new IpfsTiddler();\\n    // Init\\n    this.ensAction.init();\\n    this.ipfsAction.init();\\n    this.ipfsTiddler.init();\\n    // Logger\\n    const logger = window.log.getLogger(name);\\n    // Log\\n    logger.info(\\\"ipfs-saver is starting up...\\\");\\n    // Log url policy\\n    const base = $tw.ipfs.getIpfsBaseUrl();\\n    if ($tw.utils.getIpfsUrlPolicy() === \\\"origin\\\") {\\n      logger.info(\\\"Origin base URL:\\\" + \\\"\\\\n \\\" + base);\\n    } else {\\n      logger.info(\\\"Gateway base URL:\\\" + \\\"\\\\n \\\" + base);\\n    }\\n  };\\n\\n  IpfsSaver.prototype.getLogger = function () {\\n    return window.log.getLogger(name);\\n  };\\n\\n  IpfsSaver.prototype.save = async function (text, method, callback, options) {\\n    if ($tw.saverHandler.isDirty() == false) {\\n      return false;\\n    }\\n    try {\\n      var cid = null;\\n      var ipnsCid = null;\\n      var ipnsKey = null;\\n      var ipnsName = null;\\n      var ensDomain = null;\\n      var ensCid = null;\\n      var options = options || {};\\n      const wiki = $tw.ipfs.getDocumentUrl();\\n      const base = $tw.ipfs.getIpfsBaseUrl();\\n      const nextWiki = $tw.ipfs.getUrl(wiki);\\n      nextWiki.protocol = base.protocol;\\n      nextWiki.hostname = base.hostname;\\n      nextWiki.port = base.port;\\n      try {\\n        var { cid, ipnsKey } = await $tw.ipfs.resolveUrl(false, true, wiki);\\n        if (cid != null) {\\n          $tw.ipfs.requestToUnpin(cid);\\n        }\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        callback(error.message);\\n        return true;\\n      }\\n      // IPNS\\n      if (ipnsKey !== null || $tw.utils.getIpfsProtocol() === ipnsKeyword) {\\n        // Resolve current IPNS\\n        if (ipnsKey !== null) {\\n          try {\\n            var { cid: ipnsCid, ipnsName } = await $tw.ipfs.resolveUrl(true, false, wiki);\\n          } catch (error) {\\n            this.getLogger().error(error);\\n            $tw.utils.alert(name, error.message);\\n          }\\n        } else {\\n          // Default IPNS\\n          ipnsKey = $tw.utils.getIpfsIpnsKey();\\n          ipnsName = $tw.utils.getIpfsIpnsName();\\n          if ((ipnsKey == undefined || ipnsKey == null) && (ipnsName == undefined || ipnsName == null)) {\\n            callback(\\\"Unknown default IPNS identifiers...\\\");\\n            return true;\\n          }\\n          this.getLogger().info(\\\"Processing default IPNS identifiers...\\\");\\n          var identifier = ipnsKey;\\n          if (identifier == undefined || identifier == null) {\\n            identifier = ipnsName;\\n          }\\n          try {\\n            var { cid: ipnsCid, ipnsKey, ipnsName } = await $tw.ipfs.resolveUrl(\\n              true,\\n              false,\\n              \\\"/\\\" + ipnsKeyword + \\\"/\\\" + identifier\\n            );\\n          } catch (error) {\\n            this.getLogger().error(error);\\n            $tw.utils.alert(name, error.message);\\n          }\\n        }\\n        if (ipnsCid != null) {\\n          $tw.ipfs.requestToUnpin(ipnsCid);\\n        }\\n      }\\n      // ENS\\n      if ($tw.utils.getIpfsProtocol() === ensKeyword) {\\n        ensDomain = $tw.utils.getIpfsEnsDomain();\\n        if (ensDomain == null) {\\n          callback(\\\"Undefined ENS domain...\\\");\\n          return true;\\n        }\\n        var { cid: ensCid } = await $tw.ipfs.resolveUrl(false, true, ensDomain);\\n        if (ensCid != null) {\\n          $tw.ipfs.requestToUnpin(ensCid);\\n        }\\n      }\\n      // Upload  current document\\n      this.getLogger().info(\\\"Uploading wiki: \\\" + text.length + \\\" bytes\\\");\\n      // Add\\n      const { added } = await $tw.ipfs.addToIpfs(text);\\n      // Default next\\n      nextWiki.pathname = \\\"/\\\" + ipfsKeyword + \\\"/\\\" + added;\\n      // Pin\\n      try {\\n        await $tw.ipfs.pinToIpfs(added);\\n      } catch (error) {\\n        this.getLogger().warn(error);\\n        $tw.utils.alert(name, error.message);\\n      }\\n      // Publish to IPNS\\n      if (ipnsKey !== null && ipnsName !== null) {\\n        $tw.utils.alert(name, \\\"Publishing IPNS name: \\\" + ipnsName);\\n        try {\\n          await $tw.ipfs.publishIpnsName(added, ipnsKey, ipnsName);\\n          nextWiki.pathname = \\\"/\\\" + ipnsKeyword + \\\"/\\\" + ipnsKey;\\n          $tw.utils.alert(name, \\\"Successfully Published IPNS name: \\\" + ipnsName);\\n        } catch (error) {\\n          this.getLogger().warn(error);\\n          $tw.utils.alert(name, error.message);\\n          $tw.ipfs.requestToPin(ipnsCid);\\n        }\\n      }\\n      // Publish to ENS\\n      if ($tw.utils.getIpfsProtocol() === ensKeyword) {\\n        try {\\n          $tw.utils.alert(name, \\\"Publishing to ENS: \\\" + ensDomain);\\n          await $tw.ipfs.setEns(ensDomain, added);\\n          nextWiki.protocol = \\\"https:\\\";\\n          nextWiki.host = ensDomain;\\n          $tw.utils.alert(name, \\\"Successfully published to ENS: \\\" + ensDomain);\\n        } catch (error) {\\n          this.getLogger().warn(error);\\n          $tw.utils.alert(name, error.message);\\n          $tw.ipfs.requestToPin(ensCid);\\n        }\\n      }\\n      $tw.ipfs.pin = [];\\n      // Unpin\\n      if ($tw.utils.getIpfsUnpin()) {\\n        for (var i in $tw.ipfs.unpin) {\\n          try {\\n            const unpin = $tw.ipfs.unpin[i];\\n            await $tw.ipfs.unpinFromIpfs(unpin);\\n          } catch (error) {\\n            this.getLogger().warn(error);\\n            $tw.utils.alert(name, error.message);\\n          }\\n        }\\n      }\\n      $tw.ipfs.unpin = [];\\n      // Pin\\n      for (var i in $tw.ipfs.pin) {\\n        try {\\n          const pin = $tw.ipfs.pin[i];\\n          await $tw.ipfs.pinToIpfs(pin);\\n        } catch (error) {\\n          this.getLogger().warn(error);\\n          $tw.utils.alert(name, error.message);\\n        }\\n      }\\n      callback(null);\\n      if (nextWiki.hostname !== wiki.hostname || nextWiki.pathname !== wiki.pathname) {\\n        window.location.assign(nextWiki.href);\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      callback(error.message);\\n      return true;\\n    }\\n    callback(null);\\n    return true;\\n  };\\n\\n  /*\\n   * Information about this saver\\n   */\\n  IpfsSaver.prototype.info = {\\n    name: \\\"Ipfs\\\",\\n    priority: 3100,\\n    capabilities: [\\\"save\\\"],\\n  };\\n\\n  /*\\n   * Static method that returns true if this saver is capable of working\\n   */\\n  exports.canSave = function (wiki) {\\n    return true;\\n  };\\n\\n  /*\\n   * Create an instance of this saver\\n   */\\n  exports.create = function (wiki) {\\n    return new IpfsSaver(wiki);\\n  };\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"saver\"\n        },\n        \"$:/plugins/ipfs/operator/ipfs-savers.js\": {\n            \"title\": \"$:/plugins/ipfs/operator/ipfs-savers.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/operator/ipfs-savers.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nThis Filter operator return savers title\\n\\n\\\\*/\\n(function() {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  /*\\n  Export our filter function\\n  */\\n  exports.savers = function(source, operator, options) {\\n    var results = [];\\n    for (var i in $tw.saverHandler.savers) {\\n      results.push($tw.saverHandler.savers[i].title);\\n    }\\n    return results;\\n  };\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"filteroperator\"\n        },\n        \"$:/plugins/ipfs/ipfs-startup.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-startup.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-startup.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: startup\\n\\nStartup initialisation\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  exports.platforms = [\\\"browser\\\"];\\n  exports.after = [\\\"startup\\\"];\\n  exports.synchronous = true;\\n\\n  exports.startup = function () {\\n    // Logger name\\n    const name = \\\"ipfs-startup\\\";\\n    // Missing Media Types\\n    $tw.utils.registerFileType(\\\"audio/mpeg\\\", \\\"base64\\\", \\\".mp2\\\");\\n    $tw.utils.registerFileType(\\\"video/quicktime\\\", \\\"base64\\\", [\\\".mov\\\", \\\".qt\\\"]);\\n    $tw.utils.registerFileType(\\\"application/gzip\\\", \\\"base64\\\", \\\".gz\\\");\\n    // Log\\n    const logger = window.log.getLogger(name);\\n    logger.info(\\\"ipfs-startup is starting up...\\\");\\n  };\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/ipfs/ipfs-tiddler.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-tiddler.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-tiddler.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Tiddler\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  const IpfsImport = require(\\\"$:/plugins/ipfs/ipfs-import.js\\\").IpfsImport;\\n\\n  const name = \\\"ipfs-tiddler\\\";\\n\\n  /*\\n   * https://tiddlywiki.com/#TiddlerFields\\n   * $:/core/modules/server/routes/get-tiddler.js\\n   * TODO: expose it as Tiddler ??\\n   */\\n  const reservedFields = [\\n    \\\"bag\\\",\\n    \\\"caption\\\",\\n    \\\"class\\\",\\n    \\\"color\\\",\\n    \\\"description\\\",\\n    \\\"created\\\",\\n    \\\"creator\\\",\\n    \\\"fields\\\",\\n    \\\"footer\\\",\\n    \\\"hide-body\\\",\\n    \\\"icon\\\",\\n    \\\"_is_skinny\\\",\\n    \\\"library\\\",\\n    \\\"list\\\",\\n    \\\"list-after\\\",\\n    \\\"list-before\\\",\\n    \\\"modified\\\",\\n    \\\"modifier\\\",\\n    \\\"name\\\",\\n    \\\"plugin-priority\\\",\\n    \\\"plugin-type\\\",\\n    \\\"permissions\\\",\\n    \\\"recipe\\\",\\n    \\\"revision\\\",\\n    // \\\"source\\\",\\n    \\\"subtitle\\\",\\n    \\\"tags\\\",\\n    \\\"text\\\",\\n    // \\\"url\\\",\\n    \\\"throttle.refresh\\\",\\n    \\\"toc-link\\\",\\n    \\\"title\\\",\\n    \\\"type\\\",\\n  ];\\n\\n  var IpfsTiddler = function () {\\n    this.once = false;\\n  };\\n\\n  IpfsTiddler.prototype.getLogger = function () {\\n    return window.log.getLogger(name);\\n  };\\n\\n  IpfsTiddler.prototype.init = function () {\\n    // Init once\\n    if (this.once) {\\n      return;\\n    }\\n    const self = this;\\n    // Wiki\\n    $tw.wiki.addEventListener(\\\"change\\\", function (changes) {\\n      return self.handleChangeEvent(changes);\\n    });\\n    // Hook\\n    $tw.hooks.addHook(\\\"th-deleting-tiddler\\\", async function (tiddler) {\\n      return await self.handleDeleteTiddler(tiddler);\\n    });\\n    $tw.hooks.addHook(\\\"th-importing-tiddler\\\", function (tiddler) {\\n      return self.handleFileImport(tiddler);\\n    });\\n    $tw.hooks.addHook(\\\"th-saving-tiddler\\\", async function (tiddler) {\\n      return await self.handleSaveTiddler(tiddler);\\n    });\\n    // Widget\\n    $tw.rootWidget.addEventListener(\\\"tm-ipfs-pin\\\", function (event) {\\n      return self.handleIpfsPin(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-refresh-tiddler\\\", function (event) {\\n      return self.handleRefreshTiddler(event);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tm-ipfs-unpin\\\", function (event) {\\n      return self.handleIpfsUnpin(event);\\n    });\\n    // Init once\\n    this.once = true;\\n  };\\n\\n  IpfsTiddler.prototype.handleChangeEvent = function (changes) {\\n    // Gateway preference\\n    const gateway = changes[\\\"$:/ipfs/saver/gateway\\\"];\\n    if (gateway !== undefined && gateway.modified) {\\n      const base = $tw.ipfs.getIpfsBaseUrl();\\n      if ($tw.utils.getIpfsUrlPolicy() === \\\"gateway\\\") {\\n        this.getLogger().info(\\\"Gateway Relative URL:\\\" + \\\"\\\\n \\\" + base);\\n      }\\n    }\\n    // Policy preference\\n    const policy = changes[\\\"$:/ipfs/saver/policy\\\"];\\n    if (policy !== undefined && policy.modified) {\\n      const base = $tw.ipfs.getIpfsBaseUrl();\\n      if ($tw.utils.getIpfsUrlPolicy() === \\\"origin\\\") {\\n        this.getLogger().info(\\\"Origin base URL:\\\" + \\\"\\\\n \\\" + base);\\n      } else {\\n        this.getLogger().info(\\\"Gateway base URL:\\\" + \\\"\\\\n \\\" + base);\\n      }\\n    }\\n    // Unpin preference\\n    const unpin = changes[\\\"$:/ipfs/saver/unpin\\\"];\\n    if (unpin !== undefined && unpin.modified) {\\n      if ($tw.utils.getIpfsUnpin()) {\\n        this.getLogger().info(\\\"Unpin previous IPFS content...\\\");\\n      } else {\\n        this.getLogger().info(\\\"Do not unpin previous IPFS content...\\\");\\n      }\\n    }\\n    // Verbose preference\\n    const verbose = changes[\\\"$:/ipfs/saver/verbose\\\"];\\n    if (verbose !== undefined && verbose.modified) {\\n      if ($tw.utils.getIpfsVerbose()) {\\n        this.updateLoggers(\\\"info\\\");\\n      } else {\\n        this.updateLoggers(\\\"warn\\\");\\n      }\\n    }\\n  };\\n\\n  IpfsTiddler.prototype.handleIpfsPin = function (event) {\\n    const title = event.tiddlerTitle;\\n    const tiddler = $tw.wiki.getTiddler(title);\\n    if (event.param !== undefined && event.param !== null) {\\n      // Tiddler\\n      for (var field in tiddler.fields) {\\n        if (reservedFields.indexOf(field) !== -1) {\\n          continue;\\n        }\\n        const value = tiddler.getFieldString(field);\\n        if (value !== undefined && value !== null) {\\n          this.ipfsPin(value, field);\\n        }\\n      }\\n    } else {\\n      // Wiki\\n      this.ipfsPin($tw.ipfs.getDocumentUrl().href, \\\"Wiki\\\");\\n    }\\n    return true;\\n  };\\n\\n  IpfsTiddler.prototype.ipfsPin = function (value, field) {\\n    if (value == undefined || value == null || value.trim() === \\\"\\\") {\\n      return;\\n    }\\n    if (field == undefined || field == null || field.trim() === \\\"\\\") {\\n      return;\\n    }\\n    const self = this;\\n    $tw.ipfs\\n      .resolveUrl(true, true, value)\\n      .then((data) => {\\n        const { cid, resolvedUrl } = data;\\n        if (resolvedUrl !== null && cid !== null) {\\n          self.getLogger().info(\\\"Pinning: '\\\" + field + \\\"'.\\\\n \\\" + resolvedUrl);\\n          $tw.ipfs\\n            .pinToIpfs(cid)\\n            .then((data) => {\\n              $tw.ipfs.removeFromPinUnpin(cid);\\n              $tw.utils.alert(\\n                name,\\n                'Successfully Pinned : <a rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" href=\\\"' + resolvedUrl + '\\\">' + field\\n              );\\n            })\\n            .catch((error) => {\\n              self.getLogger().error(error);\\n              $tw.utils.alert(name, error.message);\\n            });\\n        } else {\\n          $tw.utils.alert(name, \\\"Nothing to pin...\\\");\\n        }\\n      })\\n      .catch((error) => {\\n        self.getLogger().error(error);\\n        $tw.utils.alert(name, error.message);\\n      });\\n  };\\n\\n  IpfsTiddler.prototype.handleIpfsUnpin = async function (event) {\\n    const title = event.tiddlerTitle;\\n    const tiddler = $tw.wiki.getTiddler(title);\\n    if (event.param !== undefined && event.param !== null) {\\n      // Tiddler\\n      for (var field in tiddler.fields) {\\n        if (reservedFields.indexOf(field) !== -1) {\\n          continue;\\n        }\\n        const value = tiddler.getFieldString(field);\\n        if (value !== undefined && value !== null) {\\n          this.ipfsUnpin(value, field);\\n        }\\n      }\\n    } else {\\n      // Wiki\\n      this.ipfsUnpin($tw.ipfs.getDocumentUrl().href, \\\"Wiki\\\");\\n    }\\n    return true;\\n  };\\n\\n  IpfsTiddler.prototype.ipfsUnpin = function (value, field) {\\n    if (value == undefined || value == null || value.trim() === \\\"\\\") {\\n      return;\\n    }\\n    if (field == undefined || field == null || field.trim() === \\\"\\\") {\\n      return;\\n    }\\n    const self = this;\\n    $tw.ipfs\\n      .resolveUrl(true, true, value)\\n      .then((data) => {\\n        const { cid, resolvedUrl } = data;\\n        if (resolvedUrl !== null && cid !== null) {\\n          self.getLogger().info(\\\"Unpinning: '\\\" + field + \\\"'.\\\\n \\\" + resolvedUrl);\\n          $tw.ipfs\\n            .unpinFromIpfs(cid)\\n            .then((data) => {\\n              $tw.ipfs.removeFromPinUnpin(cid);\\n              $tw.utils.alert(\\n                name,\\n                'Successfully Unpinned : <a rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" href=\\\"' +\\n                  resolvedUrl +\\n                  '\\\">' +\\n                  field\\n              );\\n            })\\n            .catch((error) => {\\n              self.getLogger().error(error);\\n              $tw.utils.alert(name, error.message);\\n            });\\n        } else {\\n          $tw.utils.alert(name, \\\"Nothing to unpin...\\\");\\n        }\\n      })\\n      .catch((error) => {\\n        self.getLogger().error(error);\\n        $tw.utils.alert(name, error.message);\\n      });\\n  };\\n\\n  IpfsTiddler.prototype.updateLoggers = function (level) {\\n    window.log.setLevel(level, false);\\n    const loggers = window.log.getLoggers();\\n    for (var property in loggers) {\\n      if (Object.prototype.hasOwnProperty.call(loggers, property)) {\\n        const logger = window.log.getLogger(property);\\n        logger.setLevel(level, false);\\n      }\\n    }\\n  };\\n\\n  IpfsTiddler.prototype.handleDeleteTiddler = async function (tiddler) {\\n    try {\\n      const { type, info } = $tw.utils.getContentType(tiddler);\\n      // Process\\n      var field = null;\\n      if (info.encoding === \\\"base64\\\" || type === \\\"image/svg+xml\\\") {\\n        field = \\\"_canonical_uri\\\";\\n      } else {\\n        field = \\\"_export_uri\\\";\\n      }\\n      // Value\\n      var url = null;\\n      const value = tiddler.getFieldString(field);\\n      if (value !== undefined && value !== null && value !== \\\"\\\") {\\n        // URL or not\\n        try {\\n          url = $tw.ipfs.normalizeUrl(value);\\n        } catch (error) {\\n          // Ignore\\n        }\\n        // Process\\n        if (url !== undefined && url !== null) {\\n          const { cid } = $tw.ipfs.decodeCid(url.pathname);\\n          // Request to unpin\\n          if ($tw.utils.getIpfsUnpin() && cid !== null) {\\n            $tw.ipfs.requestToUnpin(cid);\\n          }\\n        }\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n    }\\n    return tiddler;\\n  };\\n\\n  IpfsTiddler.prototype.handleFileImport = function (tiddler) {\\n    // Update tiddler\\n    const addition = $tw.wiki.getModificationFields();\\n    addition.title = tiddler.fields.title;\\n    addition.tags = (tiddler.fields.tags || []).slice(0);\\n    // Add isAttachment tag\\n    if (addition.tags.indexOf(\\\"$:/isAttachment\\\") == -1) {\\n      $tw.utils.pushTop(addition.tags, \\\"$:/isAttachment\\\");\\n    }\\n    // Add isEmbedded tag\\n    if (addition.tags.indexOf(\\\"$:/isEmbedded\\\") == -1) {\\n      $tw.utils.pushTop(addition.tags, \\\"$:/isEmbedded\\\");\\n    }\\n    return new $tw.Tiddler(tiddler, addition);\\n  };\\n\\n  IpfsTiddler.prototype.handleRefreshTiddler = function (event) {\\n    const self = this;\\n    const title = event.tiddlerTitle;\\n    const tiddler = $tw.wiki.getTiddler(title);\\n    const { type, info } = $tw.utils.getContentType(tiddler);\\n    var hasCanonicalUrl = false;\\n    var canonicalUrl = tiddler.getFieldString(\\\"_canonical_uri\\\");\\n    if (canonicalUrl !== undefined && canonicalUrl !== null && canonicalUrl !== \\\"\\\") {\\n      hasCanonicalUrl = true;\\n    } else {\\n      canonicalUrl = null;\\n    }\\n    var hasImportUrl = false;\\n    var importUrl = tiddler.getFieldString(\\\"_import_uri\\\");\\n    if (importUrl !== undefined && importUrl !== null && importUrl !== \\\"\\\") {\\n      hasImportUrl = true;\\n    } else {\\n      importUrl = null;\\n    }\\n    // Nothing to do\\n    if (hasCanonicalUrl === false && hasImportUrl === false) {\\n      $tw.utils.alert(name, \\\"Nothing to refresh here...\\\");\\n      return true;\\n    }\\n    // Reload Attachment content\\n    if ((info.encoding === \\\"base64\\\" || type === \\\"image/svg+xml\\\") && hasCanonicalUrl && hasImportUrl === false) {\\n      const updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: tiddler,\\n        fields: [{ key: \\\"text\\\", value: \\\"\\\" }],\\n      });\\n      $tw.wiki.addTiddler(updatedTiddler);\\n      return true;\\n    }\\n    // Async Import\\n    var ipfsImport = new IpfsImport();\\n    ipfsImport.loadRemoteTiddlers(importUrl, canonicalUrl, title).catch((error) => {\\n      self.getLogger().error(error);\\n      $tw.utils.alert(name, error.message);\\n    });\\n    return true;\\n  };\\n\\n  IpfsTiddler.prototype.handleSaveTiddler = async function (tiddler) {\\n    // Previous tiddler\\n    const oldTiddler = $tw.wiki.getTiddler(tiddler.fields.title);\\n    const { type, info } = $tw.utils.getContentType(tiddler);\\n    // Prepare\\n    var updatedTiddler = new $tw.Tiddler(tiddler);\\n    // Process deleted fields\\n    if (oldTiddler !== undefined && oldTiddler !== null) {\\n      for (var field in oldTiddler.fields) {\\n        // Not a reserved keyword\\n        if (reservedFields.indexOf(field) !== -1) {\\n          continue;\\n        }\\n        // Updated\\n        const discard = tiddler.fields[field];\\n        if (discard !== undefined && discard !== null && tiddler.getFieldString(field) !== \\\"\\\") {\\n          continue;\\n        }\\n        // Process\\n        var oldCid = null;\\n        var oldIpnsKey = null;\\n        var oldNormalizedUrl = null;\\n        var oldResolvedUrl = null;\\n        var oldUrl = null;\\n        var oldValue = oldTiddler.getFieldString(field);\\n        try {\\n          var {\\n            cid: oldCid,\\n            ipnsKey: oldIpnsKey,\\n            normalizedUrl: oldNormalizedUrl,\\n            resolvedUrl: oldResolvedUrl,\\n          } = await $tw.ipfs.resolveUrl(false, true, oldValue);\\n        } catch (error) {\\n          this.getLogger().error(error);\\n          $tw.utils.alert(name, error.message);\\n          return tiddler;\\n        }\\n        var oldUrl =\\n          oldResolvedUrl !== null ? oldResolvedUrl.href : oldNormalizedUrl !== null ? oldNormalizedUrl.href : null;\\n        if (oldUrl !== null && field === \\\"_canonical_uri\\\") {\\n          var content = tiddler.getFieldString(\\\"text\\\");\\n          // Attachment\\n          if (info.encoding === \\\"base64\\\" || type === \\\"image/svg+xml\\\") {\\n            // Embed\\n            try {\\n              if (info.encoding === \\\"base64\\\") {\\n                content = await $tw.ipfs.loadToBase64(oldUrl.href);\\n              } else {\\n                content = await $tw.ipfs.loadToUtf8(oldUrl.href);\\n              }\\n              updatedTiddler = $tw.utils.updateTiddler({\\n                tiddler: updatedTiddler,\\n                addTags: [\\\"$:/isAttachment\\\", \\\"$:/isEmbedded\\\"],\\n                fields: [{ key: \\\"text\\\", value: content.data }],\\n              });\\n              this.getLogger().info(\\\"Embed attachment: \\\" + content.data.length + \\\" bytes\\\" + \\\"\\\\n \\\" + oldUrl);\\n            } catch (error) {\\n              this.getLogger().error(error);\\n              $tw.utils.alert(name, error.message);\\n              return tiddler;\\n            }\\n          }\\n        }\\n        $tw.ipfs.requestToUnpin(oldCid, oldIpnsKey, oldNormalizedUrl);\\n      }\\n    }\\n    var canonicalUri = null;\\n    var exportUri = null;\\n    var importUri = null;\\n    var canonicalCid = null;\\n    var exportCid = null;\\n    var importCid = null;\\n    // Process new and updated fields\\n    for (var field in tiddler.fields) {\\n      // Not a reserved keyword\\n      if (reservedFields.indexOf(field) !== -1) {\\n        continue;\\n      }\\n      // Process\\n      var cid = null;\\n      var ipnsKey = null;\\n      var normalizedUrl = null;\\n      var resolvedUrl = null;\\n      var value = tiddler.getFieldString(field);\\n      try {\\n        var { cid, ipnsKey, normalizedUrl, resolvedUrl } = await $tw.ipfs.resolveUrl(false, true, value);\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        $tw.utils.alert(name, error.message);\\n        return tiddler;\\n      }\\n      // Store\\n      var url = resolvedUrl !== null ? resolvedUrl.href : normalizedUrl !== null ? normalizedUrl.href : null;\\n      if (field === \\\"_canonical_uri\\\") {\\n        canonicalUri = url;\\n        canonicalCid = cid;\\n      }\\n      if (field === \\\"_import_uri\\\") {\\n        importUri = url;\\n        importCid = cid;\\n      }\\n      if (field === \\\"_export_uri\\\") {\\n        exportUri = url;\\n        exportCid = cid;\\n      }\\n      // Previous values if any\\n      var oldValue = null;\\n      if (oldTiddler !== undefined && oldTiddler !== null) {\\n        oldValue = oldTiddler.getFieldString(field);\\n      }\\n      // Process new or updated\\n      if (value === oldValue) {\\n        continue;\\n      }\\n      var oldCid = null;\\n      var oldIpnsKey = null;\\n      var oldNormalizedUrl = null;\\n      try {\\n        var { cid: oldCid, ipnsKey: oldIpnsKey, normalizedUrl: oldNormalizedUrl } = await $tw.ipfs.resolveUrl(\\n          false,\\n          true,\\n          oldValue\\n        );\\n      } catch (error) {\\n        this.getLogger().error(error);\\n        $tw.utils.alert(name, error.message);\\n        return tiddler;\\n      }\\n      // Process _canonical_uri\\n      if (field === \\\"_canonical_uri\\\") {\\n        updatedTiddler = $tw.utils.updateTiddler({\\n          tiddler: updatedTiddler,\\n          fields: [{ key: \\\"text\\\", value: \\\"\\\" }],\\n        });\\n      }\\n      $tw.ipfs.requestToPin(cid, ipnsKey, normalizedUrl);\\n      $tw.ipfs.requestToUnpin(oldCid, oldIpnsKey, oldNormalizedUrl);\\n    }\\n    // Tag management\\n    var addTags = [];\\n    var removeTags = [];\\n    if (canonicalUri == null && exportUri == null && importUri == null) {\\n      removeTags.push(\\\"$:/isExported\\\", \\\"$:/isImported\\\", \\\"$:/isIpfs\\\");\\n    }\\n    if (canonicalCid == null && exportCid == null && importCid == null) {\\n      if (removeTags.indexOf(\\\"$:/isIpfs\\\") === -1) {\\n        removeTags.push(\\\"$:/isIpfs\\\");\\n      }\\n    } else {\\n      addTags.push(\\\"$:/isIpfs\\\");\\n    }\\n    if (canonicalUri !== null) {\\n      // Attachment\\n      if (info.encoding === \\\"base64\\\" || type === \\\"image/svg+xml\\\") {\\n        if (addTags.indexOf(\\\"$:/isAttachment\\\") === -1) {\\n          addTags.push(\\\"$:/isAttachment\\\");\\n        }\\n        if (removeTags.indexOf(\\\"$:/isEmbedded\\\") === -1) {\\n          removeTags.push(\\\"$:/isEmbedded\\\");\\n        }\\n        if (importUri !== null) {\\n          if (addTags.indexOf(\\\"$:/isImported\\\") === -1) {\\n            addTags.push(\\\"$:/isImported\\\");\\n          }\\n        } else {\\n          if (removeTags.indexOf(\\\"$:/isImported\\\") === -1) {\\n            removeTags.push(\\\"$:/isImported\\\");\\n          }\\n        }\\n        // Others\\n      } else {\\n        if (removeTags.indexOf(\\\"$:/isAttachment\\\") === -1) {\\n          removeTags.push(\\\"$:/isAttachment\\\");\\n        }\\n        if (removeTags.indexOf(\\\"$:/isEmbedded\\\") === -1) {\\n          removeTags.push(\\\"$:/isEmbedded\\\");\\n        }\\n        if (addTags.indexOf(\\\"$:/isImported\\\") === -1) {\\n          addTags.push(\\\"$:/isImported\\\");\\n        }\\n      }\\n    } else {\\n      // Attachment\\n      if (info.encoding === \\\"base64\\\" || type === \\\"image/svg+xml\\\") {\\n        if (addTags.indexOf(\\\"$:/isAttachment\\\") === -1) {\\n          addTags.push(\\\"$:/isAttachment\\\");\\n        }\\n        if (addTags.indexOf(\\\"$:/isEmbedded\\\") === -1) {\\n          addTags.push(\\\"$:/isEmbedded\\\");\\n        }\\n        // Others\\n      } else {\\n        if (removeTags.indexOf(\\\"$:/isAttachment\\\") === -1) {\\n          removeTags.push(\\\"$:/isAttachment\\\");\\n        }\\n        if (removeTags.indexOf(\\\"$:/isEmbedded\\\") === -1) {\\n          removeTags.push(\\\"$:/isEmbedded\\\");\\n        }\\n      }\\n      if (importUri !== null) {\\n        if (addTags.indexOf(\\\"$:/isImported\\\") === -1) {\\n          addTags.push(\\\"$:/isImported\\\");\\n        }\\n      } else {\\n        if (removeTags.indexOf(\\\"$:/isImported\\\") === -1) {\\n          removeTags.push(\\\"$:/isImported\\\");\\n        }\\n      }\\n    }\\n    if (exportUri !== null) {\\n      if (addTags.indexOf(\\\"$:/isExported\\\") === -1) {\\n        addTags.push(\\\"$:/isExported\\\");\\n      }\\n    } else {\\n      if (removeTags.indexOf(\\\"$:/isExported\\\") === -1) {\\n        removeTags.push(\\\"$:/isExported\\\");\\n      }\\n    }\\n    if (addTags.length > 0 || removeTags.length > 0) {\\n      updatedTiddler = $tw.utils.updateTiddler({\\n        tiddler: updatedTiddler,\\n        addTags: addTags,\\n        removeTags: removeTags,\\n      });\\n    }\\n    $tw.wiki.addTiddler(updatedTiddler);\\n    return updatedTiddler;\\n  };\\n\\n  exports.IpfsTiddler = IpfsTiddler;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/ipfs/ipfs-utils.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-utils.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-utils.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: utils\\n\\nIPFS utils\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  /**\\n   * $:/core/modules/utils/logger.js\\n   *\\n   * TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n   *\\n   * Copyright (c) 2004-2007, Jeremy Ruston\\n   * Copyright (c) 2007-2018, UnaMesa Association\\n   * Copyright (c) 2019-2020, Blue Light\\n   * All rights reserved.\\n   *\\n   * Redistribution and use in source and binary forms, with or without\\n   * modification, are permitted provided that the following conditions are met:\\n   *\\n   * * Redistributions of source code must retain the above copyright notice, this\\n   *   list of conditions and the following disclaimer.\\n   *\\n   * * Redistributions in binary form must reproduce the above copyright notice,\\n   *   this list of conditions and the following disclaimer in the documentation\\n   *   and/or other materials provided with the distribution.\\n   *\\n   * * Neither the name of the copyright holder nor the names of its\\n   *   contributors may be used to endorse or promote products derived from\\n   *   this software without specific prior written permission.\\n   *\\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\n   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\n   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n   */\\n\\n  /*\\n   * from $:/core/modules/utils/logger.js\\n   **/\\n  exports.alert = function (callee, text) {\\n    if (typeof window === \\\"undefined\\\" || typeof window.navigator === \\\"undefined\\\") {\\n      return;\\n    }\\n    const ALERT_TAG = \\\"$:/tags/Alert\\\";\\n    // Prepare the text of the alert\\n    // var text = Array.prototype.join.call(arguments,\\\" \\\");\\n    // Check if there is an existing alert with the same text and the same component\\n    var existingAlerts = $tw.wiki.getTiddlersWithTag(ALERT_TAG),\\n      alertFields,\\n      existingCount,\\n      self = this;\\n    $tw.utils.each(existingAlerts, function (title) {\\n      var tiddler = $tw.wiki.getTiddler(title);\\n      if (\\n        tiddler.fields.text === text &&\\n        tiddler.fields.component === self.componentName &&\\n        tiddler.fields.modified &&\\n        (!alertFields || tiddler.fields.modified < alertFields.modified)\\n      ) {\\n        alertFields = $tw.utils.extend({}, tiddler.fields);\\n      }\\n    });\\n    if (alertFields) {\\n      existingCount = alertFields.count || 1;\\n    } else {\\n      alertFields = {\\n        title: $tw.wiki.generateNewTitle(\\\"$:/temp/alerts/alert\\\", { prefix: \\\"\\\" }),\\n        text: text,\\n        tags: [ALERT_TAG],\\n        component: callee,\\n      };\\n      existingCount = 0;\\n    }\\n    alertFields.modified = new Date();\\n    if (++existingCount > 1) {\\n      alertFields.count = existingCount;\\n    } else {\\n      alertFields.count = undefined;\\n    }\\n    $tw.wiki.addTiddler(new $tw.Tiddler(alertFields));\\n  };\\n\\n  exports.getChangedTiddler = function (object) {\\n    // Holder\\n    const changedTiddler = Object.create(null);\\n    // Check\\n    if (object == undefined || object == null) {\\n      return changedTiddler;\\n    }\\n    if (object instanceof $tw.Tiddler == false && typeof object !== \\\"string\\\") {\\n      return changedTiddler;\\n    }\\n    // Retrieve title\\n    var title = null;\\n    if (typeof object === \\\"string\\\") {\\n      title = object;\\n    }\\n    if (object instanceof $tw.Tiddler) {\\n      title = object.getFieldString(\\\"title\\\");\\n    }\\n    // Check\\n    if (title == undefined || title == null) {\\n      return changedTiddler;\\n    }\\n    // Process title\\n    changedTiddler[title] = Object.create(null);\\n    // Done\\n    return changedTiddler;\\n  };\\n\\n  exports.updateTiddler = function (updates) {\\n    // Is there anything to do\\n    if (updates == undefined || updates == null || updates.tiddler == undefined || updates.tiddler == null) {\\n      return null;\\n    }\\n    // Prepare updates\\n    const fields = $tw.wiki.getModificationFields();\\n    // Tags\\n    fields.tags = (updates.tiddler.fields.tags || []).slice(0);\\n    // Process add tags\\n    if (updates.addTags !== undefined && updates.addTags !== null && Array.isArray(updates.addTags)) {\\n      for (var i = 0; i < updates.addTags.length; i++) {\\n        const tag = updates.addTags[i];\\n        if (fields.tags.indexOf(tag) == -1) {\\n          $tw.utils.pushTop(fields.tags, tag);\\n        }\\n      }\\n    }\\n    // Process remove tags\\n    if (updates.removeTags !== undefined && updates.removeTags !== null && Array.isArray(updates.removeTags)) {\\n      for (var i = 0; i < updates.removeTags.length; i++) {\\n        const tag = updates.removeTags[i];\\n        const index = fields.tags.indexOf(tag);\\n        if (index !== -1) {\\n          fields.tags.splice(index, 1);\\n        }\\n      }\\n    }\\n    // Process fields\\n    if (updates.fields !== undefined && updates.fields !== null && Array.isArray(updates.fields)) {\\n      for (var i = 0; i < updates.fields.length; i++) {\\n        const field = updates.fields[i];\\n        if (field.key !== undefined && field.key !== null) {\\n          fields[field.key] = field.value;\\n        }\\n      }\\n    }\\n    // Update tiddler\\n    return new $tw.Tiddler(updates.tiddler, fields);\\n  };\\n\\n  exports.getContentType = function (tiddler) {\\n    // Check\\n    if (tiddler == undefined || tiddler == null) {\\n      throw new Error(\\\"Unknown Tiddler...\\\");\\n    }\\n    // Type\\n    var type = tiddler.fields[\\\"type\\\"];\\n    // Default\\n    if (type == undefined || type == null) {\\n      type = \\\"text/vnd.tiddlywiki\\\";\\n    }\\n    // Content-Type\\n    var info = $tw.config.contentTypeInfo[type];\\n    // Check\\n    if (info == undefined || info == null) {\\n      const url = this.getDocumentUrl();\\n      url.hash = tiddler.fields.title;\\n      $tw.utils.alert(\\n        name,\\n        \\\"Unknown Content-Type: '\\\" +\\n          type +\\n          \\\"', default to: 'text/vnd.tiddlywiki', <a href='\\\" +\\n          url +\\n          \\\"'>\\\" +\\n          tiddler.fields.title +\\n          \\\"</a>\\\"\\n      );\\n      // Default\\n      type = \\\"text/vnd.tiddlywiki\\\";\\n      info = $tw.config.contentTypeInfo[type];\\n    }\\n    return {\\n      type: type,\\n      info: info,\\n    };\\n  };\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"utils\"\n        },\n        \"$:/plugins/ipfs/ipfs-wrapper.js\": {\n            \"title\": \"$:/plugins/ipfs/ipfs-wrapper.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/ipfs/ipfs-wrapper.js\\ntype: application/javascript\\ntags: $:/ipfs/core\\nmodule-type: library\\n\\nIPFS Wrapper\\n\\n\\\\*/\\n\\n(function () {\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\\"use strict\\\";\\n\\n  /**\\n   * https://github.com/purposeindustries/window-or-global\\n   * The MIT License (MIT) Copyright (c) Purpose Industries\\n   * version: 1.0.1\\n   */\\n  const root =\\n    (typeof self === \\\"object\\\" && self.self === self && self) ||\\n    (typeof global === \\\"object\\\" && global.global === global && global) ||\\n    this;\\n\\n  const ipfsKeyword = \\\"ipfs\\\";\\n  const ipnsKeyword = \\\"ipns\\\";\\n\\n  const name = \\\"ipfs-wrapper\\\";\\n\\n  var IpfsWrapper = function (ipfsBundle) {\\n    this.ipfsBundle = ipfsBundle;\\n    this.ipfsLibrary = ipfsBundle.ipfsLibrary;\\n    this.ipfsUrl = ipfsBundle.ipfsUrl;\\n  };\\n\\n  IpfsWrapper.prototype.getLogger = function () {\\n    return root.log.getLogger(name);\\n  };\\n\\n  IpfsWrapper.prototype.getWindowIpfsClient = async function () {\\n    // IPFS Companion\\n    try {\\n      const policy = await this.ipfsLibrary.getWindowIpfs();\\n      if (policy !== null && policy.ipfs !== null && policy.provider !== null) {\\n        return policy;\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to retrieve IPFS Companion...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.getHttpIpfsClient = async function (url) {\\n    // HTTP Client\\n    try {\\n      const policy = await this.ipfsLibrary.getHttpIpfs(url);\\n      if (policy !== null && policy.ipfs !== null && policy.provider !== null) {\\n        return policy;\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to retrieve an IPFS HTTP provider...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.getIpfsClient = async function (url) {\\n    // IPFS client\\n    try {\\n      var policy = null;\\n      const ipfsProvider = $tw.utils.getIpfsProvider();\\n      if (ipfsProvider === \\\"window\\\") {\\n        policy = await this.ipfsLibrary.getWindowIpfs();\\n      } else if (ipfsProvider === \\\"http\\\") {\\n        policy = await this.ipfsLibrary.getHttpIpfs(url);\\n      } else {\\n        policy = await this.ipfsLibrary.getDefaultIpfs(url);\\n      }\\n      if (policy !== null && policy.ipfs !== null && policy.provider !== null) {\\n        return policy;\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to retrieve an IPFS provider...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.getIpnsIdentifiers = async function (ipfs, identifier, ipnsName) {\\n    if (identifier == undefined || identifier == null || identifier.trim() === \\\"\\\") {\\n      identifier = null;\\n    } else {\\n      identifier = identifier.trim();\\n    }\\n    if (ipnsName == undefined || ipnsName == null || ipnsName.trim() === \\\"\\\") {\\n      ipnsName = null;\\n    } else {\\n      ipnsName = ipnsName.trim();\\n    }\\n    if (identifier == null && ipnsName == null) {\\n      throw new Error(\\\"Undefined IPNS identifiers...\\\");\\n    }\\n    var ipnsKey = null;\\n    var normalizedUrl = null;\\n    var found = false;\\n    var keys = null;\\n    try {\\n      // Only the server who generates the key has the knowledge\\n      keys = await this.getIpnsKeys(ipfs);\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    // Do our best\\n    if (ipnsName !== null && identifier !== null) {\\n      for (var index = 0; index < keys.length; index++) {\\n        if (keys[index].id === identifier && keys[index].name === ipnsName) {\\n          ipnsKey = identifier;\\n          found = true;\\n          break;\\n        }\\n      }\\n    } else if (ipnsName !== null) {\\n      if (keys !== null && keys !== undefined && Array.isArray(keys)) {\\n        for (var index = 0; index < keys.length; index++) {\\n          if (keys[index].name === ipnsName) {\\n            ipnsKey = keys[index].id;\\n            found = true;\\n            break;\\n          }\\n        }\\n      }\\n    } else {\\n      if (keys !== null && keys !== undefined && Array.isArray(keys)) {\\n        for (var index = 0; index < keys.length; index++) {\\n          if (keys[index].id === identifier || keys[index].name === identifier) {\\n            ipnsKey = keys[index].id;\\n            ipnsName = keys[index].name;\\n            found = true;\\n            break;\\n          }\\n        }\\n      }\\n    }\\n    if (found === false) {\\n      // Unable to resolve the keys, check if identifier is a an IPFS cid\\n      if (this.ipfsBundle.isCid(identifier) === false) {\\n        throw new Error(\\\"Unknown IPNS identifier...\\\");\\n      } else {\\n        ipnsKey = identifier;\\n      }\\n    }\\n    // Lets build an url, the resolver will do the final check, we cannot do more here\\n    normalizedUrl = this.ipfsUrl.normalizeUrl(\\\"/\\\" + ipnsKeyword + \\\"/\\\" + ipnsKey);\\n    if (found) {\\n      this.getLogger().info(\\\"Successfully Fetched IPNS identifiers: \\\" + ipnsName + \\\"\\\\n \\\" + normalizedUrl);\\n    } else {\\n      this.getLogger().info(\\\"Unable to Fetch IPNS identifiers, default to\\\\n \\\" + normalizedUrl);\\n    }\\n    return {\\n      ipnsKey: ipnsKey,\\n      ipnsName: ipnsName,\\n      normalizedUrl: normalizedUrl,\\n    };\\n  };\\n\\n  IpfsWrapper.prototype.generateIpnsKey = async function (ipfs, ipnsName) {\\n    try {\\n      const key = await this.ipfsLibrary.genKey(ipfs, ipnsName);\\n      const url = this.ipfsUrl.normalizeUrl(\\\"/\\\" + ipnsKeyword + \\\"/\\\" + key);\\n      this.getLogger().info(\\\"Successfully generated IPNS key with IPNS name: \\\" + ipnsName + \\\"\\\\n \\\" + url);\\n      return key;\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to generate and IPNS key...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.removeIpnsKey = async function (ipfs, ipnsName) {\\n    try {\\n      const hash = await this.ipfsLibrary.rmKey(ipfs, ipnsName);\\n      this.getLogger().info(\\\"Successfully removed IPNS name: \\\" + ipnsName);\\n      return hash;\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to remove an IPNS Key...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.renameIpnsName = async function (ipfs, oldIpnsName, newIpnsName) {\\n    try {\\n      const { id: key, was, now } = await this.ipfsLibrary.renameKey(ipfs, oldIpnsName, newIpnsName);\\n      this.getLogger().info(\\\"Successfully renamed IPNS name: \\\" + was + \\\" with \\\" + now);\\n      return {\\n        ipnsKey: key,\\n        ipnsName: now,\\n      };\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to rename an IPNS name...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.getIpnsKeys = async function (ipfs) {\\n    try {\\n      const keys = await this.ipfsLibrary.getKeys(ipfs);\\n      this.getLogger().info(\\\"Successfully fetched IPNS keys...\\\");\\n      return keys;\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to fetch IPNS keys...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.fetchFromIpfs = async function (ipfs, cid) {\\n    // Check\\n    if (cid == undefined || cid == null || cid === \\\"\\\") {\\n      throw new Error(\\\"Undefined IPNS identifier...\\\");\\n    }\\n    const pathname = \\\"/\\\" + ipfsKeyword + \\\"/\\\" + cid;\\n    try {\\n      const fetched = await this.ipfsLibrary.cat(ipfs, pathname);\\n      const url = this.ipfsUrl.normalizeUrl(pathname);\\n      this.getLogger().info(\\\"Successfully fetched:\\\" + \\\"\\\\n \\\" + url);\\n      return fetched;\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to fetch from IPFS...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.addToIpfs = async function (ipfs, content) {\\n    try {\\n      const { hash, size } = await this.ipfsLibrary.add(ipfs, content);\\n      const pathname = \\\"/\\\" + ipfsKeyword + \\\"/\\\" + hash;\\n      const url = this.ipfsUrl.normalizeUrl(pathname);\\n      this.getLogger().info(\\\"Successfully added \\\" + size + \\\" bytes:\\\" + \\\"\\\\n \\\" + url);\\n      return {\\n        added: hash,\\n        size: size,\\n      };\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to add content to IPFS...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.resolveIpnsKey = async function (ipfs, ipnsKey) {\\n    // Check\\n    if (ipnsKey == undefined || ipnsKey == null || ipnsKey === \\\"\\\") {\\n      throw new Error(\\\"Undefined IPNS key...\\\");\\n    }\\n    const pathname = \\\"/\\\" + ipnsKeyword + \\\"/\\\" + ipnsKey;\\n    try {\\n      const url = this.ipfsUrl.normalizeUrl(pathname);\\n      const resolved = await this.ipfsLibrary.resolve(ipfs, pathname);\\n      const { cid } = this.ipfsBundle.decodeCid(resolved);\\n      if (cid !== null) {\\n        const parsed = this.ipfsUrl.normalizeUrl(resolved);\\n        this.getLogger().info(\\\"Successfully resolved IPNS key:\\\" + \\\"\\\\n \\\" + url + \\\" \\\\n \\\" + parsed);\\n        return cid;\\n      }\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to resolve an IPNS key...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.publishIpnsName = async function (cid, ipfs, ipnsKey, ipnsName) {\\n    // Check\\n    if (ipnsKey == undefined || ipnsKey == null || ipnsKey === \\\"\\\") {\\n      throw new Error(\\\"Undefined IPNS key...\\\");\\n    }\\n    if (ipnsName == undefined || ipnsName == null || ipnsName === \\\"\\\") {\\n      throw new Error(\\\"Undefined IPNS name...\\\");\\n    }\\n    if (cid == undefined || cid == null || cid === \\\"\\\") {\\n      throw new Error(\\\"Undefined IPNS identifier...\\\");\\n    }\\n    // Path\\n    const key = \\\"/\\\" + ipnsKeyword + \\\"/\\\" + ipnsKey;\\n    const pathname = \\\"/\\\" + ipfsKeyword + \\\"/\\\" + cid;\\n    try {\\n      // Publish\\n      const result = await this.ipfsLibrary.publish(ipfs, ipnsName, pathname);\\n      const keyParsed = this.ipfsUrl.normalizeUrl(key);\\n      const url = this.ipfsUrl.normalizeUrl(pathname);\\n      this.getLogger().info(\\\"Successfully published IPNS name: \\\" + ipnsName + \\\"\\\\n \\\" + keyParsed + \\\"\\\\n \\\" + url);\\n      return result;\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to publish an IPNS name...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.pinToIpfs = async function (ipfs, cid) {\\n    // Check\\n    if (cid == undefined || cid == null || cid === \\\"\\\") {\\n      throw new Error(\\\"Undefined IPNS identifier...\\\");\\n    }\\n    const pathname = \\\"/\\\" + ipfsKeyword + \\\"/\\\" + cid;\\n    try {\\n      const pinned = await this.ipfsLibrary.pin(ipfs, pathname);\\n      const url = this.ipfsUrl.normalizeUrl(pathname);\\n      this.getLogger().info(\\\"Successfully pinned:\\\" + \\\"\\\\n \\\" + url);\\n      return pinned;\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to pin to IPFS...\\\");\\n  };\\n\\n  IpfsWrapper.prototype.unpinFromIpfs = async function (ipfs, cid) {\\n    // Check\\n    if (cid == undefined || cid == null || cid === \\\"\\\") {\\n      throw new Error(\\\"Undefined IPNS identifier...\\\");\\n    }\\n    const pathname = \\\"/\\\" + ipfsKeyword + \\\"/\\\" + cid;\\n    try {\\n      const unpinned = await this.ipfsLibrary.unpin(ipfs, pathname);\\n      const url = this.ipfsUrl.normalizeUrl(pathname);\\n      this.getLogger().info(\\\"Successfully unpinned:\\\" + \\\"\\\\n \\\" + url);\\n      return unpinned;\\n    } catch (error) {\\n      this.getLogger().error(error);\\n    }\\n    throw new Error(\\\"Failed to unpin from IPFS...\\\");\\n  };\\n\\n  exports.IpfsWrapper = IpfsWrapper;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"tags\": \"$:/ipfs/core\",\n            \"module-type\": \"library\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"export to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export this tiddler to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Attachment/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Attachment/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"export attachment to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Attachment/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Attachment/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export attachment to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Content/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Content/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"export content to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Export/Content/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Export/Content/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export this tiddler content to IPFS\"\n        },\n        \"$:/language/Buttons/Ipns/Fetch/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Fetch/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"fetch from IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Fetch/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Fetch/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Fetch IPNS key\"\n        },\n        \"$:/language/Buttons/Ipns/Generate/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Generate/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"generate IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Generate/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Generate/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Generate IPNS key\"\n        },\n        \"$:/language/Buttons/Ipfs/Refresh/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Refresh/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"refresh\"\n        },\n        \"$:/language/Buttons/Ipfs/Refresh/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Refresh/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Perform a full refresh of the tiddler\"\n        },\n        \"$:/language/Buttons/Ipfs/Pin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Pin/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"pin to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Pin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Pin/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Pin this wiki to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Pin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Pin/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"pin to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Pin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Pin/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Pin tiddler resources to IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"unpin from IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Unpin tiddler resources from IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Unpin/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Unpin/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"unpin from IPFS\"\n        },\n        \"$:/language/Buttons/Ipfs/Unpin/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipfs/Unpin/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Unpin this wiki from IPFS\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Caption\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"mobile console\"\n        },\n        \"$:/language/Buttons/Console/Mobile/Hint\": {\n            \"title\": \"$:/language/Buttons/Console/Mobile/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Load/Unload Mobile Console\"\n        },\n        \"$:/language/Buttons/Ens/Manager/Open/Caption\": {\n            \"title\": \"$:/language/Buttons/Ens/Manager/Open/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"open ENS Manager\"\n        },\n        \"$:/language/Buttons/Ens/Manager/Open/Hint\": {\n            \"title\": \"$:/language/Buttons/Ens/Manager/Open/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open ENS Domain Manager\"\n        },\n        \"$:/language/Buttons/Ens/Publish/Caption\": {\n            \"title\": \"$:/language/Buttons/Ens/Publish/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish to ENS\"\n        },\n        \"$:/language/Buttons/Ens/Publish/Hint\": {\n            \"title\": \"$:/language/Buttons/Ens/Publish/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Publish this wiki to ENS\"\n        },\n        \"$:/language/Buttons/Ens/Resolve/And/Open/Caption\": {\n            \"title\": \"$:/language/Buttons/Ens/Resolve/And/Open/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"open ENS Domain content\"\n        },\n        \"$:/language/Buttons/Ens/Resolve/And/Open/Hint\": {\n            \"title\": \"$:/language/Buttons/Ens/Resolve/And/Open/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open resolved ENS Domain content\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"publish to IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Publish/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Publish/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Publish this wiki to IPNS\"\n        },\n        \"$:/language/Buttons/Ipns/Remove/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Remove/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"remove\"\n        },\n        \"$:/language/Buttons/Ipns/Remove/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Remove/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Remove IPNS name and IPNS key\"\n        },\n        \"$:/language/Buttons/Ipns/Rename/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Rename/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"rename\"\n        },\n        \"$:/language/Buttons/Ipns/Rename/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Rename/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Rename IPNS name\"\n        },\n        \"$:/language/Buttons/Ipns/Resolve/And/Open/Caption\": {\n            \"title\": \"$:/language/Buttons/Ipns/Resolve/And/Open/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"resolve and open\"\n        },\n        \"$:/language/Buttons/Ipns/Resolve/And/Open/Hint\": {\n            \"title\": \"$:/language/Buttons/Ipns/Resolve/And/Open/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Open resolved IPNS key\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Saver\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These settings are only used when saving to IPFS.\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Verbose\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Verbose\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Saver Verbose\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Url\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Url\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Server URL\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/ApiUrl\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/ApiUrl\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"API\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/GatewayUrl\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/GatewayUrl\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Gateway\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Ens\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Ens\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ENS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/EnsDomain\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/EnsDomain\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ENS domain\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Ipns\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Ipns\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/IpnsName\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/IpnsName\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS name\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/IpnsKey\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/IpnsKey\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS key\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Resolved\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Resolved\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Resolved\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Global\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Global\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Global\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Verbose/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Verbose/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Verbose\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Unpin/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Unpin/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Unpin previous content\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Wait/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Wait/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Wait\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Policy\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Policy\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Relative URL Policy\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Policy/Origin/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Policy/Origin/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Origin\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Policy/Gateway/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Policy/Gateway/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Gateway\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Protocol\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Protocol\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Protocol\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ens/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ens/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"ENS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ipfs/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ipfs/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ipns/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Protocol/Ipns/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPNS\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Export\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Export\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Export\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Export/Static/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Export/Static/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Static\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Export/Json/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Export/Json/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"JSON\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Export/Tid/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Export/Tid/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"TID\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Provider\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Provider\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Provider\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Provider/Default/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Provider/Default/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Default\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Provider/Window/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Provider/Window/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"IPFS Companion\"\n        },\n        \"$:/language/ControlPanel/Saving/IpfsService/Provider/HTTP/Description\": {\n            \"title\": \"$:/language/ControlPanel/Saving/IpfsService/Provider/HTTP/Description\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"HTTP Client\"\n        },\n        \"$:/language/ControlPanel/Basics/Version/Prompt\": {\n            \"title\": \"$:/language/ControlPanel/Basics/Version/Prompt\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<b>~TiddlyWiki</b>:\"\n        },\n        \"$:/language/ControlPanel/Ipfs/Version/Prompt\": {\n            \"title\": \"$:/language/ControlPanel/Ipfs/Version/Prompt\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"<b>IPFS</b>:\"\n        },\n        \"$:/language/ControlPanel/Settings/PreferredSaver/Caption\": {\n            \"title\": \"$:/language/ControlPanel/Settings/PreferredSaver/Caption\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Preferred Saver\"\n        },\n        \"$:/language/ControlPanel/Appearance/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Appearance/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Ways to customise the appearance of your <b>~TiddlyWiki</b>.\"\n        },\n        \"$:/language/ControlPanel/Info/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Info/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Information about this <b>~TiddlyWiki</b>\"\n        },\n        \"$:/language/ControlPanel/Saving/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Saving/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"Settings used for saving the entire <b>~TiddlyWiki</b> as a single file via a saver module.\"\n        },\n        \"$:/language/ControlPanel/Settings/Hint\": {\n            \"title\": \"$:/language/ControlPanel/Settings/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"text\": \"These settings let you customise the behaviour of <b>~TiddlyWiki</b>.\"\n        },\n        \"$:/language/EditTemplate/Body/External/Hint\": {\n            \"title\": \"$:/language/EditTemplate/Body/External/Hint\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"text\": \"This tiddler shows content stored outside of the main ~TiddlyWiki file.<br/>You can edit the tags and fields but cannot directly edit the content itself\"\n        },\n        \"$:/language/NetworkError/XMLHttpRequest\": {\n            \"title\": \"$:/language/NetworkError/XMLHttpRequest\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"text\": \"Network Error while loading...\"\n        },\n        \"$:/language/LazyLoadingWarning\": {\n            \"title\": \"$:/language/LazyLoadingWarning\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"text\": \"<p>Trying to load external Tiddler content from:<p></p>''<$ipfslink caption={{!!_canonical_uri}} value={{!!_canonical_uri}} tiddler=<<currentTiddler>>/>''</p>\"\n        },\n        \"$:/language/EmptyTidddler\": {\n            \"title\": \"$:/language/EmptyTidddler\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"text\": \"<p>An external Tiddler content has been loaded:</p><p>''<$ipfslink caption={{!!_canonical_uri}} value={{!!_canonical_uri}} tiddler=<<currentTiddler>>/>''</p><p>The imported Tiddler content is empty, possible reasons:</p><ul><li>The Tiddler Content Type doesn't match the type of the external content.</li>\"\n        },\n        \"$:/plugins/ipfs/changelog\": {\n            \"title\": \"$:/plugins/ipfs/changelog\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"!! v0.3.0\\n\\n[[See GitHub for detailed change history of this release|https://github.com/xmaysonnave/tiddlywiki-ipfs/compare/v0.2.9...v0.3.0]]\\n\\n!! v0.2.9\\n\\n[[See GitHub for detailed change history of this release|https://github.com/xmaysonnave/tiddlywiki-ipfs/compare/v0.2.8...v0.2.9]]\\n\\n!! v0.2.8\\n\\n[[See GitHub for detailed change history of this release|https://github.com/xmaysonnave/tiddlywiki-ipfs/compare/v0.2.7...v0.2.8]]\\n\\n...\\n\\n!! 0.2.2\\n\\n* First public release\"\n        },\n        \"$:/plugins/ipfs/readme\": {\n            \"title\": \"$:/plugins/ipfs/readme\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"!! IPFS with ~TiddlyWiki\\n\\nFeatures:\\n\\n* Persist over [ext[IPFS|https://ipfs.io/]] saved <b>~TiddlyWiki's</b> and file attachments\\n* Publish IPNS Names when <b>~TiddlyWiki</b> are saved\\n* Interact with Ethereum wallets [ext[Metamask|https://metamask.io]] or [ext[Frame|https://frame.sh]]\\n* Publish to [ext[ENS|https://ens.domains]]\\n\\nSupported Browsers:\\n\\n* [ext[Firefox|https://www.mozilla.org]]\\n* [ext[Chrome|https://www.google.com/chrome/]]\\n* [ext[Chromium|https://www.chromium.org]]\\n\\nSupported Ethereum wallets:\\n\\n* [ext[Metamask|https://metamask.io]]\\n* [ext[Frame|https://frame.sh]]\\n\\nSupported Mobile ĐApp browser:\\n\\n* [ext[Metamask|https://metamask.io]]\\n\\nSupported ENS Ethereum Networks\\n\\n* 'Mainnet': Ethereum Main Network\\n* 'Ropsten': Ethereum Test Network (~PoW)\\n* 'Rinkeby': Ethereum Test Network (~PoA)\\n* 'Goerli': Ethereum Test Network (~PoA)\\n\\nResources:\\n\\n* https://github.com/xmaysonnave/tiddlywiki-ipfs/\\n* https://github.com/xmaysonnave/tiddlywiki-ipfs/blob/master/README.md\\n\\n!! With a capable ENS browser:\\n\\n* [ext[IPFS with TiddlyWiki|https://bluelightav.eth]] on \\\"Mainnet: Ethereum Main Network\\\"\\n* <$ipfslink caption=\\\"IPFS with TiddlyWiki Development\\\" value=\\\"https://bluelightav.eth\\\" tiddler=<<currentTiddler>>/> on \\\"[ext[Ropsten|https://faucet.ropsten.be/]] (~PoW): Ethereum Test Network\\\"\\n* [ext[IPFS with TiddlyWiki plugin|https://bluelightav.eth/#%24%3A%2Fplugins%2Fipfs]]\\n* [ext[IPFS with TiddlyWiki Documentation|https://bluelightav.eth/#IPFS%20Documentation]]\\n\\n!! With a non capable ENS browser:\\n\\n* [ext[IPFS with TiddlyWiki|https://bluelightav.eth.link]]\\n* [ext[IPFS with TiddlyWiki plugin|https://bluelightav.eth.link/#%24%3A%2Fplugins%2Fipfs]]\\n* [ext[IPFS with TiddlyWiki Documentation|https://bluelightav.eth.link/#IPFS%20Documentation]]\"\n        },\n        \"$:/ipfs/saver/api/http/localhost/5001\": {\n            \"title\": \"$:/ipfs/saver/api/http/localhost/5001\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/api\",\n            \"text\": \"http://127.0.0.1:5001\"\n        },\n        \"$:/ipfs/saver/api/https/ipfs.infura.io/5001\": {\n            \"title\": \"$:/ipfs/saver/api/https/ipfs.infura.io/5001\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/api\",\n            \"text\": \"https://ipfs.infura.io:5001\"\n        },\n        \"$:/ipfs/saver/api/https/ipfs.bluelightav.org\": {\n            \"title\": \"$:/ipfs/saver/api/https/ipfs.bluelightav.org\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/api\",\n            \"text\": \"https://ipfs.bluelightav.org\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.busy.org\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.busy.org\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.busy.org\"\n        },\n        \"$:/ipfs/saver/gateway/https/cloudflare-ipfs.com\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/cloudflare-ipfs.com\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://cloudflare-ipfs.com\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.eternum.io\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.eternum.io\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.eternum.io\"\n        },\n        \"$:/ipfs/saver/gateway/https/gateway.bluelightav.org\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/gateway.bluelightav.org\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://gateway.bluelightav.org\"\n        },\n        \"$:/ipfs/saver/gateway/https/gateway.ipfs.io\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/gateway.ipfs.io\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://gateway.ipfs.io\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.greyh.at\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.greyh.at\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.greyh.at\"\n        },\n        \"$:/ipfs/saver/gateway/https/hardbin.com\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/hardbin.com\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://hardbin.com\"\n        },\n        \"$:/ipfs/saver/gateway/http/localhost\": {\n            \"title\": \"$:/ipfs/saver/gateway/http/localhost\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"http://127.0.0.1:8080\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.infura.io\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.infura.io\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.infura.io\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.bluelightav.org\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.bluelightav.org\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.bluelightav.org\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.io\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.io\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.io\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.jes.xxx\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.jes.xxx\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.jes.xxx\"\n        },\n        \"$:/ipfs/saver/gateway/https/ninetailed.ninja\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ninetailed.ninja\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ninetailed.ninja\"\n        },\n        \"$:/ipfs/saver/gateway/https/gateway.pinata.cloud\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/gateway.pinata.cloud\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://gateway.pinata.cloud\"\n        },\n        \"$:/ipfs/saver/gateway/https/siderus.io\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/siderus.io\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://siderus.io\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.sloppyta.co\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.sloppyta.co\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.sloppyta.co\"\n        },\n        \"$:/ipfs/saver/gateway/https/gateway.temporal.cloud\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/gateway.temporal.cloud\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://gateway.temporal.cloud\"\n        },\n        \"$:/ipfs/saver/gateway/https/ipfs.wa.hle.rs\": {\n            \"title\": \"$:/ipfs/saver/gateway/https/ipfs.wa.hle.rs\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/ipfs/saver/gateway\",\n            \"text\": \"https://ipfs.wa.hle.rs\"\n        },\n        \"$:/core/ui/Buttons/ipfs/console/mobile\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/console/mobile\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core  $:/tags/PageControls\",\n            \"caption\": \"{{$:/core/images/preview-open}} {{$:/language/Buttons/Console/Mobile/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Console/Mobile/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-console-mobile\\\" tooltip={{$:/language/Buttons/Console/Mobile/Hint}} aria-label={{$:/language/Buttons/Console/Mobile/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/preview-open}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Console/Mobile/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/pin\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/pin\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/PageControls\",\n            \"caption\": \"{{$:/core/images/chevron-up}} {{$:/language/Buttons/Ipfs/Pin/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Pin/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-ipfs-pin\\\" tooltip={{$:/language/Buttons/Ipfs/Pin/Hint}} aria-label={{$:/language/Buttons/Ipfs/Pin/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/chevron-up}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipfs/Pin/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ens/publish\": {\n            \"title\": \"$:/core/ui/Buttons/ens/publish\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/PageControls\",\n            \"caption\": \"{{$:/core/images/ens}} {{$:/language/Buttons/Ens/Publish/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ens/Publish/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-ens-publish\\\" tooltip={{$:/language/Buttons/Ens/Publish/Hint}} aria-label={{$:/language/Buttons/Ens/Publish/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/ens}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ens/Publish/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipns/publish\": {\n            \"title\": \"$:/core/ui/Buttons/ipns/publish\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/PageControls\",\n            \"caption\": \"{{$:/core/images/excise}} {{$:/language/Buttons/Ipns/Publish/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipns/Publish/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-ipns-publish\\\" tooltip={{$:/language/Buttons/Ipns/Publish/Hint}} aria-label={{$:/language/Buttons/Ipns/Publish/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/excise}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Publish/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/unpin\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/unpin\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core  $:/tags/PageControls\",\n            \"caption\": \"{{$:/core/images/chevron-down}} {{$:/language/Buttons/Ipfs/Unpin/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Unpin/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-ipfs-unpin\\\" tooltip={{$:/language/Buttons/Ipfs/Unpin/Hint}} aria-label={{$:/language/Buttons/Ipfs/Unpin/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/chevron-down}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipfs/Unpin/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/ControlPanel/Saving/Ipfs\": {\n            \"title\": \"$:/core/ui/ControlPanel/Saving/Ipfs\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/ControlPanel/Saving\",\n            \"caption\": \"{{$:/language/ControlPanel/Saving/IpfsService/Caption}}\",\n            \"text\": \"\\\\define lingo-base() $:/language/ControlPanel/Saving/IpfsService/\\n\\\\define service-name() Ipfs\\n\\n<<lingo Description>>\\n\\n''<<lingo Global>>''\\n\\n<table>\\n<tbody>\\n<tr>\\n<td width=\\\"90%\\\">''<$link to=\\\"$:/ipfs/saver/verbose\\\"><<lingo Verbose/Description>></$link>''</td>\\n<td width=\\\"10%\\\"><$checkbox tiddler=\\\"$:/ipfs/saver/verbose\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"/></td>\\n</tr>\\n<tr>\\n<td width=\\\"90%\\\">''<$link to=\\\"$:/ipfs/saver/unpin\\\"><<lingo Unpin/Description>></$link>''</td>\\n<td width=\\\"10%\\\"><$checkbox tiddler=\\\"$:/ipfs/saver/unpin\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"/></td>\\n</tr>\\n</tbody>\\n</table>\\n\\n''<$link to=\\\"$:/ipfs/saver/provider\\\"><<lingo Provider>></$link>''\\n\\n<$radio tiddler=\\\"$:/ipfs/saver/provider\\\" value=\\\"default\\\"><<lingo Provider/Default/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/provider\\\" value=\\\"window\\\"><<lingo Provider/Window/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/provider\\\" value=\\\"http\\\"><<lingo Provider/HTTP/Description>></$radio>\\n\\n''<$link to=\\\"$:/ipfs/saver/export\\\"><<lingo Export>></$link>''\\n\\n<$radio tiddler=\\\"$:/ipfs/saver/export\\\" value=\\\"json\\\"><<lingo Export/Json/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/export\\\" value=\\\"static\\\"><<lingo Export/Static/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/export\\\" value=\\\"tid\\\"><<lingo Export/Tid/Description>></$radio>\\n\\n''<$link to=\\\"$:/ipfs/saver/protocol\\\"><<lingo Protocol>></$link>''\\n\\n<$radio tiddler=\\\"$:/ipfs/saver/protocol\\\" value=\\\"ens\\\"><<lingo Protocol/Ens/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/protocol\\\" value=\\\"ipfs\\\"><<lingo Protocol/Ipfs/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/protocol\\\" value=\\\"ipns\\\"><<lingo Protocol/Ipns/Description>></$radio>\\n\\n''<$link to=\\\"$:/ipfs/saver/policy\\\"><<lingo Policy>></$link>''\\n\\n<$radio tiddler=\\\"$:/ipfs/saver/policy\\\" value=\\\"origin\\\"><<lingo Policy/Origin/Description>></$radio>\\n<$radio tiddler=\\\"$:/ipfs/saver/policy\\\" value=\\\"gateway\\\"><<lingo Policy/Gateway/Description>></$radio>\\n\\n''<<lingo Url>>''\\n\\n<table>\\n<tbody>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/api\\\"><<lingo ApiUrl>></$link>''</td>\\n<td width=\\\"80%\\\">\\n<$select tiddler=\\\"$:/ipfs/saver/api\\\" default=\\\"$:/ipfs/saver/api/https/ipfs.infura.io/5001\\\" class=\\\"tc-edit-texteditor\\\">\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/ipfs/saver/api]!has[draft.of]]\\\">\\n<option value=<<currentTiddler>>><$transclude field=\\\"text\\\"><$text text=<<currentTiddler>>/></$transclude></option>\\n</$list>\\n</$select>\\n</td>\\n</tr>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/gateway\\\"><<lingo GatewayUrl>></$link>''</td>\\n<td width=\\\"80%\\\">\\n<$select tiddler=\\\"$:/ipfs/saver/gateway\\\" default=\\\"$:/ipfs/saver/gateway/https/ipfs.infura.io\\\" class=\\\"tc-edit-texteditor\\\">\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/ipfs/saver/gateway]!has[draft.of]]\\\">\\n<option value=<<currentTiddler>>><$transclude field=\\\"text\\\"><$text text=<<currentTiddler>>/></$transclude></option>\\n</$list>\\n</$select>\\n</td>\\n</tr>\\n</tbody>\\n</table>\\n\\n''<<lingo Ens>>''\\n\\n<table>\\n<tbody>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/ens/domain\\\"><<lingo EnsDomain>></$link>''</td>\\n<td width=\\\"80%\\\"><$edit-text tiddler=\\\"$:/ipfs/saver/ens/domain\\\" class=\\\"tc-edit-texteditor\\\" default=\\\"\\\" tag=\\\"input\\\"/></td>\\n</tr>\\n</tbody>\\n</table>\\n\\n<table style=\\\"width:20%;margin-left:40%;margin-right:40%;text-align:center;\\\">\\n<tbody>\\n<tr>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ens-manager-open\\\" tooltip={{$:/language/Buttons/Ens/Manager/Open/Hint}} aria-label={{$:/language/Buttons/Ens/Manager/Open/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/ens}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ens/Manager/Open/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ens-resolve-and-open\\\" tooltip={{$:/language/Buttons/Ens/Resolve/And/Open/Hint}} aria-label={{$:/language/Buttons/Ens/Resolve/And/Open/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/globe}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ens/Resolve/And/Open/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n</tr>\\n</tbody>\\n</table>\\n\\n''<<lingo Ipns>>''\\n\\n<table>\\n<tbody>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/ipns/name\\\"><<lingo IpnsName>></$link>''</td>\\n<td width=\\\"80%\\\"><$edit-text tiddler=\\\"$:/ipfs/saver/ipns/name\\\" class=\\\"tc-edit-texteditor\\\" default=\\\"\\\" tag=\\\"input\\\"/></td>\\n</tr>\\n<tr>\\n<td width=\\\"20%\\\">''<$link to=\\\"$:/ipfs/saver/ipns/key\\\"><<lingo IpnsKey>></$link>''</td>\\n<td width=\\\"80%\\\"><$text text={{$:/ipfs/saver/ipns/key}} class=\\\"tc-edit-texteditor\\\"/></td>\\n</tr>\\n</tbody>\\n</table>\\n\\n<table style=\\\"width:50%;margin-left:25%;margin-right:25%;text-align:center;\\\">\\n<tbody>\\n<tr>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-rename\\\" tooltip={{$:/language/Buttons/Ipns/Rename/Hint}} aria-label={{$:/language/Buttons/Ipns/Rename/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/mono-line}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Rename/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-generate\\\" tooltip={{$:/language/Buttons/Ipns/Generate/Hint}} aria-label={{$:/language/Buttons/Ipns/Generate/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/new-here-button}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Generate/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-remove\\\" tooltip={{$:/language/Buttons/Ipns/Remove/Hint}} aria-label={{$:/language/Buttons/Ipns/Remove/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/delete-button}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Remove/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-fetch\\\" tooltip={{$:/language/Buttons/Ipns/Fetch/Hint}} aria-label={{$:/language/Buttons/Ipns/Fetch/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/refresh-button}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Fetch/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n<td style=\\\"width:10%\\\">\\n<$button message=\\\"tm-ipns-resolve-and-open\\\" tooltip={{$:/language/Buttons/Ipns/Resolve/And/Open/Hint}} aria-label={{$:/language/Buttons/Ipns/Resolve/And/Open/Caption}} class=\\\"tc-btn-invisible tc-ipfs-action\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/globe}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipns/Resolve/And/Open/Caption}}/></span>\\n</$list>\\n</$button>\\n</td>\\n</tr>\\n</tbody>\\n</table>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/export/attachment\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/export/attachment\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/ViewToolbar\",\n            \"caption\": \"{{$:/core/images/ipfs}} {{$:/language/Buttons/Ipfs/Export/Attachment/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Export/Attachment/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-export-attachment\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Export/Attachment/Hint}} aria-label={{$:/language/Buttons/Ipfs/Export/Attachment/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/ipfs}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Export/Attachment/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/export/content\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/export/content\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/ViewToolbar\",\n            \"caption\": \"{{$:/core/images/excise}} {{$:/language/Buttons/Ipfs/Export/Content/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Export/Content/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-export-content\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Export/Content/Hint}} aria-label={{$:/language/Buttons/Ipfs/Export/Content/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/excise}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Export/Content/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/export\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/export\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/ViewToolbar\",\n            \"caption\": \"{{$:/core/images/excise}} {{$:/language/Buttons/Ipfs/Export/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Export/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-export\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Export/Hint}} aria-label={{$:/language/Buttons/Ipfs/Export/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/excise}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Export/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/refresh\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/refresh\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/ViewToolbar\",\n            \"caption\": \"{{$:/core/images/refresh-button}} {{$:/language/Buttons/Ipfs/Refresh/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Refresh/Hint}}\",\n            \"text\": \"<$button message=\\\"tm-refresh-tiddler\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Refresh/Hint}} aria-label={{$:/language/Buttons/Ipfs/Refresh/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/refresh-button}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/Ipfs/Refresh/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/tiddler/pin\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/tiddler/pin\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/ViewToolbar\",\n            \"caption\": \"{{$:/core/images/chevron-up}} {{$:/language/Buttons/Ipfs/Tiddler/Pin/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Tiddler/Pin/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-pin\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Tiddler/Pin/Hint}} aria-label={{$:/language/Buttons/Ipfs/Tiddler/Pin/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/chevron-up}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Tiddler/Pin/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/core/ui/Buttons/ipfs/tiddler/unpin\": {\n            \"title\": \"$:/core/ui/Buttons/ipfs/tiddler/unpin\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/ViewToolbar\",\n            \"caption\": \"{{$:/core/images/chevron-down}} {{$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption}}\",\n            \"description\": \"{{$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint}}\",\n            \"text\": \"\\\\whitespace trim\\n<$button message=\\\"tm-ipfs-unpin\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Ipfs/Tiddler/Unpin/Hint}} aria-label={{$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/chevron-down}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=\\\" \\\"/>\\n<$text text={{$:/language/Buttons/Ipfs/Tiddler/Unpin/Caption}}/>\\n</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/plugins/ipfs/styles\": {\n            \"title\": \"$:/plugins/ipfs/styles\",\n            \"created\": \"20200420094915385\",\n            \"modified\": \"20200420094915385\",\n            \"tags\": \"$:/ipfs/core $:/tags/Stylesheet\",\n            \"type\": \"text/css\",\n            \"text\": \".tc-ipfs-action {\\n  display: block;\\n  margin: auto;\\n  width: 18px;\\n  height: 18px;\\n}\\n\\n.tc-icon-ipfs-wrapper {\\n  display: inline-block;\\n  width: 1em;\\n  height: 1em;\\n}\\n\\na.tc-ipfs-link-external {\\n\\ttext-decoration: underline;\\n\\tcolor: <<colour external-link-foreground>>;\\n\\tbackground-color: <<colour external-link-background>>;\\n}\\n\\na.tc-ipfs-link-external:visited {\\n\\tcolor: <<colour external-link-foreground-visited>>;\\n\\tbackground-color: <<colour external-link-background-visited>>;\\n}\\n\\na.tc-ipfs-link-external:hover {\\n\\tcolor: <<colour external-link-foreground-hover>>;\\n\\tbackground-color: <<colour external-link-background-hover>>;\\n  cursor: pointer;\\n}\"\n        }\n    }\n}"
}